AutoCloseable
useToRunServiceRegistry
getProject
serviceOfKClass
castKClass
safeCastInputStream
copyToStringBuilder
deleteAtStringBuilder
setStringBuilder
appendLineStringBuilder
appendRangeStringBuilder
deleteRangeStringBuilder
setRangeStringBuilder
toCharArrayStringBuilder
clearStringBuilder
insertRangeChar
lowercaseCharChar
uppercaseCharChar
isDefinedChar
isTitleCaseChar
isUpperCaseChar
isLetterOrDigitChar
titlecaseChar
isLetterChar
toLowerCaseChar
isDigitChar
categoryChar
isWhitespaceChar
isLowerCaseChar
lowercaseChar
isISOControlChar
uppercaseChar
toUpperCaseChar
titlecaseCharString
decapitalizeCharSequence
splitCharSequence
contentEqualsString
toUpperCaseString
capitalizeString
uppercaseString
lowercaseString
toLowerCaseThrowable
addSuppressedThrowable
suppressedExceptionsThrowable
stackTraceToStringThrowable
printStackTraceInt
rotateLeftInt
countOneBitsInt
rotateRightInt
takeLowestOneBitLong
countOneBitsLong
takeHighestOneBitLong
rotateRightLong
countLeadingZeroBitsLong
takeLowestOneBitLong
rotateLeftInt
countTrailingZeroBitsInt
countLeadingZeroBitsInt
takeHighestOneBitLong
countTrailingZeroBitsFloat
withSignFloat
roundToIntInt
signDouble
nextDownFloat
absoluteValue
Float
sign	Long
signDouble
roundToLongDouble
sign	Float
powFloat
roundToLongDouble
roundToIntDouble
withSignDouble
nextUp
Double
powDouble
absoluteValueInt
absoluteValueLong
absoluteValue
Double
ulpDouble
nextTowardsKClass
qualifiedOrSimpleNameKType
javaTypeAny
toStringString
plusSequence
flattenIterator
asSequenceSequence
orEmptySequence
unzipSequence
ifEmptySequence
shuffledSequence
constrainOnceIterator
forEachIterator
withIndexIterator
iteratorMutableMap
getValueMutableMap
setValueList
binarySearchCollection
containsAllCollection
orEmptyList
optimizeReadOnlyListCollection
isNotEmptyCollection
ifEmptyList
orEmptyCollection
isNullOrEmptyList
binarySearchByList
lastIndexArray
asCollectionCollection
indicesGrouping
foldToGrouping
aggregateGrouping
reduceToGrouping
eachCountToGrouping
reduceGrouping
foldGrouping
aggregateToSequence
windowedSequence!Array
contentDeepToStringInternalArray
unzipArray
contentDeepEqualsImplArray
flattenArray
ifEmptyArray
isNullOrEmptyArray
contentDeepToStringImplMap
filterNotMap
isNotEmptyMutableMap
setMap
orEmpty	Map
minusMap
ifEmptyMap
filterKeysSequence
toMapMap
mapKeysMutableMap
putAllMap
optimizeReadOnlyMapMap
containsMap
plusMutableMap
minusAssignMap
containsValue	Map
toMapMutableMap
plusAssignArray
toMapMap
filterToEntry
component1Entry
component2Map
getOrElseMap
iteratorEntry
toPairIterable
toMapMap
getOrElseNullableMutableMap
getOrPutMap
isNullOrEmptyMutableMap
iteratorMutableMap
removeMap
getMap
containsKeyMap
mapValuesMap
filterNotToMap
filterValues
Map
filterMap
mapKeysToMap
mapValuesToMap
toMutableMapMap
withDefaultMap
getOrImplicitDefaultMutableMap
withDefaultSet
minusElement	Set
minusSet
plusSet
plusElement Iterable
collectionSizeOrDefaultIterable
flattenIterable
unzipIterable
collectionSizeOrNullChar
titlecaseImplSet
orEmptySet
optimizeReadOnlySetMutableCollection
retainAllMutableList
removeFirstOrNullMutableCollection
addAllMutableCollection
minusAssignMutableCollection
removeAllMutableList
removeFirstMutableCollection
removeMutableCollection
plusAssignMutableIterable
retainAllMutableList
removeLastMutableList
removeAllMutableList
removeMutableList
filterInPlaceMutableIterable
removeAllMutableCollection
retainNothingMutableIterable
filterInPlaceMutableList
retainAllMutableList
removeLastOrNullULongArray
minWithUIntArray
reduceRightUByteArray
groupByToUIntArray
filterUIntArray
filterIndexedUByteArray
foldIndexedUShortArray
elementAtULongArray
forEachIndexedULongArray
maxOfOrNullUShortArray
mapUShortArray
maxOfWithULongArray
associateWithUShortArray
forEachIndexedUIntArray
mapToUIntArray
mapUIntArray
indexOfLastUIntArray
sumByDoubleULongArray
dropWhileUIntArray
getOrNullULongArray
copyIntoUIntArray
dropLastWhileULongArray
contentHashCodeUIntArray
flatMapIndexedToUByteArray
copyOfUByteArray
reduceOrNullUIntArray
sumOf!UShortArray
sortedArrayDescendingULongArray
scanUShortArray
contentToStringUShortArray
copyOfRangeUIntArray
indexOfUByteArray
maxWithOrNullUByteArray
runningReduceIndexedUIntArray
lastOrNullULongArray
takeULongArray
toTypedArrayUShortArray
filterUShortArray
minOfULongArray
withIndexUShortArray
reverseUShortArray
takeULongArray
firstUIntArray
sortedArrayULongArray
maxOrNullULongArray
reduceUIntArray
findLastUByteArray
elementAtOrNullULongArray
getOrNullUShortArray
foldRightIndexedUIntArray
lastUShortArray
foldIndexedUByteArray
groupByUIntArray
reduceOrNullUIntArray
reduceULongArray
takeLastWhileUByteArray
zipUByteArray
onEachIndexedUIntArray
plusUShortArray
takeLastWhileUIntArray
mapIndexedToUShortArray
reduceUByteArray
findLastUByteArray
randomOrNullUByteArray
reduceUIntArray
mapIndexedArray
toULongArrayUByteArray
runningReduceUIntArray
withIndexUByteArray
firstUIntArray
toTypedArrayUByteArray
maxOfWithUShortArray
singleOrNull UShortArray
runningReduceIndexedShortArray
asUShortArrayUShortArray
firstUByteArray
filterIndexedULongArray
copyOfULongArray
findUIntArray
sortUShortArray
maxUByteArray
minByOrNullULongArray
foldRightIndexedUByteArray
indexOfULongArray
sliceArrayUShortArray
findLastUShortArray
filterIndexedUIntArray
maxOfWithOrNullUShortArray
forEachUIntArray
reduceIndexedArray
toUShortArrayUShortArray
takeLastUIntArray
runningReduceIndexedULongArray
singleOrNullIntArray
asUIntArrayUShortArray
getOrElseUShortArray
flatMapToUShortArray
findULongArray
lastOrNullUByteArray
noneUIntArray
forEachIndexedUByteArray
mapIndexedToUByteArray
plusUIntArray
zipUShortArray
associateWithUShortArray
toTypedArrayUIntArray
sortedDescendingUIntArray
scanIndexedUShortArray
contentHashCodeULongArray
maxOfWithOrNullUIntArray
copyOfULongArray
minOfWithUByteArray
copyOfRangeUByteArray
minOfUShortArray
component2UByteArray
minWithOrNullULongArray
indexOfFirstULongArray
maxWithUShortArray
reduceOrNullUIntArray
dropWhileUIntArray
minByUByteArray
foldRightIndexedUByteArray
minOfWithOrNullUIntArray
filterNot#ULongArray
reduceRightIndexedOrNullUByteArray
takeLastULongArray
mapIndexedArray
toUByteArrayUShortArray
minOfWithULongArray
reduceOrNullUShortArray
reduceIndexedUShortArray
foldRightUIntArray
toIntArrayUByteArray
allUByteArray
mapToUShortArray
minWithUShortArray
indexOfFirstULongArray
foldRightUShortArray
flatMapUIntArray
sliceUIntArray
onEachIndexedUByteArray
getOrElseUShortArray
maxWithUShortArray
firstOrNullUByteArray
sortedULongArray
minOrNullULongArray
dropLastWhileUShortArray
runningFoldIndexedUIntArray
copyIntoUShortArray
component4UShortArray
component5UIntArray
indexOfFirst UByteArray
sortedArrayDescendingULongArray
onEachULongArray
contentEqualsULongArray
sumByDoubleULongArray
associateWithToUShortArray
component3UByteArray
sumOfUByteArray
component5ULongArray
anyUByteArray
associateWithToUShortArray
onEachUByteArray
minOrNullUShortArray
sliceArrayUByteArray
lastIndexULongArray
reduceRightUShortArray
maxOfOrNullUShortArray
minByUIntArray
associateWithULongArray
lastIndexOfUIntArray
firstOrNullUShortArray
countUShortArray
minByOrNullUByteArray
minOfWithULongArray
asLongArrayUIntArray
getOrElseUShortArray
getOrNullUIntArray
minOrNullUIntArray
shuffleUIntArray
firstULongArray
minOfWithOrNullUShortArray
sliceUShortArray
dropWhileUByteArray
maxByOrNullUIntArray
groupByULongArray
reduceRightIndexedULongArray
copyOfRangeUByteArray
foldULongArray
maxWithOrNullUByteArray
dropUShortArray
groupByToArray
toUIntArrayUIntArray
minOfWithOrNullUByteArray
copyIntoULongArray
runningFoldUByteArray
associateWithULongArray
runningFoldIndexedUIntArray
noneUIntArray
minOfWithUIntArray
foldUIntArray
associateWithToUIntArray
dropByteArray
asUByteArrayUByteArray
lastULongArray
flatMapIndexedUShortArray
zipUIntArray
randomUByteArray
foldRight#UByteArray
reduceRightIndexedOrNullShortArray
toUShortArrayULongArray
reduceIndexedOrNullUIntArray
lastIndexULongArray
sortUIntArray
foldRightUIntArray
asListUIntArray
takeLastUShortArray
sortUIntArray
reduceRightOrNullUByteArray
shuffleULongArray
filterULongArray
filterNotUShortArray
maxOfWithOrNullUByteArray
maxUShortArray
onEachIndexedUShortArray
mapIndexedUByteArray
reduceIndexedOrNullUShortArray
reduceRightOrNullUShortArray
takeWhileUShortArray
contentEqualsUByteArray
minOfOrNullULongArray
minOfULongArray
filterToULongArray
fillUIntArray
maxOfUByteArray
sortedArrayULongArray
sortedArrayUIntArray
reduceRightIndexedUByteArray
maxOfByteArray
toUByteArrayUShortArray
minOfWithOrNullULongArray
sumULongArray
sortDescendingUIntArray
sliceArrayUByteArray
singleOrNullUByteArray
reversed$UShortArray
reduceRightIndexedOrNullUIntArray
randomOrNull ULongArray
sortedArrayDescendingUShortArray
sortedDescendingUShortArray
mapIndexedToUByteArray
mapUShortArray
fillUShortArray
associateWithToULongArray
maxByOrNullUByteArray
sliceULongArray
randomUShortArray
indicesUIntArray
maxULongArray
reduceIndexedUIntArray
minByOrNullUShortArray
scanIndexedULongArray
mapIndexedToULongArray
forEachULongArray
groupByToULongArray
minUIntArray
component4ULongArray
sliceULongArray
filterNotToUIntArray
minWithUByteArray
sumByDoubleULongArray
asListUIntArray
component3UIntArray
component5UShortArray
indexOfUIntArray
dropLastUShortArray
flatMapIndexedToUByteArray
minUByteArray
filterIndexedToULongArray
runningReduceIndexedUIntArray
component2UShortArray
mapToULongArray
indexOfUByteArray
asListUIntArray
foldIndexedUShortArray
singleUShortArray
noneUShortArray
asListULongArray
flatMapToULongArray
firstOrNullULongArray
onEachIndexedUByteArray
reduceRightULongArray
noneUByteArray
dropLastUByteArray
getOrNullUByteArray
flatMapULongArray
filterIndexedToUShortArray
indexOfLastUByteArray
sumUByteArray
minWithUByteArray
withIndexUByteArray
reverseUIntArray
contentEqualsUIntArray
anyUShortArray
withIndexUByteArray
contentEqualsUByteArray
reversedArrayULongArray
maxULongArray
allUShortArray
anyULongArray
runningReduceUShortArray
asShortArrayUShortArray
sumByDoubleUByteArray
indexOfLastUIntArray
asIntArrayUShortArray
maxOrNullUByteArray
sumByUShortArray
reduceRightUByteArray
maxByULongArray
countUIntArray
reverseUShortArray
dropLastUShortArray
sumOfUIntArray
flatMapIndexedUShortArray
maxOfUIntArray
filterToULongArray
fold"UIntArray
reduceRightIndexedOrNullULongArray
maxOfWithUIntArray
reversedUShortArray
foldULongArray
reversedUByteArray
fillULongArray
dropUShortArray
flatMapIndexedUByteArray
filterToUShortArray
plusUByteArray
reduceRightOrNullUIntArray
flatMapUShortArray
dropUShortArray
filterToUShortArray
runningFoldUShortArray
sortedUIntArray
minOfOrNullUByteArray
singleULongArray
component5ULongArray
indicesUShortArray
filterIndexedToUByteArray
lastOrNullUIntArray
reversedArrayUByteArray
mapIndexedUIntArray
onEachULongArray
plusULongArray
component4UIntArray
minOfUShortArray
sumByUShortArray
lastIndexOfUByteArray
sliceArrayULongArray
maxOfULongArray
sumByUByteArray
runningFoldUIntArray
reduceIndexedOrNullUShortArray
reversedArrayUIntArray
takeUShortArray
filterNotToULongArray
minOfOrNullUShortArray
sortDescendingUByteArray
sortDescendingULongArray
foldIndexedUIntArray
runningFoldIndexedUShortArray
lastIndexULongArray
flatMapIndexedToULongArray
lastIndexUByteArray
sortedDescendingUIntArray
sortDescendingUByteArray
lastIndexOfULongArray
zipUIntArray
singleUByteArray
filterNotUIntArray
fillUIntArray
foldRightIndexedULongArray
singleUByteArray
takeULongArray
sortedDescendingULongArray
maxByUByteArray
dropWhileUByteArray
countULongArray
dropLastUByteArray
elementAtOrElseUIntArray
minUIntArray
runningReduceUByteArray
maxOfWithOrNullULongArray
sumOfUByteArray
flatMapIndexedToUByteArray
component3UShortArray
minULongArray
getOrElseUShortArray
maxByOrNullUByteArray
component2ULongArray
indexOfLastUIntArray
maxByUByteArray
takeWhileLongArray
asULongArrayUShortArray
sumUByteArray
scanUByteArray
takeLastWhileUByteArray
randomUByteArray
reduceIndexedUByteArray
filterNotToUShortArray
allUShortArray
lastOrNullUByteArray
component4UIntArray
elementAtUShortArray
copyIntoULongArray
component1UShortArray
maxByULongArray
contentToStringUByteArray
component1ULongArray
takeWhileUIntArray
allULongArray
filterIndexedUShortArray
randomUByteArray
onEachULongArray
toLongArrayUByteArray
flatMapIndexedUIntArray
minWithOrNullUByteArray
runningFoldIndexedUByteArray
findUIntArray
maxOfWithULongArray
sortedULongArray
component3ULongArray
elementAtOrElseUShortArray
filterNotUShortArray
component1IntArray
toUIntArrayULongArray
reduceRightOrNullUByteArray
toTypedArrayUByteArray
toByteArrayULongArray
scanIndexedULongArray
findLastUShortArray
groupByUByteArray
reduceRightIndexedUByteArray
forEachUShortArray
reduceRightIndexedUIntArray
maxWithUByteArray
sortUShortArray
minWithOrNullUIntArray
maxOfOrNullUIntArray
sortedArrayDescendingUByteArray
elementAtUByteArray
asByteArrayUByteArray
forEachIndexedUIntArray
sumULongArray
mapToUIntArray
filterNotToUShortArray
runningReduceUIntArray
countUIntArray
takeWhileUByteArray
maxOfOrNullUByteArray
maxWithULongArray
mapUShortArray
shuffleUShortArray
minOfOrNullUIntArray
forEachUShortArray
maxWithOrNullUIntArray
contentToStringULongArray
elementAtOrNullUShortArray
copyOfUShortArray
dropLastWhileUIntArray
contentHashCodeULongArray
randomOrNullULongArray
minWithOrNullUIntArray
maxOrNullUIntArray
sortedUShortArray
lastULongArray
minByOrNullULongArray
shuffleUIntArray
findUByteArray
filterUIntArray
maxWithOrNullUIntArray
filterIndexedToUIntArray
indicesUShortArray
minOrNullULongArray
flatMapUShortArray
randomOrNullUShortArray
elementAtOrElseUIntArray
elementAtOrElseUIntArray
takeLastWhileUShortArray
elementAtOrNullUByteArray
indexOfFirstULongArray
lastUIntArray
singleOrNullUShortArray
reduceIndexedOrNullLongArray
toULongArrayUByteArray
firstOrNullUIntArray
maxByOrNullUByteArray
indicesUIntArray
sumByULongArray
component2UIntArray
copyOfRangeUByteArray
maxOrNullUIntArray
groupByToUByteArray
flatMapToUByteArray
scanIndexedUIntArray
runningFoldUShortArray
reversedUIntArray
component1ULongArray
reversedArrayUIntArray
elementAtOrNullULongArray
takeLastUByteArray
dropLastWhileUByteArray
contentToStringUByteArray
anyUIntArray
flatMapToUByteArray
contentHashCodeUShortArray
sortedArrayULongArray
elementAtUIntArray
scanUShortArray
toShortArrayULongArray
minByUIntArray
lastIndexOfUShortArray
scanULongArray
reverseULongArray
groupByUByteArray
minByIterable
shuffledMutableList
sortWithMutableList
sortGrouping
eachCountCollection
toTypedArrayMap
toSingletonMapOrSelfArray
copyToArrayOfAnyArray
orEmptyMutableList
fillMap
toSingletonMapCollection
toUIntArrayCollection
toUByteArrayCollection
toULongArrayCollection
toUShortArray!Array
convertToSetForSetOperation$Iterable
convertToSetForSetOperationCollection
safeToConvertToSet(Iterable
convertToSetForSetOperationWith$Sequence
convertToSetForSetOperationLong
toIntExactOrNullShort
coerceAtLeastDouble
toShortExactOrNullDouble
toLongExactOrNullDouble
coerceInCharRange
contains
Char
untilLongProgression
lastOrNullIntProgression
firstOrNullComparable
coerceAtLeastByte
coerceAtMostShort
coerceInLong
coerceInInt
coerceAtMostCharProgression
firstOrNullLong
toByteExactOrNullFloat
toIntExactOrNullInt
toShortExactOrNullDouble
coerceAtLeast
Int
downToCharRange
randomCharProgression
lastCharProgression
stepLongProgression
lastLongProgression
firstOrNullFloat
toLongExactOrNullLong
downToLongProgression
reversedLongProgression
stepDouble
coerceAtMostInt
coerceAtLeastInt
toByteExactOrNullByte
downToCharRange
randomOrNullLong
toShortExactOrNullCharProgression
firstIntProgression
lastLongProgression
firstIntProgression
reversedFloat
toByteExactOrNull
Byte
untilFloat
coerceInIntProgression
lastOrNullComparable
coerceAtMostShort
untilIntRange
randomIntRange
randomOrNullIntProgression
stepCharProgression
lastOrNullShort
coerceAtMostShort
downToFloat
toShortExactOrNullFloat
coerceAtLeastIntRange
containsFloat
coerceAtMostDouble
toByteExactOrNullDouble
toIntExactOrNullLong
coerceAtMostCharProgression
reversedClosedRange
containsLongRange
contains	Int
untilIntProgression
firstLongRange
randomOrNullChar
downToLongRange
randomShort
toByteExactOrNullByte
coerceInLong
coerceAtLeast
Long
untilComparable
coerceInInt
coerceInByte
coerceAtLeastCharSequence
chunkedCharSequence
toCollectionCharSequence
dropLastWhileCharSequence
reduceRightOrNull CharSequence
reduceIndexedOrNullCharSequence
minOrNullCharSequence
groupByToCharSequence
foldIndexedCharSequence
getOrElseCharSequence
mapIndexedToCharSequence
singleOrNullCharSequence
onEachCharSequence
zipString
takeCharSequence
filterIndexedCharSequence
filterIndexedToCharSequence
dropWhileCharSequence
associateByToCharSequence
elementAtOrElseCharSequence
maxOfWithOrNullCharSequence
minByCharSequence
runningFoldString
filterNotCharSequence
windowedSequenceCharSequence
onEachIndexedCharSequence
elementAtOrNullString
dropLastWhileCharSequence
lastCharSequence
anyCharSequence
maxWithCharSequence
randomCharSequence
associateWithCharSequence
flatMapToCharSequence
reduceRightIndexedCharSequence
withIndexCharSequence
maxOfOrNullCharSequence
associateWithToString
reversedCharSequence
toListCharSequence
minOfWithOrNullCharSequence
toHashSetCharSequence
dropLastCharSequence
groupByCharSequence
maxByCharSequence
minWithOrNullCharSequence
getOrNullCharSequence
takeWhileCharSequence
maxOrNullCharSequence
flatMapIndexedToCharSequence
forEachCharSequence
filterNotToCharSequence
scanIndexedString
takeLastCharSequence
firstOrNullCharSequence
associateByCharSequence
take!CharSequence
runningReduceIndexedCharSequence
minCharSequence
runningReduceCharSequence
runningFoldIndexedCharSequence
mapNotNullCharSequence
firstNotNullOfCharSequence
takeLastWhileCharSequence
findLastCharSequence
mapNotNullToCharSequence
maxWithOrNullString
partitionCharSequence
reduceOrNullCharSequence
sumBy CharSequence
mapIndexedNotNullToCharSequence
minOfOrNullString
dropWhileCharSequence
groupingByCharSequence
toMutableListCharSequence
filterString
takeLastWhileCharSequence
firstCharSequence
filterToCharSequence
elementAtCharSequence
mapIndexedNotNullCharSequence
maxByOrNullString
takeWhileCharSequence
asIterableCharSequence
windowedCharSequence
associateToString
dropString
sliceCharSequence
scanCharSequence
singleCharSequence
allCharSequence
chunkedSequenceCharSequence
maxOfWithCharSequence
filterNotCharSequence
noneCharSequence
asSequenceCharSequence
sumOfCharSequence
minWithString
dropLastCharSequence
flatMapIndexedCharSequence
slice!CharSequence
firstNotNullOfOrNullCharSequence
foldRightIndexedCharSequence
randomOrNullCharSequence
indexOfLastCharSequence
countCharSequence
forEachIndexedCharSequence
minByOrNullCharSequence
lastOrNull%CharSequence
reduceRightIndexedOrNullCharSequence
associateCharSequence
mapToCharSequence
reversedCharSequence
takeLastCharSequence
foldRightCharSequence
reduceCharSequence
toSetString
filterIndexedCharSequence
maxOfCharSequence
sumByDoubleCharSequence
zipWithNextCharSequence
mapCharSequence
reduceIndexedCharSequence
findCharSequence
partitionCharSequence
minOfCharSequence
reduceRightCharSequence
dropCharSequence
flatMapString
filterCharSequence
foldCharSequence
mapIndexedCharSequence
maxCharSequence
indexOfFirstCharSequence
minOfWithList
reversePositionIndexMutableList
asReversedList
asReversedList
reverseElementIndex	Map
maxOfMap
flatMapMap
noneMap
asIterable	Map
minByMap
anyMap
maxByOrNullMap
minByOrNullMap
mapNotNullTo	Map
minOfMap
minWithOrNull
Map
onEachMap
minOfWithOrNullMap
maxWithMap
mapNotNullMap
firstNotNullOfMap
maxOfOrNullMap
allMap
minOfOrNull
Map
toListMap
asSequenceMap
minWithMap
flatMapToMap
onEachIndexed	Map
countMap
mapMap
maxOfWithMap
maxWithOrNullMap
minOfWith	Map
mapToMap
firstNotNullOfOrNullMap
forEachMap
maxOfWithOrNull	Map
maxByIterable
asIterableIterable
zipIterable
toMutableSetCollection
toByteArrayIterable
mapNotNullList
lastOrNullList
elementAtOrElseIterable
singleOrNullList
elementAtCollection
toLongArrayIterable
anyIterable
filterToIterable
joinToStringIterable
runningReduceIterable
minWithIterable
minOrNullIterable
maxOfOrNullIterable
filterIsInstanceCollection
toFloatArrayIterable
intersectIterable
scanIndexedList
reduceRightOrNullIterable
elementAtOrNullIterable
takeWhileIterable
sortedWithIterable
groupByToIterable
countCollection
plusElementIterable
maxByOrNullIterable
chunkedIterable
requireNoNullsIterable
indexOfLastIterable
associateToIterable
reversedList
dropLastWhileIterable
toListIterable
scanList
indexOfFirstCollection
toShortArrayIterable
onEachIndexedList
elementAtOrNullList
takeLastIterable
toCollectionList
indexOfMutableList
shuffleCollection
toBooleanArrayIterable
flatMapIndexedToList
firstOrNullIterable
reduceIndexedOrNullIterable
filterIndexedIterable
contains
List
sliceIterable
foldIndexed	List
lastIterable
runningReduceIndexedIterable
minOfWithIterable
lastOrNullIterable
runningFoldIndexedIterable
averageIterable
elementAtOrElseIterable
minOfOrNullList
component5List
indexOfLastCollection
toIntArrayIterable
associateList
component3Iterable
maxOfIterable
singleIterable
reduceIterable
maxWithOrNullIterable
withIndexIterable
lastIndexOfCollection
plusIterable
reduceOrNullIterable
filterIsInstanceToIterable
minOfIterable
mapIndexedToList
getOrElseIterable
toSetIterable
mapIterable
minByOrNullIterable
maxIterable
filterIterable
unionIterable
associateWithToCollection
toDoubleArrayIterable
firstIterable
takeIterable
flatMapIndexedIterable
toMutableListList
getOrNullIterable
findLastIterable
sortedByDescendingCollection
toMutableListIterable
minWithOrNullIterable
maxOfWithIterable
sumByDoubleMutableList
sortByIterable
zipWithNextIterable
indexOfIterable
partitionIterable
onEachIterable
maxByIterable
forEachIterable
filterNotNullIterable
lastIterable
minusElementIterable
runningFoldIterable
mapToIterable
mapIndexedList
lastIndexOfIterable
sumOfList
singleOrNullList
component1MutableList
reverseIterable
minByIterable
indexOfFirstList
dropLastIterable
flatMapIterable
elementAtIterable
firstNotNullOfList
singleCollection
toCharArrayCollection
randomList
component2List
reduceRightIndexedOrNullIterable
plusIterable
minOfWithOrNullIterable
forEachIndexedList
requireNoNullsCollection
countIterable
mapIndexedNotNullToIterable
filterNotNullToIterable
sortedDescendingList
reduceRightIterable
groupByList
foldRightIndexedIterable
joinToIterable
allIterable
asSequenceIterable
associateByToList
component4Iterable
sortedIterable
none
List
firstIterable
reduceIndexedIterable
toHashSetIterable
plusElementIterable
sortedByIterable
sumByIterable
associateWithIterable
mapNotNullToIterable
maxOfWithOrNullCollection
randomOrNullList
foldRightIterable
filterIndexedToIterable
maxOrNullIterable
minIterable
windowedMutableList
sortByDescendingIterable
subtractMutableList
sortDescendingList
findLastIterable
minusIterable
maxWithIterable
distinctIterable
filterNotIterable
dropWhileIterable
dropIterable
associateByIterable
firstOrNullList
reduceRightIndexedIterable
groupingByIterable
filterNotToIterable
distinctByIterable
flatMapToIterable
findIterable
firstNotNullOfOrNullList
takeLastWhileIterable
mapIndexedNotNullIterable
foldComparator
thenComparatorComparator
reversedComparator
thenDescendingComparator
thenComparator
thenByDescendingComparator
thenByByte
inv	Short
invByte
xorByte
and	Short
and	Short
xorShort
orByte
orString
toUIntULong
toStringString
toUByteOrNullString
toULongString
toUByteString
toUShortUInt
toStringUByte
toStringString
toUIntOrNullString
toUShortOrNullString
toULongOrNullUShort
toStringDoubleArray
indexOfFirstByteArray
associateToFloatArray
forEachLongArray
associateArray
maxWithByteArray
sumOfFloatArray
reversedShortArray
maxByByteArray
toMutableListShortArray
maxOrNullBooleanArray
dropByteArray
scanIndexedByteArray
maxWithOrNullCharArray
isEmptyDoubleArray
getOrElseBooleanArray
foldByteArray
asSequenceFloatArray
runningFoldIndexedShortArray
sliceLongArray
intersectShortArray
joinToIntArray
partitionDoubleArray
sortArray
copyOfRangeByteArray
mapToFloatArray
filterToIntArray
firstArray
copyIntoArray
firstNotNullOfOrNullArray
elementAtOrNullIntArray
minByOrNullByteArray
joinToStringCharArray
lastIndexDoubleArray
maxOfOrNullCharArray
joinToStringDoubleArray
subtractLongArray
minOfOrNullFloatArray
maxByOrNullLongArray
associateWithBooleanArray
foldIndexedByteArray
flatMapFloatArray
findShortArray
asListByteArray
getOrElseDoubleArray
filterIndexedToShortArray
asIterableByteArray
indexOfLastBooleanArray
takeLastWhileCharArray
minOrNullArray
reduceIndexedCharArray
maxByteArray
flatMapIndexedIntArray
contentEqualsCharArray
allCharArray
dropLastWhileArray
intersectBooleanArray
unionByteArray
partitionBooleanArray
maxOfWithOrNullLongArray
toSet
Array
noneShortArray
containsShortArray
sumByBooleanArray
randomIntArray
copyOfIntArray
associateByArray
firstLongArray
minOrNullIntArray
distinctIntArray
firstOrNullCharArray
associateLongArray
filterIndexedToArray
containsFloatArray
lastFloatArray
groupByTo
Array
drop
Array
foldLongArray
asIterableFloatArray
toTypedArrayBooleanArray
flatMapIntArray
flatMapFloatArray
contentToStringByteArray
component1ShortArray
flatMapIndexedDoubleArray
lastIndexOfLongArray
withIndexCharArray
sumOfShortArray
takeBooleanArray
minOfOrNullLongArray
joinToStringFloatArray
subtractShortArray
fillByteArray
filterByteArray
filterNotBooleanArray
filterIndexedByteArray
onEachIndexedDoubleArray
runningFoldArray
contentHashCodeByteArray
sortedArrayFloatArray
singleOrNullIntArray
groupByToCharArray
runningReduceIndexedDoubleArray
minByteArray
sortDescendingCharArray
toMutableListArray
mapIndexedCharArray
minOfOrNullArray
lastIndex!BooleanArray
runningReduceIndexedByteArray
runningReduceShortArray
onEachIndexed	Array
anyIntArray
forEachIndexedBooleanArray
minOfCharArray
filterDoubleArray
flatMapIndexedToShortArray
sumIntArray
joinToStringIntArray
sortedArrayDescendingByteArray
sumByArray
joinToStringArray
toBooleanArrayArray
takeLastWhileDoubleArray
takeBooleanArray
reduceIndexedIntArray
sortedDoubleArray
forEachArray
shuffleFloatArray
scanShortArray
runningReduceDoubleArray
reverseLongArray
plusFloatArray
averageBooleanArray
elementAtArray
contentDeepHashCodeDoubleArray
flatMapLongArray
findLastCharArray
copyIntoByteArray
component4FloatArray
toCollectionFloatArray
reduceOrNullArray
withIndexArray
associateDoubleArray
minOfWithCharArray
intersectArray
filterCharArray
filterNotToLongArray
lastIndexArray
forEachIndexedDoubleArray
joinToCharArray
indexOfLongArray
findFloatArray
asListCharArray
foldRightIndexedFloatArray
groupByFloatArray
reverseBooleanArray
minByShortArray
countShortArray
toMutableListDoubleArray
associateByToByteArray
sortedWithFloatArray
dropLastByteArray
maxOfBooleanArray
dropWhileByteArray
sliceIntArray
copyIntoCharArray
foldIndexedByteArray
plusShortArray
mapToShortArray
associateWithFloatArray
toListShortArray
onEachBooleanArray
reduceDoubleArray
containsShortArray
indexOfFirstDoubleArray
asListFloatArray
lastIndexCharArray
minOfCharArray
runningReduceByteArray
elementAtOrElseBooleanArray
distinctShortArray
distinctIntArray
reverseByteArray
minByDoubleArray
fillDoubleArray
copyOfRangeShortArray
reverseDoubleArray
reduceIndexedOrNullIntArray
singleOrNullCharArray
contentToStringFloatArray
intersectBooleanArray
sumOfByteArray
contentToStringByteArray
maxByFloatArray
filterNotByteArray
toListFloatArray
indicesLongArray
singleShortArray
sumOfArray
sortedDescendingByteArray
firstOrNullShortArray
randomFloatArray
flatMapDoubleArray
reversedArrayFloatArray
asIterableShortArray
maxOfArray
sortedArrayDescendingShortArray
sortLongArray
filterCharArray
mapIndexedBooleanArray
forEachIndexedArray
minWithDoubleArray
maxOfWithOrNullDoubleArray
forEachIndexedCharArray
reduceRightIndexedBooleanArray
filterIndexedToIntArray
countDoubleArray
minWithOrNullCharArray
associateWithToByteArray
component3LongArray
firstBooleanArray
joinToStringFloatArray
plusCharArray
minWithFloatArray
minOrNullArray
firstOrNullDoubleArray
anyBooleanArray
withIndexCharArray
unionArray
countBooleanArray
component5Array
toListBooleanArray
sortedByDescendingDoubleArray
filterIndexedBooleanArray
isNotEmptyBooleanArray
filterNotToByteArray
distinctShortArray
flatMapBooleanArray
getOrNull FloatArray
sortedArrayDescendingIntArray
indexOfFloatArray
minWithOrNullArray
maxByLongArray
sumByDoubleBooleanArray
foldRightArray
sortWithCharArray
forEachIndexedShortArray
scanIndexedCharArray
dropLongArray
isEmptyFloatArray
toSetByteArray
foldRightIndexedByteArray
minOfWithFloatArray
sortedArrayBooleanArray
scanArray
sortByDescendingIntArray
lastIndexDoubleArray
indicesCharArray
foldLongArray
runningFoldIndexedIntArray
minOfWithArray
filterIndexedLongArray
lastLongArray
sumBooleanArray
distinctByShortArray
indexOfLastBooleanArray
reverseByteArray
lastIndexByteArray
countDoubleArray
filterNotIntArray
copyOfRangeLongArray
reduceRightArray
minByOrNullBooleanArray
maxByOrNullCharArray
reversedArrayBooleanArray
groupByLongArray
indexOfFloatArray
mapIndexedToArray
sortedByteArray
groupByLongArray
sortedByFloatArray
reversedArrayFloatArray
minOfOrNullByteArray
minByOrNullBooleanArray
maxOfBooleanArray
zipCharArray
associateWithBooleanArray
anyShortArray
runningFoldIndexedArray
reduceRightIndexedCharArray
onEachArray
minOrNullDoubleArray
dropLastIntArray
asIterableByteArray
averageFloatArray
associateToIntArray
maxBy
Array
scanFloatArray
toMutableSetByteArray
singleOrNullByteArray
sortedCharArray
singleShortArray
partitionBooleanArray
indexOfFirstFloatArray
associateWithCharArray
minFloatArray
elementAtOrElseLongArray
allDoubleArray
randomFloatArray
partitionCharArray
groupByToDoubleArray
minByFloatArray
foldRightIndexedByteArray
component2BooleanArray
contentEqualsShortArray
filterNotLongArray
elementAtOrNullIntArray
getOrElseByteArray
reverseLongArray
reversedArrayByteArray
dropLastWhileLongArray
partitionDoubleArray
partitionCharArray
noneShortArray
firstOrNullArray
minWithOrNullFloatArray
containsArray
sumByIntArray
sliceArrayShortArray
flatMapToByteArray
contentHashCodeBooleanArray
maxByCharArray
scanBooleanArray
takeWhileIntArray
toMutableListBooleanArray
sumByDoubleFloatArray
dropLastWhileIntArray
sortedArrayArray
onEachDoubleArray
minOrNullShortArray
zipBooleanArray
sliceBooleanArray
intersectFloatArray
maxOrNullFloatArray
withIndexDoubleArray
takeWhileBooleanArray
takeLastByteArray
sortedArrayDescendingLongArray
sortDescendingDoubleArray
dropCharArray
singleOrNullDoubleArray
maxLongArray
onEachDoubleArray
foldBooleanArray
lastBooleanArray
reduceRightDoubleArray
intersectIntArray
sortDescendingBooleanArray
indexOfLastIntArray
randomOrNullDoubleArray
associateShortArray
forEachIndexedByteArray
minOrNullFloatArray
filterIndexedLongArray
maxByOrNullArray
associateToArray
associateByToArray
averageLongArray
minWithCharArray
sortedDescendingBooleanArray
associateIntArray
associateFloatArray
forEachIndexedShortArray
groupByToDoubleArray
takeLastWhileIntArray
reduceRightIndexedArray
groupByShortArray
maxLongArray
sortedArrayIntArray
zipDoubleArray
sumOfBooleanArray
minOfWithOrNullDoubleArray
sortedByDescendingCharArray
reduceIndexedOrNullIntArray
lastIndexOfIntArray
averageBooleanArray
indicesFloatArray
countCharArray
foldRightShortArray
joinToStringLongArray
runningFoldBooleanArray
onEachIntArray
sliceByteArray
takeLastShortArray
mapIndexedDoubleArray
sortedShortArray
plusShortArray
minByOrNullBooleanArray
copyOfShortArray
isNotEmptyCharArray
getOrElseIntArray
associateWithToCharArray
flatMapShortArray
maxOfWithIntArray
asSequenceCharArray
asIterableCharArray
flatMapIndexedToFloatArray
firstOrNullShortArray
minOfOrNullLongArray
getOrElseLongArray
distinctBooleanArray
runningFoldIndexedIntArray
takeShortArray
allArray
randomOrNullCharArray
fillBooleanArray
find#ShortArray
reduceRightIndexedOrNullShortArray
indicesDoubleArray
indexOfIntArray
intersectByteArray
sortShortArray
reversedArrayLongArray
reverseLongArray
reduceIndexedOrNullIntArray
onEachIndexedShortArray
minByFloatArray
filterNotTo
Array
findArray
flatMapToDoubleArray
firstOrNullCharArray
sortedByDescendingFloatArray
toMutableListDoubleArray
foldRightIndexedCharArray
sliceLongArray
takeCharArray
reversedCharArray
elementAtOrNullIntArray
contains
Array
fillShortArray
lastOrNullArray
mapToLongArray
foldRightFloatArray
associateByIntArray
maxOrNullDoubleArray
copyOfLongArray
mapIndexedLongArray
toListIntArray
runningReduceLongArray
reduceRightOrNullCharArray
elementAtShortArray
asSequenceByteArray
foldIndexedIntArray
mapFloatArray
noneCharArray
reduceRightOrNullArray
minOfWithArray
filterNotNullToArray
forEachFloatArray
reduceLongArray
reduceRightIndexedCharArray
getOrNullIntArray
mapToShortArray
groupByDoubleArray
runningFoldIndexedShortArray
toHashSetArray
toFloatArrayShortArray
elementAtOrElseArray
mapIndexedNotNullToFloatArray
minArray
filterIndexedToFloatArray
findLastShortArray
minOfIntArray
takeWhileByteArray
indicesByteArray
containsIntArray
groupByByteArray
isEmptyCharArray
indexOfFirstIntArray
lastIntArray
forEachCharArray
dropWhileIntArray
flatMapIndexedToLongArray
dropLongArray
asSequenceCharArray
contentHashCodeShortArray
associateByFloatArray
mapIndexedIntArray
component3ShortArray
filterToLongArray
indexOfFirstIntArray
minWithOrNullShortArray
filterShortArray
averageIntArray
sumByDoubleArray
runningFoldIndexedBooleanArray
contains"LongArray
reduceRightIndexedOrNullByteArray
sortedByDescendingShortArray
reduceRightIndexedLongArray
reduceOrNullFloatArray
minOfWithShortArray
filterNotToByteArray
forEachIndexedIntArray
sortedDescendingIntArray
filterIndexedFloatArray
associateArray
filterIsInstanceToIntArray
reduceRightByteArray
takeIntArray
sortByteArray
dropWhileLongArray
lastOrNullDoubleArray
sumByDoubleArray
singleIntArray
minOfWithOrNullBooleanArray
lastOrNullBooleanArray
component4ShortArray
reduceArray
singleOrNullArray
reversedCharArray
flatMapIndexedArray
maxOfWithLongArray
foldBooleanArray
isEmptyCharArray
maxByBooleanArray
mapToByteArray
maxByOrNullLongArray
unionByteArray
sliceArrayCharArray
lastOrNullFloatArray
reduceRightOrNull%BooleanArray
reduceRightIndexedOrNullShortArray
distinctByFloatArray
indexOfLastDoubleArray
filterToBooleanArray
reversedArrayFloatArray
sumByShortArray
minOfWithLongArray
zipIntArray
anyDoubleArray
groupByToBooleanArray
sortedWithFloatArray
asSequenceArray
joinToLongArray
copyIntoBooleanArray
toHashSetFloatArray
onEachIndexedByteArray
unionBooleanArray
groupByToFloatArray
associateByToArray
toHashSetLongArray
dropWhileArray
asListLongArray
randomOrNullCharArray
sortedWithArray
filterNotToIntArray
reduceIndexedFloatArray
shuffleIntArray
toHashSetShortArray
elementAtOrNullLongArray
maxBooleanArray
filterIntArray
singleLongArray
minOfWithOrNullBooleanArray
maxWithOrNullIntArray
reduceLongArray
copyOfRangeFloatArray
minOfFloatArray
zipFloatArray
takeWhileLongArray
scanIndexedArray
reverseBooleanArray
noneDoubleArray
maxOrNullCharArray
reverseByteArray
sumByteArray
singleCharArray
isNotEmptyBooleanArray
asListCharArray
elementAtOrElseDoubleArray
toHashSetDoubleArray
reduceShortArray
foldShortArray
dropCharArray
containsBooleanArray
firstOrNullDoubleArray
withIndexLongArray
reversedFloatArray
maxOfWithOrNullBooleanArray
joinToLongArray
maxOfWithOrNullCharArray
lastIndexOfArray
associateByIntArray
associateByToCharArray
associateToLongArray
getOrNullByteArray
randomOrNullArray
contentEqualsByteArray
maxOfOrNullShortArray
takeWhileArray
plusElementLongArray
isNotEmptyArray
foldRightIndexedCharArray
mapToShortArray
anyLongArray
maxWithOrNullLongArray
component5FloatArray
minOfWithOrNullIntArray
allFloatArray
associateWithToShortArray
contentToStringIntArray
indexOfFirstFloatArray
fillArray
sliceIntArray
indexOfLastArray
maxOrNullCharArray
distinctShortArray
copyOfArray
filterIsInstanceIntArray
dropLastWhileLongArray
foldIndexedFloatArray
reduceIndexedFloatArray
indexOfFloatArray
randomOrNullArray
flatMapBooleanArray
dropLastFloatArray
runningReduceIndexedDoubleArray
minOfArray
groupByToCharArray
runningFoldIndexedArray
onEachIndexedShortArray
component5BooleanArray
flatMapIndexedToCharArray
maxWithOrNullShortArray
toMutableSet
Array
lastShortArray
contentHashCodeBooleanArray
maxOfWithCharArray
takeLastWhileShortArray
associateToArray
lastIndexOfArray
sumOfLongArray
distinctByShortArray
mapIndexedToShortArray
filterIndexedToByteArray
dropLastFloatArray
copyIntoShortArray
subtractByteArray
indexOfFirstArray
takeWhileShortArray
sortedIntArray
sumOfFloatArray
anyLongArray
flatMapByteArray
runningFoldIndexedBooleanArray
component2LongArray
maxByBooleanArray
flatMapToArray
distinctIntArray
minByteArray
firstDoubleArray
flatMapIndexedArray
sortByBooleanArray
associateWithToLongArray
elementAt	Array
sumByteArray
runningFoldCharArray
toListShortArray
takeLastWhileLongArray
sortCharArray
plusDoubleArray
sumByDoubleIntArray
findIntArray
maxOfWithIntArray
component1ShortArray
maxWithOrNullLongArray
forEachIndexedArray
toMutableListDoubleArray
sliceArrayByteArray
copyOfRangeLongArray
maxOfOrNullFloatArray
singleShortArray
isEmptyLongArray
associateWithToDoubleArray
reduceRightDoubleArray
maxByOrNullCharArray
filterIndexedByteArray
randomIntArray
elementAtFloatArray
maxOfOrNullBooleanArray
randomOrNullBooleanArray
reversedCharArray
asSequenceIntArray
maxOfWithOrNullBooleanArray
getOrElseIntArray
runningReduceIndexedIntArray
maxWithByteArray
filterIndexedToCharArray
randomDoubleArray
lastLongArray
takeWhileArray
associateWithIntArray
unionCharArray
indicesIntArray
dropLastDoubleArray
findShortArray
singleShortArray
lastIndexOfArray
minOfByteArray
reversedLongArray
randomShortArray
maxWithCharArray
groupByLongArray
associateByLongArray
firstOrNullBooleanArray
reduceOrNullFloatArray
flatMapToFloatArray
sortShortArray
runningFoldIntArray
reversedArrayArray
randomCharArray
takeWhileShortArray
reduceRightShortArray
takeLastFloatArray
component3Array
contentDeepEqualsDoubleArray
sortedWithShortArray
toCollectionShortArray
sumByDoubleLongArray
mapToArray
unionByteArray
maxOfWithIntArray
shuffleFloatArray
toHashSetFloatArray
sumOfArray
reduceRightIndexedOrNullFloatArray
component1ByteArray
dropDoubleArray
component4LongArray
minByOrNullFloatArray
sortedShortArray
withIndexFloatArray
component5LongArray
takeLastWhileIntArray
onEachBooleanArray
asIterableBooleanArray
filterToLongArray
sumOfShortArray
singleOrNull"ByteArray
reduceRightIndexedOrNullBooleanArray
minWithDoubleArray
component2ByteArray
elementAtDoubleArray
sortedArrayArray
asSequenceFloatArray
flatMapIndexedByteArray
foldLongArray
groupByCharArray
distinctByLongArray
indicesLongArray
sortedArrayDescending#FloatArray
reduceRightIndexedOrNullDoubleArray
foldRightBooleanArray
filterNotLongArray
averageIntArray
filterNotToByteArray
maxWithBooleanArray
maxWithDoubleArray
sumShortArray
minWithOrNullIntArray
flatMapToByteArray
subtractDoubleArray
shuffleCharArray
component1CharArray
associateByLongArray
noneByteArray
noneDoubleArray
singleOrNullShortArray
findLastFloatArray
runningFoldCharArray
reduceFloatArray
contentHashCodeFloatArray
mapTo!IntArray
reduceRightIndexedOrNull DoubleArray
runningReduceIndexedArray
indexOfFirstDoubleArray
toTypedArrayFloatArray
maxOfWithLongArray
maxOrNullShortArray
associateIntArray
reversedCharArray
component2BooleanArray
firstByteArray
sumByDoubleByteArray
filterIndexedDoubleArray
maxOfWithShortArray
toTypedArrayShortArray
reduceIndexedOrNullShortArray
maxOfOrNullIntArray
minOfFloatArray
minWithByteArray
reduceArray
distinctByArray
contentToStringIntArray
foldRightIndexedShortArray
maxOfWithOrNullLongArray
minByShortArray
filterIndexedBooleanArray
mapIndexedToShortArray
sortedWithByteArray
reduceRightBooleanArray
allShortArray
shuffleShortArray
reduceOrNullIntArray
minOfOrNullDoubleArray
indexOfLastFloatArray
allArray
minOfOrNullShortArray
minArray
dropLastWhileShortArray
component4ByteArray
mapIndexedArray
component1DoubleArray
flatMapToArray
flatMapIndexedToDoubleArray
sortedDescendingFloatArray
lastIndexOfFloatArray
component4DoubleArray
minWithCharArray
filterIndexedToIntArray
foldIndexedByteArray
toSetArray
sliceArrayArray
mapNotNullToBooleanArray
associateWithIntArray
minByBooleanArray
partitionFloatArray
copyOfRangeDoubleArray
component3FloatArray
reduceRightIndexedShortArray
foldRightIndexedDoubleArray
sortedByCharArray
zipIntArray
minWithFloatArray
contentEqualsByteArray
minWithOrNullArray
minByLongArray
anyFloatArray
sortedWithArray
reduceArray
component5Array
foldIndexedFloatArray
distinctArray
toByteArrayArray
reversedArrayFloatArray
copyOfLongArray
sortedWithDoubleArray
maxByArray
groupingByCharArray
flatMapToArray
reduceIndexedOrNullCharArray
maxOrNullDoubleArray
scanIndexedShortArray
toSetDoubleArray
sliceBooleanArray
toSetByteArray
takeLastWhileFloatArray
sortedByDescendingByteArray
reduceIndexedCharArray
dropLastByteArray
runningReduceIndexedFloatArray
reduceRightBooleanArray
fillArray
contentDeepToStringFloatArray
runningReduceShortArray
reduceRightOrNullDoubleArray
plusCharArray
indexOfLastFloatArray
maxArray
mapNotNullCharArray
anyCharArray
findLastDoubleArray
maxWithOrNullByteArray
getOrNullShortArray
component2DoubleArray
findLastShortArray
component1FloatArray
indexOfFirstLongArray
joinToLongArray
asListBooleanArray
toMutableSetDoubleArray
takeLastCharArray
sliceArrayByteArray
minOfOrNullBooleanArray
contentHashCodeCharArray
minOfWithOrNullShortArray
findIntArray
foldRight
Array
plusLongArray
component1ShortArray
component3Array
component2CharArray
forEachCharArray
minWithOrNullShortArray
minOrNullLongArray
minArray
dropLastCharArray
component5ByteArray
associateByToFloatArray
maxOfBooleanArray
maxOfOrNullShortArray
runningReduceIndexedDoubleArray
dropLastWhileCharArray
component3LongArray
contentToStringLongArray
sliceDoubleArray
toCollectionIntArray
dropWhileBooleanArray
toMutableListBooleanArray
sliceArrayBooleanArray
plusShortArray
dropLastDoubleArray
countCharArray
maxOfWithLongArray
component3Array
sortedArrayWith ShortArray
sortedArrayDescendingArray
sortDescendingIntArray
filterIntArray
associateWithIntArray
mapIndexedIntArray
component4FloatArray
sliceBooleanArray
toCollectionLongArray
minOfCharArray
firstLongArray
forEachByteArray
copyOfArray
component4	Array
maxArray
filterNotLongArray
associateToDoubleArray
joinToStringCharArray
minByOrNullLongArray
maxOfIntArray
takeLastLongArray
filterNotFloatArray
distinctByShortArray
sortedByDoubleArray
scanFloatArray
minByBooleanArray
elementAtOrNullArray
toShortArrayByteArray
foldRightDoubleArray
runningReduceArray
findLastBooleanArray
associateByArray
requireNoNullsByteArray
reduceOrNullLongArray
minWithOrNullArray
takeLastFloatArray
sortDescendingArray
reduceRightOrNullDoubleArray
foldIndexedLongArray
containsCharArray
toHashSetDoubleArray
contentToStringBooleanArray
subtractIntArray
distinctByArray
copyOfArray
runningReduceArray
sortedByDescendingDoubleArray
contentHashCodeByteArray
scanFloatArray
mapCharArray
scanIndexedCharArray
takeFloatArray
reduceIndexedOrNullLongArray
foldRightIndexedCharArray
takeLastDoubleArray
filterBooleanArray
runningFoldLongArray
filterIndexedByteArray
mapArray
toIntArrayCharArray
component4IntArray
toListBooleanArray
shuffleByteArray
shuffleBooleanArray
copyOfRangeIntArray
noneBooleanArray
toTypedArrayArray
elementAtOrElseCharArray
firstOrNullByteArray
filterToIntArray
findLastArray
flatMapIndexedFloatArray
sumByDoubleDoubleArray
randomOrNullShortArray
scan BooleanArray
reduceIndexedOrNullArray
isEmptyBooleanArray
minOfWithBooleanArray
elementAtOrElseFloatArray
maxWithByteArray
maxDoubleArray
maxWithCharArray
maxOfWithOrNullIntArray
component5LongArray
elementAtOrElseIntArray
getOrNullLongArray
mapIndexedToIntArray
withIndexArray
component3FloatArray
sortedByDoubleArray
reduceRightOrNullCharArray
randomOrNullShortArray
randomOrNullBooleanArray
onEachIndexedBooleanArray
lastIndexOfFloatArray
elementAtOrNullArray
indexOfLastIntArray
foldIntArray
dropIntArray
maxByOrNullArray
indexOfLongArray
component2LongArray
toMutableSetDoubleArray
component1BooleanArray
foldRightIndexedShortArray
intersectBooleanArray
lastIndexCharArray
joinToDoubleArray
elementAtOrNullIntArray
sumByLongArray
associateByToByteArray
findDoubleArray
onEachCharArray
toMutableSetIntArray
maxWithOrNullIntArray
scanFloatArray
lastOrNull	Array
mapBooleanArray
reduceRightOrNullArray
mapIndexedNotNullByteArray
toCollectionCharArray
sortedBooleanArray
reduceRightIndexedByteArray
anyIntArray
elementAtOrElseArray
elementAtDoubleArray
mapToByteArray
mapIndexedToArray
toLongArrayShortArray
contentEqualsDoubleArray
zipIntArray
runningFoldIndexedCharArray
minOfWithLongArray
dropLastCharArray
mapIndexedToDoubleArray
toSetByteArray
intersectFloatArray
takeLastArray
partitionArray
filterNotNullCharArray
shuffleShortArray
reversedArray
sumByDoubleIntArray
runningFoldBooleanArray
contentToStringFloatArray
joinToStringByteArray
takeWhileDoubleArray
reduceIndexedByteArray
lastShortArray
flatMapIndexedToCharArray
subtractArray
maxOfFloatArray
dropWhileLongArray
singleOrNullArray
reduceOrNullIntArray
isEmptyIntArray
reduceOrNullLongArray
onEachIndexedFloatArray
isNotEmptyArray
indicesShortArray
foldIndexedByteArray
elementAtOrNullCharArray
toCollectionByteArray
asIterableBooleanArray
findLastDoubleArray
mapIndexedDoubleArray
filterNotToLongArray
toTypedArrayByteArray
toTypedArrayByteArray
reversedArrayLongArray
contentHashCodeBooleanArray
copyIntoIntArray
sortedByLongArray
lastIndexOfShortArray
toListIntArray
maxByteArray
onEachArray
runningReduceIndexedDoubleArray
lastOrNullArray
scanIndexedBooleanArray
countFloatArray
filterIndexedToCharArray
maxWithIntArray
flatMapIndexedDoubleArray
associateByCharArray
countLongArray
runningReduceFloatArray
sliceArrayByteArray
contentEqualsArray
firstNotNullOfByteArray
associate
Array
sortShortArray
sortedDescendingLongArray
copyOfShortArray
forEachIntArray
asListIntArray
maxOfOrNullBooleanArray
indexOfByteArray
indexOfByteArray
sortedBy
Array
takeShortArray
associateWithToShortArray
copyOfRangeLongArray
filterToDoubleArray
mapShortArray
minOfWithOrNullShortArray
firstCharArray
lastDoubleArray
copyIntoFloatArray
getOrNullLongArray
shuffleFloatArray
maxByBooleanArray
toListIntArray
randomIntArray
fillCharArray
sortedArrayDescendingLongArray
flatMapToCharArray
reduceOrNullDoubleArray
associateWithToByteArray
allBooleanArray
mapIndexedIntArray
reduceRightOrNullDoubleArray
groupByBooleanArray
scanIndexedByteArray
reduceRightIndexedShortArray
mapDoubleArray
noneIntArray
associateToDoubleArray
averageLongArray
maxOfWithLongArray
toCollectionCharArray
partitionByteArray
withIndexLongArray
flatMapIndexedArray
toCollectionCharArray
sumByFloatArray
sumFloatArray
filterFloatArray
foldRightArray
foldRightDoubleArray
minByOrNullByteArray
fillCharArray
filterNotDoubleArray
elementAtOrElseFloatArray
foldFloatArray
dropIntArray
isNotEmptyLongArray
mapByteArray
toMutableSetDoubleArray
maxOfArray
subtractCharArray
contentEqualsIntArray
minOrNull	Array
zipBooleanArray
takeDoubleArray
minOfWithOrNullDoubleArray
distinctShortArray
sortedByDescendingArray
reduceRightDoubleArray
reduceOrNullArray
maxWithOrNullCharArray
sortDoubleArray
toListIntArray
sortedByDescendingArray
getOrElseCharArray
toTypedArrayBooleanArray
associateByToCharArray
asListArray
asIterableLongArray
indexOfLastDoubleArray
isNotEmptyBooleanArray
sortedByBooleanArray
associateToArray
toDoubleArrayLongArray
sortedByDescending!DoubleArray
sortedArrayDescendingCharArray
maxOfOrNullByteArray
reduceIndexedOrNullFloatArray
randomLongArray
minOfWithDoubleArray
associateWithDoubleArray
lastIndexLongArray
component4FloatArray
minByOrNullCharArray
onEachIndexedBooleanArray
asSequenceByteArray
copyIntoLongArray
runningReduceIndexedFloatArray
firstDoubleArray
dropWhileByteArray
joinToShortArray
lastIndexByteArray
toHashSet	Array
minDoubleArray
asSequenceCharArray
sumByDoubleLongArray
contentEqualsArray
maxOfOrNullShortArray
indexOfIntArray
lastOrNullIntArray
toMutableSetLongArray
toHashSetBooleanArray
forEachCharArray
reduceRightByteArray
forEachByteArray
lastOrNullByteArray
associateWithToByteArray
maxOfWithOrNullArray
sortedWithArray
toMutableSetCharArray
maxOfByteArray
zipCharArray
withIndex	Array
all"CharArray
reduceRightIndexedOrNullByteArray
minFloatArray
scanIndexedArray
getOrNullDoubleArray
unionArray
singleBooleanArray
flatMapIndexedIntArray
takeLastWhileDoubleArray
toMutableListIntArray
toCollectionLongArray
sumByShortArray
foldRightShortArray
associateByToLongArray
dropLastWhileDoubleArray
associateToIntArray
subtractByteArray
associateByArray
mapIndexedToByteArray
minOfWithOrNullFloatArray
foldIndexedFloatArray
isEmptyShortArray
sortDescendingCharArray
sortDescendingLongArray
sliceArrayLongArray
scanCharArray
runningFoldDoubleArray
reversedBooleanArray
dropLastWhileIntArray
reduceIndexedOrNullShortArray
getOrElseArray
dropWhileBooleanArray
component3IntArray
filterNotIntArray
component2CharArray
mapCharArray
copyOfRangeArray
maxOfWithOrNullIntArray
mapIndexedToFloatArray
getOrElseByteArray
associateWithFloatArray
unionByteArray
isNotEmptyByteArray
component5LongArray
groupByToByteArray
filterNotToLongArray
maxWithLongArray
reduceCharArray
sortedByArray
sortedByIntArray
scanIndexedBooleanArray
minWithOrNullShortArray
reduceIndexedArray
lastOrNullBooleanArray
component1IntArray
elementAtOrNull$DoubleArray
reduceRightIndexedOrNullCharArray
toSetByteArray
asListShortArray
noneDoubleArray
getOrNullBooleanArray
singleLongArray
subtractIntArray
sortedWithBooleanArray
singleOrNullShortArray
minWithFloatArray
maxWithOrNullFloatArray
takeLongArray
takeLastArray
toSetByteArray
distinctByDoubleArray
sortDescendingFloatArray
elementAtLongArray
flatMapIndexedToByteArray
lastIndexOfDoubleArray
toMutableSetDoubleArray
reduceRightIndexedDoubleArray
isEmptyLongArray
toMutableListShortArray
getOrNullBooleanArray
mapArray
toCharArrayFloatArray
takeLastWhileArray
sortedArrayShortArray
lastIntArray
sumDoubleArray
allIntArray
maxOfArray
runningFoldFloatArray
onEachShortArray
maxByOrNullBooleanArray
runningReduceIntArray
plusDoubleArray
firstArray
associateWithToArray
minOfWithOrNullIntArray
toSetLongArray
sortedArray
filterToCharArray
reduceIndexedLongArray
fillDoubleArray
distinctByByteArray
minWithLongArray
countShortArray
elementAtFloatArray
flatMapIndexedToIntArray
joinToCharArray
maxByOrNullShortArray
sliceArrayShortArray
unionCharArray
associateByToByteArray
flatMapIndexedToIntArray
indicesCharArray
filterToDoubleArray
component5FloatArray
sortedDescendingCharArray
copyOfDoubleArray
elementAtCharArray
sortedArrayByteArray
reduceRightOrNullShortArray
dropWhileShortArray
copyIntoShortArray
dropLastWhileDoubleArray
contentEqualsIterable
sumSequence
sumLongArray
filterNotToByteArray
flatMapToDoubleArray
mapIndexedToDoubleArray
asIterableByteArray
maxOrNullCharArray
findByteArray
sortedDescendingBooleanArray
minByOrNullIntArray
filterIndexedToArray
isNotEmptyFloatArray
component2CharArray
minByBooleanArray
sumByShortArray
sortedArrayByteArray
minOfLongArray
reduceIndexedDoubleArray
onEachIndexedByteArray
groupByToFloatArray
joinToByteArray
findLastIntArray
toTypedArrayDoubleArray
minOfOrNullLongArray
sortedDescendingIntArray
contentToStringIntArray
contentHashCodeIntArray
filterToArray
maxByOrNullULongRange
containsUByte
coerceInULongProgression
lastULong
coerceAtMostULong
coerceInUIntProgression
reversedUByte
untilUIntProgression
firstUShort
coerceInUInt
coerceInUShort
coerceAtMostUByte
coerceAtMostULongRange
randomOrNullUIntProgression
lastOrNullUIntRange
containsUIntRange
randomOrNullUByte
downToUShort
coerceAtLeastUByte
coerceAtLeastUIntRange
randomUIntProgression
stepULong
untilULongProgression
firstUShort
downToULongProgression
reversedULongProgression
lastOrNullUInt
downToUIntProgression
last
UInt
untilULongRange
randomUIntProgression
firstOrNullULong
downToUShort
untilUInt
coerceAtLeastULongProgression
stepUInt
coerceAtMostULong
coerceAtLeastULongProgression
firstOrNull-SuspendFunction0
createCoroutineUnintercepted4SuspendFunction2
startCoroutineUninterceptedOrReturn4SuspendFunction1
startCoroutineUninterceptedOrReturnContinuation
intercepted-SuspendFunction1
createCoroutineUnintercepted4SuspendFunction0
startCoroutineUninterceptedOrReturnSuspendFunction1
startCoroutine Continuation
resumeWithException SuspendFunction1
createCoroutine SuspendFunction0
createCoroutineContinuation
resumeSuspendFunction0
startCoroutineShort
toULongLong
toULongByte
toULongDouble
toULongInt
toULongFloat
toULongElement
getPolymorphicElementElement
minusPolymorphicKeyDouble
isFiniteFloat
toRawBitsDouble
isInfiniteFloat
toBitsCompanion
fromBitsFloat
isInfiniteFloat
isFiniteFloat
isNaNDouble
toRawBitsDouble
isNaNDouble
toBitsSequence
associateToSequence
maxOfWithOrNullSequence
mapNotNullSequence
dropSequence
maxByOrNullSequence
filterSequence
firstOrNullSequence
elementAtOrElseSequence
scanIndexedSequence
firstNotNullOfSequence
averageSequence
asIterableSequence
indexOfFirstSequence
plusSequence
runningReduceSequence
minOfOrNullSequence
filterIndexedToSequence
anySequence
minusSequence
sortedWithSequence
maxSequence
forEachIndexedSequence
minOfWithOrNullSequence
minOfSequence
filterIndexedSequence
countSequence
lastSequence
filterNotNullToSequence
associateWithSequence
toHashSetSequence
filterNotToSequence
dropWhileSequence
groupByToSequence
associateByToSequence
firstSequence
associateSequence
mapIndexedNotNullSequence
onEachIndexedSequence
groupBySequence
chunkedSequence
sortedDescendingSequence
forEachSequence
singleSequence
findLastSequence
maxOrNullSequence
minByOrNullSequence
flatMapSequence
takeSequence
maxWithSequence
onEachSequence
associateBySequence
flatMapToSequence
minOfWithSequence
runningFoldSequence
mapIndexedNotNullToSequence
reduceOrNullSequence
filterToSequence
mapSequence
mapIndexedToSequence
reduceSequence
minWithSequence
reduceIndexedSequence
plusElementSequence
toMutableSetSequence
scanSequence
sumOfSequence
joinToSequence
toMutableListSequence
singleOrNullSequence
partitionSequence
allSequence
maxBySequence
maxWithOrNullSequence
maxOfWithSequence
distinctSequence
requireNoNullsSequence
containsSequence
lastIndexOfSequence
filterIsInstanceToSequence
mapIndexedSequence
minBySequence
filterNotSequence
toCollectionSequence
firstNotNullOfOrNullSequence
elementAtSequence
asSequenceSequence
sortedSequence
flatMapIndexedToSequence
reduceIndexedOrNullSequence
mapToSequence
sumByDoubleSequence
filterNotNullSequence
toSetSequence
filterIsInstanceSequence
lastOrNullSequence
runningFoldIndexedSequence
sortedBySequence
minSequence
toListSequence
noneSequence
maxOfSequence
sumBySequence
elementAtOrNullSequence
maxOfOrNullSequence
associateWithToSequence
sortedByDescendingSequence
findSequence
foldIndexedSequence
joinToStringSequence
minWithOrNullSequence
withIndexSequence
flatMapIndexedSequence
windowedSequence
runningReduceIndexedSequence
mapNotNullToSequence
distinctBySequence
takeWhileSequence
groupingBySequence
indexOfLastSequence
foldSequence
minOrNullSequence
zipWithNextSequence
indexOfSequence
zipSequence
minusElementLong
toUByteShort
toUByteInt
toUByteByte
toUByteString
toShortString
toFloatOrNullString
replaceString
toLongString
toByteLong
toStringCharSequence
regionMatchesByteArray
decodeToStringString
nativeLastIndexOfString
endsWithCharSequence
isBlankCharSequence
repeat Companion
CASE_INSENSITIVE_ORDERString
startsWithCharArray
concatToStringString
equalsString
toDoubleOrNullShort
toStringString
toCharArrayInt
toStringString
toBooleanString
toFloatString
nativeIndexOfByte
toStringString
toIntString
replaceFirstChar
isHighSurrogateString
encodeToByteArrayString
compareToString
toDoubleChar
isLowSurrogateToolchainManagement
jvmThreadLocal
setValueThreadLocal
getValue$BuildOperationExecutor
withOperation)BuildOperationExecutor
withStoreOperation(BuildOperationExecutor
withLoadOperationHost
service"Property
simplePropertyDescriptionClass
requireResource#UserCodeApplicationContext
locationListenerManager
getBroadcasterAny
uncheckedCast.Throwable
maybeUnwrapInvocationTargetExceptionString
toDefaultLowerCaseMap
filterKeysByPrefixFileSystemAccess
hashCodeOfCharSequence
capitalizedGradleInternal
serviceOfTaskInternal
serviceOfDecoder
readCollectionIntoDecoder
readCollectionEncoder
writeStringsReadContext
readCollectionIntoEncoder
writeEnumReadContext
readClassOfDecoder
readFileDecoder
readEnumReadContext
readArray(ReadContext
decodeUsingJavaSerializationEncoder
writeFileWriteContext
writeClassArrayDecoder
readDoubleReadContext
readClassArrayEncoder
writeDoubleWriteContext
writeMapEntriesReadContext
readMapIntoDecoder
readFloatReadContext
readMapEntriesIntoReadContext
readListIsolateContext
ownerServiceEncoder
writeCollectionDecoder
readShortDecoder
readClassPathWriteContext
writeCollectionEncoder
writeFloatWriteContext
writeMapEncoder
writeClassPathEncoder
writeShort)WriteContext
encodeUsingJavaSerializationWriteContext
writeArrayDecoder
readStrings IsolateContext
logNotImplemented!IsolateContext
logPropertyProblemIsolateContext
logUnsupportedWriteContext
withDebugFrame#MutableIsolateContext
withBeanTrace*ReadContext
decodePreservingSharedIdentity'MutableIsolateContext
withGradleIsolateReadContext
readNonNull'WriteContext
encodePreservingIdentityOf$ReadContext
decodePreservingIdentityWriteContext
encodeBeanReadContext
decodeBean-WriteContext
encodePreservingSharedIdentityOfReadContext
withImmediateModeMutableIsolateContext
withCodec!MutableIsolateContext
withIsolateReadContext
runReadOperationWriteContext
runWriteOperationReadContext
readPropertyValueWriteContext
writeNextPropertyAccessibleObject
makeAccessibleClass
relevantFieldsField
isTransient0MutableIsolateContext
reportUnsupportedFieldTypeField
isStaticWriteContext
writeAttributeReadContext
readAttributeReadContext
readAttributesUsingReadContext
readAttributeValueReadContext
readManagedWriteContext
writeManaged WriteContext
writeAttributeValueWriteContext
writeAttributesReadContext
readPatternSetWriteContext
writePatternSet!ReadContext
readInputPropertiesOfIsolateContext
withTaskOfReadContext
createTask(WriteContext
writeRegisteredPropertiesOf&ReadContext
readRegisteredPropertiesOf"ReadContext
readOutputPropertiesOf BindingsBuilder
unsupportedTypes9ReadContext
readCollectionCheckingForCircularElementsInto7WriteContext
writeCollectionCheckingForCircularElementsClass
overridesHashCodeBindingsBuilder
javaTimeTypesWriteContext
writeEnumValueOf,Iterable
firstAccessibleMatchingMethodOrNullClass
firstMatchingMethodOrNullClass
allMethods)Class
firstAccessibleMatchingMethodOrNullReadContext
decodingBeanWithIdMethod
isReadResolve%Iterable
serializationMethodHierarchyReadContext
putIdentityBuilder
failedJOSByte
rotateLeftByte
takeHighestOneBitShort
countTrailingZeroBitsShort
countLeadingZeroBitsByte
countOneBitsShort
takeLowestOneBitShort
countOneBitsByte
takeLowestOneBitShort
rotateLeftByte
countTrailingZeroBitsShort
rotateRightShort
takeHighestOneBitByte
countLeadingZeroBitsByte
rotateRightDeepRecursiveFunction
invokeLazy
getValueKProperty1
getValueKMutableProperty0
setValueKProperty0
getValueKMutableProperty1
setValueAny
hashCodeResult
getOrElseResult
throwOnFailure
Result
mapAny
runCatchingResult
getOrDefaultResult
recoverCatchingResult
recoverResult
getOrThrowResult
mapCatchingResult
onFailureResult
onSuccessResult
foldByte
mod
Double
modInt
mod	Short
modShort
floorDiv	Float
modInt
floorDivLong
modByte
floorDivLong
floorDivKProperty0
isInitializedUShort
takeHighestOneBitULong
takeLowestOneBitUShort
takeLowestOneBitULong
rotateLeftUByte
countLeadingZeroBitsULong
countTrailingZeroBitsUShort
rotateRightULong
countLeadingZeroBitsUShort
countTrailingZeroBitsUByte
countTrailingZeroBitsUByte
countOneBitsUShort
countOneBitsULong
rotateRightUByte
rotateLeftUInt
rotateRightUByte
takeLowestOneBitUByte
rotateRightUInt
takeHighestOneBitUByte
takeHighestOneBitULong
takeHighestOneBitUInt
countOneBitsUInt
takeLowestOneBitULong
countOneBitsUInt
countLeadingZeroBitsUShort
rotateLeftUInt
rotateLeftUShort
countLeadingZeroBitsUInt
countTrailingZeroBitsLong
toUIntDouble
toUIntShort
toUInt
Int
toUIntFloat
toUIntByte
toUInt	Char
codeTriple
toListAny
toPair
toListAny
runAny
letAny
takeUnless
Any
takeIfAny
also	Any
applyRandom
nextUBytesRandom
nextUIntRandom
nextULongRandom
nextLongInt
takeUpperBitsRandom
nextIntComparable
rangeToFloat
rangeToDouble
rangeToTimeSource
measureTimedValueMonotonic
measureTimeTimeSource
measureTimeMonotonic
measureTimedValueLong
nanosecondsLong
microseconds	Int
timesString
substringWhileDouble
hoursInt
secondsString
skipWhileInt
daysInt
toDurationInt
minutesLong
minutesDouble
toDurationDouble
minutesDouble
microsecondsDouble
daysDouble
secondsLong
secondsLong
milliseconds	Long
daysDouble
nanoseconds
Long
hoursInt
millisecondsInt
microsecondsLong
toDuration	Int
hoursDouble
millisecondsInt
nanosecondsDouble
timesTimeMark
minusTimeMark
compareToDurationUnit
shortNameComparable
compareToAppendable
appendElementAppendable
appendAppendable
appendLineAppendable
appendRangeStringBuilder
appendString
toByteOrNullString
toShortOrNullString
toIntOrNullString
toLongOrNullString
indentWidthString
replaceIndentString
replaceIndentByMarginString
prependIndentString
trimMarginList
reindentString
trimIndentCharSequence
removeSuffixCharSequence
removeSurroundingCharSequence
removePrefixCharSequence
subSequenceCharSequence
lastIndexOfCharSequence
indexOfAnyString
substringAfter(CharSequence
contentEqualsIgnoreCaseImplCharSequence
linesString
trimCharSequence
iteratorString
orEmptyCharSequence
isNullOrBlankCharSequence
indexOfCharSequence
splitToSequenceCharSequence
hasSurrogatePairAtString
trimEndString
toBooleanStrictOrNullCharSequence
replaceFirstCharSequence
ifEmptyCharSequence
padEndCharSequence
containsString
replaceBeforeCharSequence
commonSuffixWithString
removeSurroundingString
replaceAfterString
substringAfterLastString
padEndCharSequence
endsWithCharSequence
removeRangeCharSequence
ifBlankString
replaceAfterLastCharSequence
contentEqualsImplCharSequence
isNullOrEmptyString
trimStartCharSequence
startsWithCharSequence
regionMatchesImplCharSequence
lastIndexString
padStartCharSequence
substringCharSequence
trimCharSequence
findLastAnyOfString
removeRangeCharSequence
replaceRangeString
replaceFirstCharString
replaceRangeCharSequence
isNotEmptyCharSequence
lastIndexOfAnyString
toBooleanStrictCharSequence
matchesCharSequence
trimEndString
substringBeforeLastString
substringBeforeString
removeSuffixString
replaceBeforeLastCharSequence
findAnyOfCharSequence
indicesCharSequence
trimStartString
subSequenceCharSequence
padStartCharSequence
isNotBlankCharSequence
lineSequenceCharSequence
isEmptyString
removePrefixCharSequence
rangesDelimitedByCharSequence
commonPrefixWithCharSequence
replaceString
toRegexInt
digitToChar	Char
plusChar
digitToIntOrNullChar
equalsChar
isSurrogateChar
digitToIntLong
toUShortByte
toUShortShort
toUShortInt
toUShortScriptHandler
configureWithFile
normalisedPathRelativeToFile
walkReproduciblyGradleConnector
useGradleFrom3KotlinBuildScriptModelRequest
toFetchParametersWith!ProjectConnection
modelBuilderForEditorPosition
toIdePositionReport
editorReportReport
warningReport
error"EditorReportSeverity
toIdeSeverityReport
fatal"ClassLoaderScope
traverseAncestorsClassLoaderScope
foldHierarchy"ClassLoaderScope
traverseHierarchyGradle
serviceOfEnvironment
gradleVersionEnvironment
gradleUriEnvironment
stringMapEnvironment
gradleUserHomeEnvironment
projectRootEnvironment
pathEnvironment
gradleOptionsEnvironment
gradleJavaHomeEnvironment
gradleJvmOptionsEnvironment
gradleHome&Environment
gradleEnvironmentVariablesEnvironment
stringListMap
isShortCircuitEnabledClassPath
filter)CompilerConfiguration
addScriptDefinition#CompilerConfiguration
setModuleName#Disposable
kotlinCoreEnvironmentFor4CompilerConfiguration
addScriptingCompilerComponentsLogger
debugLogger
errorLogger
traceLogger
infoFile
isParentOf$Appendable
appendReproducibleNewLineFile
listFilesOrderedString
normaliseLineSeparatorsJarFile
loadPropertiesJarFile
loadPropertiesOrNullSettings
serviceOfString
isClassFilePathFile
isClassPathArchive KmFunctionVisitor
visitParameter KmFunctionVisitor
visitSignature(KmFunctionVisitor
visitOptionalParameterClassWriter
endKotlinClass(ClassVisitor
publicStaticSyntheticMethodWriter
closeHeaderWriter
writeFunctionOfKmTypeVisitor
with)ClassWriter
visitKotlinMetadataAnnotationWriter
writePropertyOfMethodVisitor
TRY_CATCHClassVisitor
methodMethodVisitor
INVOKEVIRTUALMethodVisitor
RETURNMethodVisitor
kotlinDeprecationKClass
internalNameMethodVisitor
GETSTATICMethodVisitor
visitMethodInsn_MethodVisitor
visitTypeInsnMethodVisitor
LDCMethodVisitor
NEWMethodVisitor
DUPMethodVisitor
ASTOREMethodVisitor
ARETURNClassVisitor
publicMethodMethodVisitor
INVOKEINTERFACEMethodVisitor
INVOKESPECIALClass
internalNameMethodVisitor
ACONST_NULLMethodVisitor
ALOADClassWriter
endClassMethodVisitor
BASTORE$ClassWriter
publicDefaultConstructorMethodVisitor
GOTOMethodVisitor
GETFIELDMethodVisitor
CHECKCASTMethodVisitor
PUTFIELDMethodVisitor
NEWARRAYMethodVisitor
INVOKESTATICMethodVisitor
loadByteArrayIO
writeFileAction
invokeArtifactHandler
invoke#ConfigurableFileCollection
setValue#ConfigurableFileCollection
getValueScriptHandler
dependencyLocking NamedDomainObjectProvider
invokeDependencyHandler
create'DependencyHandler
configureClientModuleDependencyHandler
addDependencyHandler
moduleModuleDependency
exclude"NamedDomainObjectContainer
getting&NamedDomainObjectContainer
registering,PolymorphicDomainObjectContainer
registering#NamedDomainObjectContainer
creating!NamedDomainObjectContainer
invoke)PolymorphicDomainObjectContainer
creatingDependencies
moduleDependencyAdder
invoke*NamedDomainObjectProvider
withDependencies(NamedDomainObjectProvider
setExtendsFrom/NamedDomainObjectProvider
dependencyConstraints)NamedDomainObjectProvider
allDependencies!NamedDomainObjectProvider
resolveNamedDomainObjectProvider
minus2NamedDomainObjectProvider
allDependencyConstraints#NamedDomainObjectProvider
isVisible(NamedDomainObjectProvider
uploadTaskNameNamedDomainObjectProvider
plus+NamedDomainObjectProvider
buildDependencies#NamedDomainObjectProvider
artifacts-NamedDomainObjectProvider
defaultDependencies@NamedDomainObjectProvider
getTaskDependencyFromProjectDependency NamedDomainObjectProvider
filterNamedDomainObjectProvider
copy(NamedDomainObjectProvider
fileCollection$NamedDomainObjectProvider
asFileTree&NamedDomainObjectProvider
excludeRules,NamedDomainObjectProvider
resolutionStrategyFileCollection
plus"NamedDomainObjectProvider
contains&NamedDomainObjectProvider
isTransitive)NamedDomainObjectProvider
addToAntBuilder(NamedDomainObjectProvider
setDescriptionNamedDomainObjectProvider
all&NamedDomainObjectProvider
dependencies$NamedDomainObjectProvider
singleFile!NamedDomainObjectProvider
isEmpty"NamedDomainObjectProvider
outgoingFileCollection
minus/NamedDomainObjectProvider
resolvedConfigurationNamedDomainObjectProvider
state$NamedDomainObjectProvider
attributes%NamedDomainObjectProvider
extendsFrom%NamedDomainObjectProvider
descriptionNamedDomainObjectProvider
files#NamedDomainObjectProvider
hierarchy)NamedDomainObjectProvider
isCanBeResolved"NamedDomainObjectProvider
incoming&NamedDomainObjectProvider
allArtifacts NamedDomainObjectProvider
asPath'NamedDomainObjectProvider
copyRecursive)NamedDomainObjectProvider
isCanBeConsumed!NamedDomainObjectProvider
exclude'NamedDomainObjectProvider
setTransitiveRepositoryHandler
mavenRepositoryHandler
ivyGradle
applyAny
provideDelegate%ExistingDomainObjectDelegate
getValue#NamedDomainObjectCollection
getting$NamedDomainObjectCollection
existing+NamedDomainObjectCollection
provideDelegateNamedDomainObjectCollection
get"NamedDomainObjectProvider
getValue%NamedDomainObjectCollection
getByNameProperty
getValueProperty
setValueProject
dependenciesProject
repositoriesProject
pluginsProject
theProject
applyProject
buildscriptProject
artifactsProject
provideDelegateProject
configureProject
defaultTasksScriptHandler
repositoriesProject
gradleKotlinDslMethodVisitor
GETPLUGINS1BufferedWriter
appendSourceCodeForPluginAccessorsKmTypeVisitor
visitClassIO
buildPluginAccessorsForIO
writeClassFileTo#IO
writePluginAccessorsSourceCodeToClassWriter
packagePrivateField!ClassWriter
emitAccessorMethodForIterable
runEach!PluginDependenciesSpec
build-scan(PluginDependenciesSpec
gradle-enterpriseExtensionAware
theExtensionAware
configureSpec
invoke(ExtraPropertiesExtension
provideDelegateExtensionAware
extraExtraPropertiesExtension
invokeAny
withGroovyBuilderClosure
invokeAny
closureOfAny
delegateClosureOf*Builder
defaultImportsForPrecompiledScriptPluginAware
applyToConfiguration
excludeTypeOf
builderMethodVisitor
invokeRuntimeAccessible
internalNameMethodVisitor
loadConventionOf(MethodVisitor
invokeDependencyHandlerAddMethodVisitor
invokeActionSchemaType
builder1ConfigurationEntry
getDeclarationDeprecationBlock7BytecodeFragmentScope
publicStaticMaybeDeprecatedMethod&Writer
writeElementAccessorMetadataFor3ConfigurationEntry
getDeclarationDeprecationMessage"DependencyConstraintHandler
invokeCallable
invokeExtensionContainer
getByNameExtensionContainer
getExtensionContainer
getValueConvention
findPluginConvention
getPluginByNameAny
withConventionConvention
getPluginPluginDependencySpec
applyPluginDependencySpec
versionSettings
applySettings
provideDelegateTaskContainer
invokeList
singleSectionOfList
has(ParameterNamesSupplier
parameterNamesForContext
apiTypeParametersForInt
isVarargs!Context
apiTypeUsageForReturnTypeInt
isStatic&ApiTypeUsage
isStarProjectionTypeUsageInt
isPublic Context
apiFunctionParametersForContext
apiTypeUsageForInt
isSyntheticInt
isAbstractString
eraseProgramSource
fragment%CharSequence
linePreservingBlankRangeCharSequence
splitIncluding%CharSequence
linePreservingSubstring_CharSequence
lineAndColumnFor#CharSequence
lineAndColumnFromRange$CharSequence
linePreservingSubstring&CharSequence
linePreservingBlankRangesZipEntry
isFileIO
emitClassForIO
emitAccessorsForIO
makeAccessorOutputDirsIO
writeAccessorsBytecodeTo/ScriptSource
withLocationAwareExceptionHandling0TemporaryFileProvider
withTemporaryScriptFileForSequence
groupedByTargetApiTypeUsage
toKotlinClassApiTypeUsage
isGroovyClosureApiTypeUsage
isGradleTypeOfApiTypeUsage
isMap!Boolean
toKotlinNullabilityStringApiTypeUsage
hasJavaClassList
rawTypesToStarProjectionsApiTypeUsage
isJavaClass"ApiTypeUsage
toTypeParameterString!ApiTypeUsage
toTypeArgumentString%ApiTypeUsage
isGroovyNamedArgumentMapApiFunction
newMappedParameters#ApiTypeUsage
toArrayOfKotlinClassesApiTypeUsage
isKotlinCollectionApiTypeUsage
isAny"List
groovyNamedArgumentsToVarargsApiTypeUsage
isSAM-Sequence
sortedWithTypeOfTakingFunctionsFirstApiTypeUsage
isKotlinArrayList
toTypeParametersStringVariance
toKotlinStringList
toTypeArgumentsString2ApiTypeUsage
singleTypeArgumentRawToStarProjectionApiTypeUsage
isString(ApiTypeUsage
toCollectionOfKotlinClassesList
javaClassToKotlinClassList
joinInAngleBrackets#DependencyFactoryInternal
gradleApiProject
fileCollectionOf.ClassPathModeExceptionCollector
ignoringErrorsList
singleBlockSectionOrNull%KotlinLexer
skipWhiteSpaceAndCommentsKotlinLexer
parseQualifiedName"ExtensionAware
getOrCreatePropertyInt
containsHasher
putAllSorted.Project
warnAboutDiscontinuedJsonProjectSchemaIO
writeAccessorsToIO
buildAccessorsForHasher
putAllOptional
toListOptional
toCollectionOptional
toSetOptional
asSequenceOptional
getOrNullMatchGroupCollection
get)VariableDescriptorWithAccessors
accessorsDuration
toKotlinDurationDuration
toJavaDuration"DescriptorVisibility
forVisibilitySet
leastPermissiveKotlinType
dependentDescriptors(DescriptorVisibility
effectiveVisibility7DeclarationDescriptorWithVisibility
effectiveVisibility$KotlinType
leastPermissiveDescriptor)ClassifierDescriptor
dependentDescriptors*EffectiveVisibility
toDescriptorVisibility#ClassDescriptor
effectiveVisibility7TypeParameterDescriptor
capturedCopyForInnerDeclarationGClassifierDescriptorWithTypeParameters
computeConstructorTypeParameters!KotlinType
buildPossiblyInnerTypeKotlinType
canBeUsedForConstVal6ModuleDescriptor
findNonGenericClassAcrossDependencies2ModuleDescriptor
findClassAcrossModuleDependencies6ModuleDescriptor
findTypeAliasAcrossModuleDependencies%ModuleDescriptor
withResolutionAnchor7ModuleDescriptor
findClassifierAcrossModuleDependencies"ModuleDescriptor
moduleInvalidatedLongStream
toListDoubleStream
asSequenceDoubleStream
toListStream
asSequenceLongStream
asSequenceSequence
asStreamStream
toListIntStream
asSequenceIntStream
toListClassDescriptor
isFinalOrEnumClassDescriptor
isFinalClass&CallableMemberDescriptor
isOverridable1CallableMemberDescriptor
isOverridableOrOverrides'DeclarationDescriptor
containingPackage%ModuleDescriptor
resolveClassByFqNameDeclarationDescriptor
isSealed0ModuleDescriptor
findContinuationClassDescriptor6ModuleDescriptor
findContinuationClassDescriptorOrNull+ModuleDescriptor
getContinuationOfTypeOrAny)DeclarationDescriptor
isTopLevelInPackage5DeclarationDescriptor
getTopLevelContainingClassifier2CallableDescriptor
isSupportedForCallableReference(PackageFragmentProvider
packageFragmentsPackageFragmentProvider
isEmptyBPackageFragmentProvider
collectPackageFragmentsOptimizedIfPossible/ClassDescriptor
getRefinedMemberScopeIfPossible<ClassDescriptor
getRefinedUnsubstitutedMemberScopeIfPossibleMap
getOrDefaultKClass
jvmNameKClassifier
jvmErasureKType
jvmErasureKCallable
isAccessibleFunction
reflectKProperty
javaFieldKFunction
javaConstructorField
kotlinPropertyConstructor
kotlinFunctionKProperty
javaGetterKFunction
javaMethodMethod
kotlinFunctionKMutableProperty
javaSetterMember
getKPackageClass
getOrCreateModuleMethod
signatureAccessor
boundReceiver6PropertyDescriptor
isJvmFieldPropertyInCompanionObject!Accessor
computeCallerForAccessor!ClassDescriptor
readOnlyToMutableArrayValue
arrayToRuntimeValueAny
asKFunctionImplConstantValue
toRuntimeValue"DescriptorVisibility
toKVisibilityClassDescriptor
toJavaClassAny
asKCallableImplKType
isInlineClassTypeAny
asKPropertyImpl List
unwrapRepeatableAnnotationsClass
createArrayType,CallableDescriptor
instanceReceiverParameter)AnnotationDescriptor
toAnnotationInstanceAnnotated
computeAnnotations!Visibility
toDescriptorVisibilityACallableMemberDescriptor
getOverriddenBuiltinWithDifferentJvmName-CallableMemberDescriptor
isFromJavaOrBuiltins5ClassDescriptor
hasRealKotlinSuperClassWithOverrideOf4CallableMemberDescriptor
getOverriddenSpecialBuiltin#CallableMemberDescriptor
isFromJavaDCallableMemberDescriptor
getOverriddenBuiltinReflectingJvmDescriptor@CallableMemberDescriptor
doesOverrideBuiltinWithDifferentJvmName*LazyJavaResolverContext
resolveAnnotations)LazyJavaResolverContext
replaceComponents7LazyJavaResolverContext
computeNewDefaultTypeQualifiers8LazyJavaResolverContext
copyWithNewDefaultTypeQualifiers.LazyJavaResolverContext
childForClassOrPackage&LazyJavaResolverContext
childForMethodLazyJavaResolverContext
childTypeUsage
toAttributesPropertyDescriptor
isJavaFieldArray
findAnnotationArray
getAnnotationsClass
functionClassArityClass
safeClassLoader
Class
desc,Class
isEnumClassOrSpecializedEnumEntryClassClass
wrapperByPrimitiveClass
classIdType
parameterizedTypeArgumentsClass
primitiveByWrapperClassId
toRuntimeFqNameClassLoader
tryLoadClass-ClassDescriptor
getParentJavaStaticClassScope2DescriptorWithContainerSource
isFromJvmPackagePart=DescriptorWithContainerSource
getImplClassNameForDeserialized)KotlinBuiltIns
createDeprecatedAnnotation'AnnotationDescriptor
abbreviationFqName!KotlinType
hasEnhancedNullability&ClassifierDescriptor
enhanceMutability!List
compositeAnnotationsOrSingleClassDescriptor
internalName&CallableDescriptor
computeJvmSignature'FunctionDescriptor
computeJvmDescriptorKotlinType
mapToJvmTypeStringBuilder
appendErasedType>TypeSystemCommonBackendContext
getOptimalModeForValueParameter=TypeSystemCommonBackendContext
getOptimalModeForSignaturePart:TypeSystemCommonBackendContext
getOptimalModeForReturnType6TypeSystemCommonBackendContext
shouldUseUnderlyingType4TypeSystemCommonBackendContext
computeUnderlyingType%SignatureBuildingComponents
signatureCompanion
loadModuleMappingIterable
filterIsInstanceAndToIterable
filterIsInstanceMapToCollection
concat%Iterable
filterIsInstanceMapNotNullToIterable
filterIsInstanceAnd#Iterable
filterIsInstanceMapNotNull"FunctionDescriptor
isValidOperator KotlinType
isFunctionPlaceholderKotlinType
isNullableKotlinType
isErrorKotlinType
replaceTypeArgumentsTypeArgument
toTypeProjectionTypeProjection
toTypeArgumentTypeConstructor
isExpectClass+KotlinType
restoreAdditionalTypeInformation,TypeConstructor
allDependentTypeConstructors!KotlinType
getCustomTypeParameter#KotlinType
getSubtypeRepresentative KotlinType
isCustomTypeParameter%KotlinType
getSupertypeRepresentative*TypeParameterDescriptor
starProjectionType:IntersectionTypeConstructor
makeDefinitelyNotNullOrNotNull"KotlinType
isDefinitelyNotNullTypeSimpleType
withAbbreviation%NewCapturedType
withNotNullProjection,UnwrappedType
makeDefinitelyNotNullOrNotNull3SimpleType
makeSimpleTypeDefinitelyNotNullOrNotNullKotlinType
getAbbreviatedType9KotlinType
makeIntersectionTypeDefinitelyNotNullOrNotNullKotlinType
getAbbreviation#TypeAttributes
toDefaultAnnotations!TypeAttributes
replaceAnnotationsAnnotations
toDefaultAttributesKotlinType
isDynamic/IntersectionTypeConstructor
transformComponentsTypeAttributes
annotations#TypeAttributes
annotationsAttributeKotlinType
replaceKotlinType
asSimpleTypeSimpleType
replace KotlinType
isNullabilityFlexibleKotlinType
isFlexible#Collection
singleBestRepresentativeKotlinType
upperIfFlexibleKotlinType
asFlexibleTypeKotlinType
lowerIfFlexible#KotlinType
wereTypeArgumentsChangedList
enhanceTypeArguments"KotlinType
unwrapEnhancementDeeplyKotlinType
getEnhancementList
wereTypeArgumentsChanged UnwrappedType
inheritEnhancementUnwrappedType
wrapEnhancementKotlinType
getEnhancementDeeplyKotlinType
unwrapEnhancement'KotlinType
getEnhancementDeeplyInternalLookupTracker
record!LookupTracker
recordPackageLookupKotlinType
isBooleanKotlinType
isNullableNothing.KotlinType
replaceArgumentsWithStarProjections5KotlinType
replaceArgumentsWithStarProjectionOrMappedKotlinType
isNullableAnyKotlinType
cannotBeReified'KotlinType
getImmediateSuperclassNotAnyKotlinType
contains5KotlinType
containsTypeProjectionsInTopLevelArgumentsKotlinType
immediateSupertypesKotlinType
isSubtypeOf+SimpleType
replaceArgumentsByParametersWithKotlinType
isEnumKotlinType
asTypeProjectionKotlinType
isLongKotlinType
isTypeParameterKotlinType
isDefaultBoundKotlinType
nullabilityList
defaultProjections&KotlinType
replaceArgumentsWithNothing$KotlinType
containsSelfTypeParameterKotlinType
isByte%KotlinType
isNothingOrNullableNothingAbbreviatedType
unCapture#KotlinTypeChecker
equalTypesOrNulls%KotlinType
isBooleanOrNullableBoolean0TypeParameterDescriptor
representativeUpperBoundKotlinType
isAny KotlinType
isPrimitiveNumberTypeKotlinType
containsError,KotlinType
expandIntersectionTypeIfNecessaryKotlinType
builtInsKotlinType
isShortKotlinType
isAnyOrNullableAny/KotlinType
extractTypeParametersFromUpperBounds%NewCapturedType
unCaptureTopLevelTypeKotlinType
isUnit'KotlinType
isSignedOrUnsignedNumberType+KotlinType
replaceArgumentsByParametersWithKotlinType
isDoubleKotlinType
constituentTypes2SimpleType
replaceArgumentsByExistingArgumentsWithTypeProjection
substitute6KotlinType
upperBoundedByPrimitiveNumberOrNullableTypeKotlinType
isStubTypeSimpleType
unCaptureKotlinType
supertypesKotlinType
isDefNotNullStubTypeCollection
closure)ClassifierDescriptor
isTypeAliasParameterKotlinType
isNothingKotlinType
containsTypeAliasesKotlinType
isNotNullThrowableKotlinType
unCapture(KotlinType
isStubTypeForBuilderInferenceKotlinType
isArrayOfNothing%KotlinType
requiresTypeAliasExpansionKotlinType
isCharFlexibleType
unCapture+KotlinType
isStubTypeForVariableInSubtyping*KotlinType
isPrimitiveNumberOrNullableTypeKotlinType
makeNotNullableKotlinType
replaceAnnotations KotlinType
containsTypeParameter&KotlinType
containsTypeAliasParametersKotlinType
shouldBeUpdatedKotlinType
makeNullableUnwrappedType
unCaptureKotlinType
isIntKotlinType
isFloatKotlinType
isInterfaceKotlinType
isUnsignedNumberType#ProtoEnumFlags
descriptorVisibilityProtoEnumFlags
memberKindAny
transformKotlinToJvmCaller
arityUnwrappedType
replaceArguments+Caller
createInlineClassAwareCallerIfNeeded Any
coerceToExpectedReceiverType/CallableMemberDescriptor
hasInlineClassReceiver-CallableMemberDescriptor
expectedReceiverTypeClass
getUnboxMethod#DeclarationDescriptor
toInlineClassKotlinType
toInlineClassClass
getBoxMethodTypeConstructor
debugInfoKotlinType
approximateKotlinTypeRefiner
refineTypesTypeVariance
convertVarianceAny
errorMessageSimpleType
isClassTypeSimpleType
isIntegerLiteralType2UnwrappedType
hasSupertypeWithGivenTypeConstructor!SimpleType
isSingleClassifierType%UnwrappedType
anySuperTypeConstructorSimpleType
isIntersectionTypeKCallable
valueParametersKCallable
findParameterByNameKCallable
callSuspendKCallable
instanceParameter$KCallable
extensionReceiverParameterKCallable
callSuspendByKClassifier
createTypeKClassifier
starProjectedTypeKProperty2
getExtensionDelegateKProperty1
getExtensionDelegate KAnnotatedElement
findAnnotationKAnnotatedElement
hasAnnotation!KAnnotatedElement
findAnnotationsKType
isSubtypeOfKType
withNullabilityKType
isSupertypeOfKClass
allSupertypesKClass
functionsKClass
companionObjectKClass
superclasses(KClass
declaredMemberExtensionPropertiesKClass
createInstanceKClass
memberFunctionsKClass
staticFunctionsKClass
declaredFunctionsKClass
isSuperclassOfKClass
declaredMemberPropertiesKClass
memberPropertiesKClass
primaryConstructor'KClass
declaredMemberExtensionFunctions KClass
memberExtensionPropertiesKClass
allSuperclassesKClass
memberExtensionFunctionsKClass
defaultTypeKClass
isSubclassOfKCallableImpl
isExtensionKClass
declaredMembersKClass
staticPropertiesKCallableImpl
isNotExtensionKClass
companionObjectInstanceKClass
declaredMemberFunctionsAny
sureArrayList
compactMutableCollection
addIfNotNullIterable
keysToMapExceptNullsIterable
mapToIndexMutableMap
getOrPutNullableIterable
keysToMapSequenceScope
yieldIfNotNull$Throwable
isProcessCanceledExceptionString
isUpperCaseCharAtString
isLowerCaseCharAtString
toLowerCaseAsciiOnlyString
decapitalizeAsciiOnlyString
capitalizeFirstWordString
toUpperCaseAsciiOnlyString
decapitalizeSmartString
capitalizeAsciiOnly#String
decapitalizeSmartForCompilerCollection
foldMapAny
castIterable
firstIsInstanceOrNullIterable
flatMapToNullableArray
ifNotEmptyIterable
lastIsInstanceOrNullString
lastIndexOfOrNullAny
assertedCastAny
applyIfBoolean
ifFalseSet
compactIfPossibleIterable
flattenToMap
compactIfPossibleArray
firstNotNullResultIterable
sameSequence
firstIsInstanceOrNullMutableList
trimToSize	Pair
swapArray
firstIsInstanceMutableList
popLastSequence
firstIsInstanceIterable
firstIsInstanceString
indexOfOrNullCollection
ifNotEmpty$Iterable
filterIsInstanceWithCheckerBoolean
ifTrueIterable
sumByLongList
flatGroupBy
Any
safeAsArray
firstIsInstanceOrNullIterable
firstNotNullResult)ModuleDescriptor
getResolutionAnchorIfAny%KotlinType
substitutedUnderlyingTypes,KotlinType
isRecursiveInlineOrValueClassType$KotlinType
substitutedUnderlyingType,DeclarationDescriptor
isMultiFieldValueClass<CallableDescriptor
isGetterOfUnderlyingPropertyOfInlineClass"DeclarationDescriptor
isValueClass4VariableDescriptor
isUnderlyingPropertyOfInlineClass1KotlinType
isRecursiveInlineOrValueClassTypeInner#DeclarationDescriptor
isInlineClass#KotlinType
isNullableUnderlyingType'KotlinType
unsubstitutedUnderlyingTypesKotlinType
isInlineClassType&KotlinType
unsubstitutedUnderlyingTypeKotlinType
hasExactAnnotation+Annotations
hasInternalAnnotationForResolve0CallableDescriptor
hasDynamicExtensionAnnotation5CallableDescriptor
hasLowPriorityInOverloadResolution,CallableDescriptor
hasHidesMembersAnnotation%FqName
isInternalAnnotationForResolve&AnnotationDescriptor
isExactAnnotationKotlinType
hasNoInferAnnotation3TypeParameterDescriptor
hasOnlyInputTypesAnnotation0CallableDescriptor
hasBuilderInferenceAnnotation3Collection
selectMostSpecificInEachOverridableGroup;CallableDescriptor
findOriginalTopMostOverriddenDescriptors3CallableDescriptor
findTopMostOverriddenDescriptors#ClassDescriptor
getSuperClassNotAnyClassifierDescriptor
classId%DeclarationDescriptor
parentsWithSelf+ClassifierDescriptor
getAllSuperClassifiersClassDescriptor
isSubclassOf1CallableDescriptor
overriddenTreeUniqueAsSequence)DeclarationDescriptor
isExtensionProperty7DeclarationDescriptor
isPrimaryConstructorOfInlineClass&MemberDescriptor
isEffectivelyExternalDeclarationDescriptor
builtIns,CallableMemberDescriptor
setSingleOverridden"ClassDescriptor
getSuperClassOrAnyDeclarationDescriptor
parents?ClassifierDescriptorWithTypeParameters
classValueTypeDescriptor*DeclarationDescriptor
isInsidePrivateClass-DeclarationDescriptor
isAnnotationConstructorDeclarationDescriptor
platform+AnnotationDescriptor
getAnnotationRetention#Iterable
filterOutSourceAnnotations'AnnotationDescriptor
isSourceAnnotation-ClassDescriptor
getClassObjectReferenceTarget"ClassDescriptor
getSuperInterfaces@CallableDescriptor
getOwnerForEffectiveDispatchReceiverParameter'DeclarationDescriptor
isCompanionObject Annotated
getAnnotationRetention$AnnotationDescriptor
annotationClass Annotated
isDocumentedAnnotation2ClassDescriptor
multiFieldValueClassRepresentation$VariableDescriptor
isUnderscoreNamed"DeclarationDescriptor
fqNameOrNull!DeclarationDescriptor
isExtension.ClassifierDescriptorWithTypeParameters
classId4ClassDescriptor
getAllSuperClassesTypesIncludeItself=ClassifierDescriptorWithTypeParameters
denotedClassDescriptorDeclarationDescriptor
module%ModuleDescriptor
getKotlinTypeRefiner&FunctionDescriptor
isEnumValueOfMethod:DeclarationDescriptorWithVisibility
isEffectivelyPublicApiClassDescriptor
classValueType"DeclarationDescriptor
fqNameUnsafe1CallableMemberDescriptor
overriddenTreeAsSequence'ClassDescriptor
classesFromInnerToOuter7ValueParameterDescriptor
declaresOrInheritsDefaultValue$ClassDescriptor
classValueDescriptor"DeclarationDescriptor
isAncestorOf-DeclarationDescriptor
getImportableDescriptor*CallableDescriptor
varargParameterPosition)ClassDescriptor
inlineClassRepresentation2CallableDescriptor
shouldBeSubstituteWithStubTypes(ModuleDescriptor
isTypeRefinementEnabled$DeclarationDescriptor
isPublishedApi9ClassifierDescriptorWithTypeParameters
hasCompanionObject;DeclarationDescriptorWithVisibility
isEffectivelyPrivateApi%ClassDescriptor
secondaryConstructors,ClassDescriptor
getAllSuperclassesWithoutAny'DeclarationDescriptor
isInsideInterface(CallableMemberDescriptor
firstOverridden'ClassDescriptor
hasClassValueDescriptor DeclarationDescriptor
fqNameSafe+CallableMemberDescriptor
propertyIfAccessor%ModuleDescriptor
resolveTopLevelClass)Annotated
isAnnotatedWithKotlinRepeatable"AnnotationDescriptor
firstArgument$CallableDescriptor
containsStubTypesAnnotated
nonSourceAnnotations7DeclarationDescriptor
isInlineClassThatRequiresMangling7KotlinType
requiresFunctionNameManglingInParameterTypes<KotlinType
isTypeParameterWithUpperBoundThatRequiresMangling,KotlinType
isInlineClassThatRequiresMangling7SamConversionResolver
getFunctionTypeForPossibleSamType.TypeSubstitution
wrapWithCapturingSubstitutionKotlinType
isCaptured%TypeProjection
createCapturedIfNeededMemberScope
findFirstFunctionMemberScope
computeAllNames%Iterable
flatMapClassifierNamesOrNull"MemberScope
getDescriptorsFiltered3SyntheticScopes
collectSyntheticExtensionProperties,SyntheticScopes
collectSyntheticConstructors/SyntheticScopes
collectSyntheticMemberFunctions/SyntheticScopes
collectSyntheticStaticFunctionsModuleDescriptor
unsignedType(ModuleDescriptor
allUnsignedLiteralTypesKotlinType
minValueModuleDescriptor
uLongTypeModuleDescriptor
uShortType&ModuleDescriptor
allSignedLiteralTypesModuleDescriptor
uIntTypeKotlinType
maxValueModuleDescriptor
uByteTypeShort
fromUShortToLongInt
fromUIntToLongByte
fromUByteToLongNullableLazyValue
getValueNotNullLazyValue
getValueSimpleLock
guarded7CompanionObjectMapping
isMappedIntrinsicCompanionObject>CompanionObjectMapping
isMappedIntrinsicCompanionObjectClassId,DeclarationDescriptor
getFunctionalClassKind+Annotations
withExtensionFunctionAnnotationKotlinType
isKFunctionType1KotlinType
getValueParameterTypesFromFunctionType%KotlinType
isNonExtensionFunctionType2Annotations
withContextReceiversFunctionAnnotation KotlinType
isSuspendFunctionType*Annotations
hasExtensionFunctionAnnotation*KotlinType
getReceiverTypeFromFunctionType5KotlinType
getPureArgumentsForFunctionalTypeOrSubtype+KotlinType
isBuiltinFunctionalTypeOrSubtypeKotlinType
isTypeOrSubtypeOf)KotlinType
isSuspendFunctionTypeOrSubtype9KotlinType
isFunctionOrKFunctionTypeWithAnySuspendability+KotlinType
isBuiltinExtensionFunctionalType"KotlinType
isExtensionFunctionType3KotlinType
isTypeAnnotatedWithExtensionFunctionType.KotlinType
extractFunctionalTypeFromSupertypes*KotlinType
isFunctionOrSuspendFunctionType7KotlinType
extractParameterNameFromFunctionTypeArgument"KotlinType
isFunctionTypeOrSubtype"KotlinType
isBuiltinFunctionalType!KotlinType
isKSuspendFunctionType(KotlinType
getReturnTypeFromFunctionType)KotlinType
contextFunctionTypeParamsCount;KotlinType
getValueParameterTypesFromCallableReflectionType.Annotations
withoutExtensionFunctionAnnotation#FqNameUnsafe
getFunctionalClassKindKotlinType
replaceReturnTypeKotlinType
isFunctionType8DeclarationDescriptor
isBuiltinFunctionalClassDescriptor2KotlinType
getContextReceiverTypesFromFunctionTypeURL
readBytesReader
copyToReader
useLinesURL
readTextReader
bufferedReader
forEachLineReader
readTextBufferedReader
lineSequenceWriter
bufferedString
readerReader
readLinesFile
appendBytesFile
readLinesFile
bufferedWriterFile
appendTextFile
outputStreamFile
bufferedReaderFile
readTextFile
writeBytesFile
inputStreamFile
readerFile
forEachLineFile
readBytesFile
printWriterFile
writerFile
useLinesFile
writeTextFile
forEachBlockByteArray
inputStreamInputStream
bufferedReaderOutputStream
writerOutputStream
bufferedString
byteInputStreamInputStream
readBytesBufferedInputStream
iteratorInputStream
readerInputStream
bufferedOutputStream
bufferedWriterCloseable
closeFinallyCloseable
useFile
subPathFile
rootNameFile
isRootedFile
toComponentsString
getRootLength	File
root	File
walkFile
walkBottomUpFile
walkTopDownByteArray
toStringArray
contentDeepHashCodeImplEnumeration
iteratorFile
copyToFile
toRelativeStringFile
relativeToOrSelfList
normalizeFile
invariantSeparatorsPathFile
toRelativeStringOrNullFilePathComponents
normalizeFile
resolveSiblingFile
endsWithFile
startsWithFile
relativeToOrNullFile
deleteRecursivelyFile
nameWithoutExtensionFile
relativeToFile
resolveFile
normalizeFile
copyRecursivelyFile
extensionEnumeration
toListConcurrentMap
getOrPutMap
toPropertiesMap
toSortedMapEnumeration
asSequenceMutableMap
mapValuesInPlaceArray
resetAtArray
subarrayContentEqualsArray
subarrayContentHashCodeArray
resetRangeArray
subarrayContentToString!Array
copyOfUninitializedElementsAny
javaClassKClass
javaKClass
javaObjectTypeKClass
javaClassKClass
javaPrimitiveTypeClass
kotlinAnnotation
annotationClassArray
isArrayOfEnum
declaringJavaClassIterable
toSortedSetCharSequence
toSortedSetSequence
toSortedSetULongArray
binarySearchUIntArray
binarySearchUByteArray
binarySearchUShortArray
binarySearchString
toBigDecimalString
toBigIntegerOrNullString
toBigIntegerString
toBigDecimalOrNullAppendable
appendlnStringBuilder
appendlnChar
isJavaIdentifierStartChar
isJavaIdentifierPartChar
directionalityChar
toTitleCaseChar
isIdentifierIgnorablePattern
toRegexAutoCloseable
closeFinallyAutoCloseable
useDoubleArray
copyOfRangeImplArray
copyOfRangeImplByteArray
binarySearchCharArray
binarySearchByteArray
toSortedSetByteArray
copyOfRangeImplFloatArray
binarySearchFloatArray
copyOfRangeImplShortArray
binarySearchLongArray
binarySearchCharArray
toSortedSetBooleanArray
toSortedSetIntArray
toSortedSetArray
toSortedSetArray
binarySearchShortArray
copyOfRangeImplIntArray
binarySearchIntArray
copyOfRangeImplLongArray
toSortedSetShortArray
toSortedSetDoubleArray
binarySearchBooleanArray
copyOfRangeImplCharArray
copyOfRangeImplLongArray
copyOfRangeImplFloatArray
toSortedSetDoubleArray
toSortedSetIterable
toIntMatcher
findNextMatcher
matchEntireMatchResult
rangePath
appendLinesPath
inputStreamPath
forEachLinePath
bufferedReaderPath
writeBytesPath
appendTextPath
bufferedWriterPath
writeTextPath
writeLinesPath
readerPath
readLinesPath
readBytesPath
outputStreamPath
appendBytesPath
useLinesPath
writerPath
readTextTimeUnit
toDurationUnitDurationUnit
toTimeUnitString
toByteArrayString
codePointAtString
toPatternString
internString
codePointBeforeString
formatCompanion
formatString
regionMatchesString
offsetByCodePointsString
contentEqualsString
codePointCountBigDecimal
timesBigDecimal
divBigDecimal
unaryMinusBigDecimal
minusInt
toBigDecimalBigDecimal
plusLong
toBigDecimalBigDecimal
remDouble
toBigDecimalBigDecimal
decBigDecimal
incFloat
toBigDecimal"Path
invariantSeparatorsPathStringPath
setOwner
URI
toPathPath
setPosixFilePermissionsPath
isHidden!Path
createSymbolicLinkPointingToPath
deleteExistingPath
createDirectoriesPath
relativeToPath
notExistsPath
pathStringPath
setLastModifiedTimePath
relativeToOrSelfPath
copyToPath
setAttributePath
readAttributesPath
relativeToOrNullPath
isSameFileAsPath
absolutePath
absolutePathStringPath
isDirectoryPath
readSymbolicLinkPath
getAttributePath
existsPath
isRegularFilePath
createLinkPointingToPath
moveToPath
isSymbolicLinkPath
isReadablePath
fileSizePath
divPath
fileStorePath
forEachDirectoryEntryPath
listDirectoryEntriesPath
createDirectoryPath
deleteIfExistsPath
fileAttributesViewPath
createFilePath
getLastModifiedTime	Path
namePath
nameWithoutExtensionPath
extensionPath
getOwnerPath
fileAttributesViewOrNullPath
getPosixFilePermissionsPath
useDirectoryEntriesPath
isExecutablePath
invariantSeparatorsPathPath
isWritableThrowable
stackTraceBigInteger
incBigInteger
divBigInteger
timesBigInteger
toBigDecimalBigInteger
shlBigInteger
remInt
toBigIntegerBigInteger
unaryMinusBigInteger
shrBigInteger
andBigInteger
invBigInteger
plusBigInteger
minusBigInteger
xorLong
toBigIntegerBigInteger
decBigInteger
orRandom
asKotlinRandomRandom
asJavaRandomFloat
IEEEremDouble
IEEEremFloat
nextUpFloat
nextDownFloat
nextTowards	Float
ulpKType
computeJavaTypeKTypeProjection
javaTypeThreadLocal
getOrSetLock
withLockReentrantReadWriteLock
readReentrantReadWriteLock
writeTimer
scheduleAtFixedRateTimer
schedule-BaseContinuationImpl
getStackTraceElementImpl/BaseContinuationImpl
getDebugMetadataAnnotation3BaseContinuationImpl
getSpilledVariableFieldMappingBaseContinuationImpl
getLabelDependencyHandler
runtimeOnly'DependencyConstraintHandler
runtimeOnlyArtifactHandler
runtimeOnly%OrgGradlePluginGroup
native-component"OrgGradlePluginGroup
maven-publishOrgGradlePluginGroup
base4OrgGradlePluginGroup
validate-external-gradle-plugin OrgGradlePluginGroup
eclipse-wtpOrgGradlePluginGroup
scala OrgGradlePluginGroup
objective-cOrgGradlePluginGroup
scala-baseOrgGradlePluginGroup
antlr#OrgGradlePluginGroup
reporting-base"OrgGradlePluginGroup
swift-library"OrgGradlePluginGroup
java-platform$OrgGradlePluginGroup
version-catalog#OrgGradlePluginGroup
clang-compilerOrgGradlePluginGroup
checkstyle OrgGradlePluginGroup
binary-base)OrgGradlePluginGroup
groovy-gradle-plugin!OrgGradlePluginGroup
distribution.OrgGradlePluginGroup
java-library-distribution%OrgGradlePluginGroup
objective-c-langOrgGradlePluginGroup
jacoco+OrgGradlePluginGroup
native-component-modelOrgGradlePluginGroup
xctestOrgGradlePluginGroup
earOrgGradlePluginGroup
war#OrgGradlePluginGroup
jdk-toolchainsOrgGradlePluginGroup
wrapper)OrgGradlePluginGroup
component-model-base"OrgGradlePluginGroup
jvm-ecosystemOrgGradlePluginGroup
signing+OrgGradlePluginGroup
google-test-test-suite'OrgGradlePluginGroup
java-gradle-pluginOrgGradlePluginGroup
pmdOrgGradlePluginGroup
cunit OrgGradlePluginGroup
groovy-base OrgGradlePluginGroup
ivy-publish&OrgGradlePluginGroup
swift-applicationOrgGradlePluginGroup
groovyOrgGradlePluginGroup
java-base$OrgGradlePluginGroup
build-dashboard.OrgGradlePluginGroup
jacoco-report-aggregation#OrgGradlePluginGroup
component-base"OrgGradlePluginGroup
cpp-unit-test,OrgGradlePluginGroup
windows-resource-scriptOrgGradlePluginGroup
eclipse OrgGradlePluginGroup
cpp-library#OrgGradlePluginGroup
assembler-lang'OrgGradlePluginGroup
java-test-fixtures"OrgGradlePluginGroup
visual-studioOrgGradlePluginGroup
codenarcOrgGradlePluginGroup
assemblerOrgGradlePluginGroup
c&OrgGradlePluginGroup
windows-resourcesPluginDependenciesSpec
org$OrgGradlePluginGroup
cpp-applicationOrgPluginGroup
gradle#OrgGradlePluginGroup
jvm-toolchains#OrgGradlePluginGroup
jvm-test-suiteOrgGradlePluginGroup
cpp-lang%OrgGradlePluginGroup
cunit-test-suiteOrgGradlePluginGroup
javaOrgGradlePluginGroup
help-tasks"OrgGradlePluginGroup
language-baseOrgGradlePluginGroup
publishing,OrgGradlePluginGroup
test-report-aggregationOrgGradlePluginGroup
xcode"OrgGradlePluginGroup
objective-cpp$OrgGradlePluginGroup
test-suite-base OrgGradlePluginGroup
application2OrgGradlePluginGroup
microsoft-visual-cpp-compiler#OrgGradlePluginGroup
swiftpm-exportOrgGradlePluginGroup
c-lang#OrgGradlePluginGroup
lifecycle-base!OrgGradlePluginGroup
gcc-compiler OrgGradlePluginGroup
google-testOrgGradlePluginGroup
build-init-OrgGradlePluginGroup
jvm-toolchain-management$OrgGradlePluginGroup
project-reports!OrgGradlePluginGroup
java-library'OrgGradlePluginGroup
objective-cpp-lang#OrgGradlePluginGroup
project-report)OrgGradlePluginGroup
standard-tool-chainsOrgGradlePluginGroup
cppOrgGradlePluginGroup
ideaProject
testingArtifactHandler
implementation DependencyHandler
implementation*DependencyConstraintHandler
implementationTaskContainer
buildNeededDependencyHandler
apiElementsArtifactHandler
apiElements'DependencyConstraintHandler
apiElementsTaskContainer
javadoc5NamedDomainObjectContainer
testResultsElementsForTestDependencyHandler
extTaskContainer
checkTaskContainer
jarSourceSet
ext.DependencyConstraintHandler
testImplementation"ArtifactHandler
testImplementation$DependencyHandler
testImplementation!DependencyHandler
runtimeElementsArtifactHandler
runtimeElements+DependencyConstraintHandler
runtimeElements)NamedDomainObjectContainer
implementationTaskContainer
assembleArtifactHandler
testRuntimeOnly+DependencyConstraintHandler
testRuntimeOnly!DependencyHandler
testRuntimeOnly#DependencyConstraintHandler
defaultArtifactHandler
defaultDependencyHandler
defaultProject
sourceSets&NamedDomainObjectContainer
runtimeOnly&NamedDomainObjectContainer
compileOnly-NamedDomainObjectContainer
mainSourceElementsSourceSetContainer
main-NamedDomainObjectContainer
testImplementationSourceSetContainer
testTaskContainer
compileJavaTaskContainer
testArtifactHandler
testCompileOnly+DependencyConstraintHandler
testCompileOnly!DependencyHandler
testCompileOnly/NamedDomainObjectContainer
testRuntimeClasspath"NamedDomainObjectContainer
defaultJavaPluginExtension
extTaskContainer
testClassesBasePluginExtension
ext3DependencyConstraintHandler
testAnnotationProcessor'ArtifactHandler
testAnnotationProcessor)DependencyHandler
testAnnotationProcessorProject
java"TaskContainer
processTestResourcesReportingExtension
ext&NamedDomainObjectContainer
apiElements*NamedDomainObjectContainer
testRuntimeOnly#ArtifactHandler
annotationProcessor/DependencyConstraintHandler
annotationProcessor%DependencyHandler
annotationProcessorTaskContainer
processResources*ArtifactHandler
testResultsElementsForTest6DependencyConstraintHandler
testResultsElementsForTest,DependencyHandler
testResultsElementsForTest"DependencyHandler
runtimeClasspath ArtifactHandler
runtimeClasspath,DependencyConstraintHandler
runtimeClasspathProject
javaToolchainsTaskContainer
classes*NamedDomainObjectContainer
testCompileOnlyProject
extTestingExtension
ext$ArtifactHandler
testRuntimeClasspath0DependencyConstraintHandler
testRuntimeClasspath&DependencyHandler
testRuntimeClasspathRepositoryHandler
ext$DependencyConstraintHandler
archivesArtifactHandler
archivesDependencyHandler
archives/NamedDomainObjectContainer
testCompileClasspathTaskContainer
compileTestJavaJavaToolchainService
ext!DefaultArtifactPublicationSet
ext+NamedDomainObjectContainer
runtimeClasspathTaskContainer
build#NamedDomainObjectContainer
archivesProject
defaultArtifacts.DependencyConstraintHandler
mainSourceElements"ArtifactHandler
mainSourceElements$DependencyHandler
mainSourceElementsProject
reporting*NamedDomainObjectContainer
runtimeElementsSourceSetContainer
ext.NamedDomainObjectContainer
annotationProcessor+NamedDomainObjectContainer
compileClasspath"DependencyHandler
compileClasspath,DependencyConstraintHandler
compileClasspath ArtifactHandler
compileClasspathTaskContainer
buildDependentsDependencyHandler
compileOnlyArtifactHandler
compileOnly'DependencyConstraintHandler
compileOnly$ArtifactHandler
testCompileClasspath&DependencyHandler
testCompileClasspath0DependencyConstraintHandler
testCompileClasspathTaskContainer
cleanProject
base2NamedDomainObjectContainer
testAnnotationProcessor'MutableIsolateContext
withPropertyTraceBuildController
findModel1BuildController
getCanQueryProjectModelInParallelBuildController
getModelCopySpec
expandManifest
attributesDomainObjectSet
withType%BinaryCollection
whenElementFinalizedBinaryCollection
getBinaryCollection
configureEach!BinaryCollection
whenElementKnownGroovyCompileOptions
forkWorkerExecutor
submitRepositoryHandler
mavenCentralRepositoryHandler
flatDir6PluginDependenciesSpec
validate-external-gradle-plugin-PluginDependenciesSpec
google-test-test-suite#PluginDependenciesSpec
java-library%PluginDependenciesSpec
lifecycle-base$PluginDependenciesSpec
language-base"PluginDependenciesSpec
application!PluginDependenciesSpec
checkstyle"PluginDependenciesSpec
eclipse-wtp$PluginDependenciesSpec
visual-studio)PluginDependenciesSpec
objective-cpp-langPluginDependenciesSpec
pmd/PluginDependenciesSpec
jvm-toolchain-managementPluginDependenciesSpec
scala4PluginDependenciesSpec
microsoft-visual-cpp-compilerPluginDependenciesSpec
c$PluginDependenciesSpec
objective-cpp-PluginDependenciesSpec
native-component-model(PluginDependenciesSpec
swift-application%PluginDependenciesSpec
clang-compiler&PluginDependenciesSpec
project-reports%PluginDependenciesSpec
jvm-toolchains"PluginDependenciesSpec
ivy-publishPluginDependenciesSpec
antlr!PluginDependenciesSpec
help-tasksPluginDependenciesSpec
java%PluginDependenciesSpec
jdk-toolchains&PluginDependenciesSpec
version-catalogPluginDependenciesSpec
idea(PluginDependenciesSpec
windows-resourcesPluginDependenciesSpec
c-lang'PluginDependenciesSpec
native-componentPluginDependenciesSpec
codenarc$PluginDependenciesSpec
jvm-ecosystem$PluginDependenciesSpec
cpp-unit-testPluginDependenciesSpec
eclipsePluginDependenciesSpec
cpp-lang PluginDependenciesSpec
assembler'PluginDependenciesSpec
objective-c-lang"PluginDependenciesSpec
cpp-libraryPluginDependenciesSpec
groovy0PluginDependenciesSpec
java-library-distribution+PluginDependenciesSpec
standard-tool-chainsPluginDependenciesSpec
war.PluginDependenciesSpec
test-report-aggregation"PluginDependenciesSpec
google-testPluginDependenciesSpec
cpp&PluginDependenciesSpec
cpp-applicationPluginDependenciesSpec
ear&PluginDependenciesSpec
test-suite-base$PluginDependenciesSpec
swift-library#PluginDependenciesSpec
gcc-compiler$PluginDependenciesSpec
maven-publishPluginDependenciesSpec
jacoco.PluginDependenciesSpec
windows-resource-script%PluginDependenciesSpec
jvm-test-suite!PluginDependenciesSpec
build-init)PluginDependenciesSpec
java-test-fixtures%PluginDependenciesSpec
reporting-basePluginDependenciesSpec
cunit'PluginDependenciesSpec
cunit-test-suite"PluginDependenciesSpec
objective-cPluginDependenciesSpec
base%PluginDependenciesSpec
assembler-langPluginDependenciesSpec
xcode)PluginDependenciesSpec
java-gradle-plugin&PluginDependenciesSpec
build-dashboard+PluginDependenciesSpec
component-model-basePluginDependenciesSpec
wrapperPluginDependenciesSpec
xctestPluginDependenciesSpec
signing+PluginDependenciesSpec
groovy-gradle-plugin%PluginDependenciesSpec
swiftpm-export"PluginDependenciesSpec
groovy-base!PluginDependenciesSpec
scala-base!PluginDependenciesSpec
publishing$PluginDependenciesSpec
java-platform PluginDependenciesSpec
java-base%PluginDependenciesSpec
component-base#PluginDependenciesSpec
distribution0PluginDependenciesSpec
jacoco-report-aggregation"PluginDependenciesSpec
binary-base%PluginDependenciesSpec
project-reportProject
fileTreeCompatibilityRuleChain
add"VariantTransform
artifactTransformObjectConfigurationAction
typeScript
fileTreeScript
applyCheckstyle
setConfigProperties#DependencyHandler
registerTransformTaskInputs
propertiesAbstractExecTask
environmentContentFilterable
expandTypeBuilder
internalView!TypeBuilder
defaultImplementationNamedDomainObjectSet
withTypeProjectConnection
modelProjectConnection
getModelProviderFactory
credentialsProviderFactory
of&JavaToolchainResolverRegistry
register:ExtensiblePolymorphicDomainObjectContainer
registerBindingBinaryTasksCollection
create#AuthenticationSupported
credentials&AuthenticationSupported
getCredentialsAbstractCopyTask
filterAbstractCopyTask
expandJavaExec
environmentJavaExec
systemPropertiesProcessForkOptions
environment!ProcessForkOptions
setEnvironmentSourceSetOutput
dir'CheckstyleExtension
setConfigProperties%ArtifactResolutionQuery
withArtifacts JavaForkOptions
systemProperties%ComponentArtifactsResult
getArtifactsModelMap
namedModelMap
createModelMap
afterEachModelMap
beforeEachModelMap
withTypeWriteProperties
setPropertiesWriteProperties
properties2PolymorphicDomainObjectContainer
containerWithType+TaskInputFilePropertyBuilder
withNormalizerTaskContainer
replaceEclipseWtpFacet
facet.ObjectFactory
polymorphicDomainObjectContainer#ObjectFactory
domainObjectContainer#ObjectFactory
namedDomainObjectList"ObjectFactory
namedDomainObjectSetObjectFactory
domainObjectSetPluginManager
applyAbstractOptions
define&ComponentMetadataContext
getDescriptorCompileOptions
debugCompileOptions
forkWorkQueue
submit)MetadataSupplierAware
setMetadataSupplier0MetadataSupplierAware
setComponentVersionsListerDisambiguationRuleChain
addPluginContainer
applyPluginContainer
hasPluginPluginContainer
getAtPluginContainer
getPluginPluginContainer
findPlugin ComponentSelection
getDescriptorPluginCollection
withTypeTest
systemPropertiesTest
environment%BuildServiceRegistry
registerIfAbsentNamedDomainObjectList
withTypeClassVisitor
publicStaticMethod,PolymorphicDomainObjectContainer
maybeCreate'PolymorphicDomainObjectContainer
create)PolymorphicDomainObjectContainer
registerDependencyHandler
project#ComponentMetadataHandler
withModuleComponentMetadataHandler
allBuildCacheConfiguration
remote1BuildCacheConfiguration
registerBuildCacheServiceDomainObjectCollection
withTypeContentFilterable
filter$NamedDomainObjectCollection
withType!NamedDomainObjectCollection
namedCopySpec
filter ObjectConfigurationAction
pluginTaskCollection
withTypeProject
containerProject
taskObjectFactory
propertyObjectFactory
newInstanceObjectFactory
mapPropertyObjectFactory
setPropertyObjectFactory
namedObjectFactory
listProperty DependencyHandler
embeddedKotlinPluginDependenciesSpec
kotlin<PluginDependenciesSpec
kotlin-dsl-precompiled-script-plugins!PluginDependenciesSpec
kotlin-dsl&PluginDependenciesSpec
embedded-kotlin&PluginDependenciesSpec
kotlin-dsl-baseDependencyHandler
kotlinPluginAware
applyVcsMapping
fromExtensionContainer
findByTypeExtensionContainer
createExtensionContainer
configureExtensionContainer
addExtensionContainer
getByType4ExistingDomainObjectDelegateProvider
provideDelegateEExistingDomainObjectDelegateProviderWithTypeAndAction
provideDelegate7RegisteringDomainObjectDelegateProvider
provideDelegate>ExistingDomainObjectDelegateProviderWithAction
provideDelegate?RegisteringDomainObjectDelegateProviderWithType
provideDelegateARegisteringDomainObjectDelegateProviderWithAction
provideDelegateTaskContainer
createTaskContainer
registerHRegisteringDomainObjectDelegateProviderWithTypeAndAction
provideDelegate<ExistingDomainObjectDelegateProviderWithType
provideDelegateTaskCollection
namedMap
getValueString
substringAny
ifBlankAny
containsAny
ifEmptyExecutableStream
convertExecutableCollection
convert*CompilerConfiguration
configureModuleChunk8CompilerConfiguration
configureContentRootsFromClassPath&CompilerConfiguration
configureJdkHome+CompilerConfiguration
configureStandardLibs(CompilerConfiguration
configureKlibPaths1CompilerConfiguration
configureAdvancedJvmOptions+KotlinCoreEnvironment
registerJavacIfNeeded;CompilerConfiguration
handleClosureGenerationSchemeArgument#CompilerConfiguration
isModularJava-CompilerConfiguration
addModularRootIfNotNull6CompilerConfiguration
configureJavaModulesContentRoots&CompilerConfiguration
messageCollector/CompilerConfiguration
setupJvmSpecificArguments%CompilerConfiguration
jvmModularRoots(CompilerConfiguration
addJavaSourceRoots'CompilerConfiguration
addJavaSourceRoot0CompilerConfiguration
configureJdkClasspathRoots'CompilerConfiguration
jvmClasspathRoots$CompilerConfiguration
addJvmSdkRoots)CompilerConfiguration
addJvmClasspathRoot%CompilerConfiguration
javaSourceRoots*CompilerConfiguration
addJvmClasspathRoots+CompilerConfiguration
applyModulePropertiesList
forAllFilesCompilerConfiguration
report&KotlinCoreEnvironment
messageCollector%MainFunctionDetector
findMainFunction*CompilerConfiguration
configureSourceRootsBuilder
withModuleModule
getSourceFilesModuleBuilder
configureFromArgs2KotlinCoreEnvironment
toAbstractProjectEnvironment2GlobalSearchScope
toAbstractProjectFileSearchScope/AbstractProjectFileSearchScope
asPsiSearchScope!Project
setupHighestLanguageLevelString
toSafeFqNameString
toSafeTopLevelClassId$MappedByteBuffer
contentsToByteArrayByteBuffer
getUnsignedShort&MappedByteBuffer
parseCentralDirectory"VirtualFileSystem
findExistingRootVirtualFileSystem
findJarRootMessageCollector
toLogger,MessageCollector
reportArgumentParseProblems3MessageCollector
reportUnsafeInternalArgumentsIfAny2CompilerConfiguration
setupLanguageVersionSettings*CompilerConfiguration
setupCommonArguments1BaseDiagnosticsCollector
reportToMessageCollector*CompilerConfiguration
addKotlinSourceRoots)CompilerConfiguration
addKotlinSourceRoot'CompilerConfiguration
kotlinSourceRootsOutputFileCollection
writeAllToOutputFileCollection
writeAllKotlinCoreEnvironment
destDirSet
toPersistentHashSetPersistentCollection
plusIterable
toImmutableSetPersistentSet
plusPersistentMap
putAllPersistentList
plusPersistentSet
mutateIterable
toPersistentSetMap
toPersistentMapPersistentMap
mutatePersistentList
mutateMap
toImmutableMapCharSequence
toPersistentSetMap
toPersistentHashMapPersistentList
minusIterable
toPersistentListPersistentCollection
minusCharSequence
toPersistentListIterable
toImmutableListCharSequence
toImmutableListPersistentMap
plusPersistentSet
minusPersistentMap
minusArray
insertEntryAtIndexArray
replaceEntryWithNodeArray
replaceNodeWithEntryArray
removeEntryAtIndexThreadLocal
asContextElementThreadLocal
ensurePresentThreadLocal
isPresentCollection
joinAllCollection
awaitAllResult
toStateCoroutineScope
ensureActiveCoroutineScope
plusCoroutineScope
cancelCoroutineScope
isActiveCompletionHandler
isHandlerOfDispatchedTask
resumeUnconfined%DispatchedTask
runUnconfinedEventLoopInt
isReusableModeDispatchedTask
dispatchDispatchedTask
resumeInt
isCancellableMode!Continuation
resumeWithStackTrace%ExecutorService
asCoroutineDispatcherExecutor
asCoroutineDispatcherCoroutineDispatcher
asExecutor,CancellableContinuation
removeOnCancellation-CancellableContinuation
disposeOnCancellation)Continuation
updateUndispatchedCompletionCoroutineContext
coroutineName"CoroutineScope
newCoroutineContext*CoroutineStackFrame
undispatchedCompletionCoroutineScope
asyncCoroutineScope
launchCoroutineDispatcher
invokeAny
hexAddressAny
classSimpleNameContinuation
toDebugStringAny
unboxStateAny
boxIncompleteCoroutineContext
delayDuration
toDelayMillisSchedulerTaskContext
afterTaskSchedulerTask
taskContext Throwable
addSuppressedThrowableJob
disposeOnCompletionJob
cancelChildrenCoroutineContext
ensureActive
Job
cancel2CancellableContinuation
cancelFutureOnCancellationCoroutineContext
isActiveCoroutineContext
cancelThrowable
orCancellationJob
cancelFutureOnCompletionJob
cancelAndJoinJob
ensureActiveCoroutineContext
jobCoroutineContext
cancelChildren CompletableDeferred
completeWithCancelHandlerBase
asHandlerCompletionHandler
invokeItCompletionHandlerBase
asHandlerStateFlow
fuseStateFlowMutableStateFlow
incrementMutableStateFlow
asStateFlowLongArray
asFlowFlow
forEachFlow
flatMapMergeFlowCollector
invokeSafelyFlow
flatMapFlow
transformLatestFlow
sampleFlow
mapFlow
broadcastInFlow
stateInFlow
transformWhileFlowCollector
emitAllFlow
filterNotNullFlow
catchImpl	Flow
scanFlow
subscribeFlow
toCollectionFlow
filterFlow
delayFlowFlow
onCompletionIterator
asFlowFlow
composeFlow
collectFlow
onEmptyArray
asFlowFlow
flattenConcatFlow
concatWithFlow
flattenFlow
filterNotFlow
flowWithFlow
retryWhenThrowable
isSameExceptionAsLongRange
asFlowFlow
takeWhileSequence
asFlowFlow
distinctUntilChangedBy	Flow
lastFlow
delayEachFlow
singleFlow
flattenMergeFlow
toListFlow
dropWhileFlow
onStartIntArray
asFlowFlow
observeOnIntRange
asFlowFlow
concatMap
Flow
catch
Flow
cacheFlow
mapNotNullFlow
runningFoldBroadcastChannel
asFlowFlow
filterIsInstance	Flow
takeCoroutineScope
launchSharingReceiveChannel
consumeAsFlowReceiveChannel
receiveAsFlowFlowCollector
emitAbortFlow
replayFlow
runningReduce$CoroutineScope
launchSharingDeferredFlow
transformFlow
onEachFlow
configureSharingFlow
mapLatestFlow
shareInFlow
bufferFlow
debounceInternalIterable
mergeIterable
asFlowFlow
cancellableFlow
firstOrNullFlow
combineFlowCollector
ensureActive CoroutineScope
fixedPeriodTickerFlow
conflateFlow
startWith
Flow
retryFlow
debounceFlow
withIndexFlow
onErrorResumeNextFlow
flowOnFlow
collectLatestFlow
singleOrNullFlow
launchInSuspendFunction0
asFlow	Flow
skipFlow
reduceFlow
subscribeOnFlow
zip
Flow
toSetFlowCollector
emitAllImplFlow
onErrorCollectFlow
produceInThrowable
isCancellationCauseFlow
combineTransformFlow
scanFoldFlow
onErrorReturnFlow
combineLatestFunction0
asFlowFlow
collectWhileFlow
flatMapConcatFlow
onErrorResumeFlow
distinctUntilChangedFlow
lastOrNull	Flow
dropFlow
scanReduceFlow
collectIndexedFlow
flatMapLatest	Flow
foldSharedFlow
onSubscriptionFlow
unsafeTransform
Flow
countFlow
switchMap
Flow
firstMutableSharedFlow
asSharedFlowFlow
publishOnFlow
publish
Flow
mergeArray
getBufferAtArray
setBufferAtSharedFlow
fuseSharedFlowStateFlow
distinctUntilChangedFlowCollector
cancelSharedFlow
catchSharedFlow
countSharedFlow
flowOnFlowCollector
isActiveSharedFlow
toListSharedFlow
cancellableFlowCollector
coroutineContextSharedFlow
retrySharedFlow
retryWhenStateFlow
conflateSharedFlow
toSetCompanion
WhileSubscribedFlow
asChannelFlow.FlowCollector
withUndispatchedContextCollector!AbortFlowException
checkOwnershipJob
transitiveCoroutineParentSafeCollector
checkContextFlowCollector
combineInternalCoroutineScope
flowProduceMutex
withLockSemaphore
withPermitAny
markSelectBuilder
onTimeoutCoroutineScope
produceProducerScope
awaitCloseReceiveChannel
broadcastCoroutineScope
broadcastChannelResult
onSuccessChannelResult
onFailureChannelResult
onClosedChannelResult
getOrElseReceiveChannel
consumeReceiveChannel
toChannelReceiveChannel
singleReceiveChannel
firstReceiveChannel
firstOrNullReceiveChannel
filterNotReceiveChannel
indexOfReceiveChannel
toSetReceiveChannel
onReceiveOrNullReceiveChannel
flatMapReceiveChannel
dropWhile ReceiveChannel
mapIndexedNotNullBroadcastChannel
consumeReceiveChannel
consumesSendChannel
trySendBlockingReceiveChannel
toListSendChannel
sendBlockingReceiveChannel
toMutableListReceiveChannel
filterIndexedReceiveChannel
dropReceiveChannel
mapNotNullReceiveChannel
mapIndexedReceiveChannel
receiveOrNullReceiveChannel
lastOrNullReceiveChannel
toMapReceiveChannel
withIndexReceiveChannel
requireNoNullsReceiveChannel
mapReceiveChannel
takeWhileReceiveChannel
filterBroadcastChannel
consumeEachReceiveChannel
takeReceiveChannel
filterNotNullToReceiveChannel
singleOrNullReceiveChannel
elementAtReceiveChannel
consumeEachReceiveChannel
distinctReceiveChannel
toMutableSetReceiveChannel
minWithReceiveChannel
lastReceiveChannel
filterNotNullReceiveChannel
distinctByReceiveChannel
noneReceiveChannel
cancelConsumedReceiveChannel
toCollectionReceiveChannel
zipReceiveChannel
countReceiveChannel
lastIndexOfReceiveChannel
anyReceiveChannel
maxWithReceiveChannel
elementAtOrNullClosed
toResultAny
toResultCoroutineScope
actorConcurrentLinkedListNode
closeSegment
findSegmentInternal<OnUndeliveredElement
callUndeliveredElementCatchingException+OnUndeliveredElement
callUndeliveredElement(OnUndeliveredElement
bindCancellationFun"Continuation
resumeCancellableWith(DispatchedContinuation
yieldUndispatched(DispatchedContinuation
executeUnconfinedReentrantLock
withLock)MainDispatcherFactory
tryCreateDispatcher!MainCoroutineDispatcher
isMissingLocalAtomicInt
value
Any
unwrapClass
fieldsCountClass
fieldsCountOrDefault#StackTraceElement
elementWiseEqualsThrowable
initCauseThrowable
causeAndStacktraceThrowable
sanitizeStackTraceStackTraceElement
isArtificialArray
frameIndex*SuspendFunction0
startCoroutineCancellable&Continuation
startCoroutineCancellable*SuspendFunction1
startCoroutineCancellable,SuspendFunction0
startCoroutineUnintercepted5ScopeCoroutine
startUndispatchedOrReturnIgnoreTimeout,SuspendFunction1
startCoroutineUnintercepted+SuspendFunction0
startCoroutineUndispatched(ScopeCoroutine
startUndispatchedOrReturn+SuspendFunction1
startCoroutineUndispatched!ScopeCoroutine
undispatchedResultTask
isBlockingAny
withTaskOf%DirectoryProperty
withOutputDirectory"Class
ancestorClassesIncludingSelf#Class
firstPublicKotlinAccessorType1NamedDomainObjectSchema
toFirstKotlinPublicOrSelf)Class
firstPublicKotlinAccessorTypeOrSelfClass
firstNonSyntheticOrSelf$Class
accessorTypePrecedenceSequenceClass
isKotlinVisibleClass
isPublicClass
isKotlinPublicClass
firstNonSyntheticOrNull!CharSequence
kebabCaseToCamelCaseCharSequence
asJavaIdentifierCharSequence
replaceBy"CharSequence
kebabCaseToPascalCase0Task
configureScriptResolverEnvironmentOnDoFirstProject
codeGenerationTaskProject
declareScriptPluginsProject
gradlePlugin$Project
exposeScriptsAsGradlePluginsObjectFactory
withInstance5TaskContainerScope
configureScriptResolverEnvironment!Project
enableScriptCompilationOf!Project
generatePluginAdaptersForProject
buildDirTaskContainer
compileKotlin$Project
registerBuildScriptModelTaskProject
validateScriptPlugin Project
collectScriptPluginFiles
File
mkdir2PrecompiledScriptPlugin
writeScriptPluginAdapterTo0ClasspathFingerprinter
sharedAccessorsPackageFor)ClasspathFingerprinter
fingerprintHashForAny
sharedAccessorsPackage.Any
implicitImportsForPrecompiledScriptPluginsFile
countLines$Sequence
findLocationAwareExceptionsBufferedInputStream
countLinesSequence
anyNotLocatedIn;LocationAwareException
isCausedByScriptCompilationException!Sequence
runtimeFailuresLocatedIn!Throwable
runtimeFailureLocatedInFile
readLinesRangeProjectInternal
applyPluginsProject
collectKotlinDslScriptsProject
parameterFromRequest'Project
precompiledScriptPluginsSupportProject
hierarchyProject
scriptImplicitImportsProject
settings Project
findProjectWithBuildFile)Project
isLocationAwareEditorHintsEnabled#Settings
scriptCompilationClassPath"Project
scriptCompilationClassPathProject
findSourceSetOf+Project
precompiledScriptPluginsMetadataDirProject
enclosingSourceSetOfProject
compilationClassPathOf8KotlinScriptClassPathProvider
safeCompilationClassPathOfSettings
classLoaderScope&TaskContainer
kotlinDslAccessorsReportTaskContainer
tasksTaskContainer
buildEnvironmentTaskContainer
dependencyInsightProject
versionCatalogsTaskContainer
propertiesTaskContainer
initTaskContainer
componentsTaskContainer
wrapperProject
libs&TaskContainer
resolvableConfigurations+TaskContainer
prepareKotlinBuildScriptModelTaskContainer
projects!TaskContainer
dependentComponentsTaskContainer
modelTaskContainer
helpLibrariesForLibs
extTaskContainer
outgoingVariantsTaskContainer
dependenciesTaskContainer
javaToolchainsVersionCatalogsExtension
ext(SimpleFunctionDescriptor
isWriteToParcelClassDescriptor
isParcelizeKotlinType
isParceler$IrSimpleFunction
overridesFunctionInIrClass
creatorGetterIrBlockBuilder
forUntilIrClass
hasCreatorField*IrBuilderWithScope
parcelableWriteToParcelIrClass
isParcelizeIrTypeArgument
upperBound!IrClass
getMethodWithoutArguments#AndroidIrBuilder
javaClassReferenceIrClass
parcelerSymbolByNameIrClass
isSubclassOfFqName"AndroidIrBuilder
kClassToJavaClass4IrBuilderWithScope
parcelableCreatorCreateFromParcel#IrBuilderWithScope
parcelerNewArray IrBuilderWithScope
parcelerWrite!IrBuilderWithScope
parcelerCreate#IrParcelerScope
hasCustomSerializer#IrParcelerScope
getCustomSerializer&IrAnnotationContainer
getParcelerScopeAndroidIrBuilder
readParcelWith AndroidIrBuilder
writeParcelWith&KotlinType
matchesFqNameWithSupertypesKotlinType
matchesFqNameKotlinType
isParcelableList
forEachUntilLastAttributes
toMapInstructionAdapter
castIfNeededWidget
resolveSimpleType
shouldBeCached$AndroidSyntheticProperty
isErrorTypeCacheImplementation
hasCacheIrSimpleFunction
callWithRangesIrBuilderWithScope
irElvisAndroidContainerType
fqName,TranslationPluginContext
declareFunctionStubIrBuilderWithScope
irSafeLet-TranslationPluginContext
declareParameterStubIrBuilderWithScope
irSafeCallIrClassifierSymbol
isFragment1TranslationPluginContext
declareTypeParameterStub!AnnotationDescriptor
getEnumValue"JavaClassDescriptor
convertToProtoSerializedJavaClass
toProtoData"JavaClassDescriptor
javaSourceFileFile
isClassFileFile
isJavaFileFile
cleanDirectoryContentsFile
isKotlinFileFile
mkdirsOrThrowFile
deleteRecursivelyOrThrowClass
isSealedPackage
typeTableOrNullClass
typeTableOrNullMessageLite
isPrivateProtoMapValue
toProtoData
List
namesMessageLite
nameChangesCollector
getDirtyDataLookupStorage
updateMap
dumpMapByteArray
md5Collection
dumpCollectionFileToPathConverter
toPathsFileToPathConverter
toFiles SimpleOutputItem
toGeneratedFileDataExternalizer
loadFromFileDataInput
readStringDataExternalizer
saveToFileDataExternalizer
toByteArrayDataOutput
writeStringDataExternalizer
fromByteArrayJsScope
findOwnNameOrDeclare%LighterASTNode
toKtLightSourceElementKtSourceElement
fakeElementPsiElement
toKtPsiSourceElementAbstractKtSourceElement
psiKtSourceElement
realElementKtSourceElement
text+InputStreamReader
readSourceFileWithMapping!CharSequence
toSourceLinesMappingValue
hashCodeClass
hashCodeContract
hashCodeProperty
hashCodeAnnotation
hashCodeEnumEntry
hashCodeJvmFieldSignature
hashCodeJvmPropertySignature
hashCodePackage
hashCodeExpression
hashCodeEffect
hashCodeType
hashCodeConstructor
hashCodeFunction
hashCodeJvmMethodSignature
hashCodeArgument
hashCodeVersionRequirement
hashCode VersionRequirementTable
hashCodeValueParameter
hashCodeTypeParameter
hashCodeTypeAlias
hashCodeIrStatement
transformStatement IrElement
deepCopySavingMetadata,IrOverridableDeclaration
resolveFakeOverrideIrSimpleFunction
targetIrDeclaration
isFakeOverrideIrFunction
target(Collection
collectAndFilterRealOverrides-IrOverridableDeclaration
collectRealOverridesIrDeclaration
isRealIrDeclaration
moduleIrClassSymbol
getPropertySetterIrClass
getPropertyDeclaration!IrDeclaration
isAnonymousFunction!IrConstructorCall
annotationClassList
hasAnnotationIrClassSymbol
getSimpleFunctionIrClass
getPropertySetterIrDeclaration
fileEntryIrClassSymbol
getPropertyGetterFile
lineStartOffsetsIrValueParameter
isVarargIrFunction
isSuspend$IrDeclaration
nameForIrSerializationIrDeclaration
isAnonymousObjectIrClass
packageFqNameIrFunction
isRealList
findAnnotation IrDeclarationParent
kotlinFqNameIrDeclaration
isSetterIrDeclaration
isGetter)IrDeclaration
isJvmInlineClassConstructor"IrOverridableDeclaration
overrides-IrConstructorCall
isAnnotationWithEqualFqNameIrDeclaration
isLocalIrDeclaration
isAccessorIrFileEntry
lineStartOffsetsIrClass
companionObject#IrDeclaration
isTopLevelDeclarationIrConstructor
constructedClassIrDeclaration
isPropertyField,IrDeclarationParent
fqNameForIrSerialization$IrDeclarationWithName
hasEqualFqName IrDeclaration
isPropertyAccessorIrElement
dump7IrMemberAccessExpression
getValueParameterNamesForDebugIrFile
shouldSkipDumpIrFile
dumpTreesFromLineNumberIrElement
remapTypesIrType
isFunctionTypeOrSubtype(IrClassifierSymbol
isClassWithNamePrefixIrType
isFunctionOrKFunctionIrType
isInterface%IrType
isSuspendFunctionTypeOrSubtypeIrType
isTypeFromKotlinPackageIrClass
getAllSuperclasses#IrClassifierSymbol
isFunctionMarkerIrType
substitute$IrClassifierSymbol
isSuspendFunctionIrType
superTypesIrType
isAnnotationIrClassifierSymbol
isFunctionIrType
isKSuspendFunction%IrClassifierSymbol
isKSuspendFunction#IrType
isSuspendFunctionOrKFunction#IrType
getPrimitiveArrayElementTypeIrType
isFunctionMarker"IrClassifierSymbol
isClassWithNameIrClassifierSymbol
isKFunctionIrType
isSuspendFunction.SymbolTable
declareSimpleFunctionWithOverridesTypeRemapper
withinScope!IrElement
patchDeclarationParentsList
getDeclaration-TypeParameterDescriptor
originalTypeParameter$IrTypeAliasSymbol
renderTypeAliasFqn&IrClassifierSymbol
renderClassifierFqnIrScript
renderScriptFqn#DescriptorRenderer
renderDescriptorIrTypeArgument
renderIrType
render(IrDeclaration
renderDeclarationParentFqn&IrTypeParameter
renderTypeParameterFqnIrElement
renderStringBuilder
appendListWithIrSimpleType
render&IrDeclaration
renderOriginIfNonTrivialIrClass
renderClassFqn"IrDeclaration
renderDeclarationFqnIrElement
deepCopyWithSymbols'ReferenceSymbolTable
withReferenceScopeSymbolTable
withScopeSymbolTable
noUnboundLeftSymbolTable
allUnboundIrType
dumpKotlinLikeIrTypeArgument
dumpKotlinLikeIrElement
dumpKotlinLike%ParameterDescriptor
varargElementTypeParameterDescriptor
isNoinline!ParameterDescriptor
isCrossinline%IrFactory
createIrClassFromDescriptorMutableList
transformInPlaceList
transformIfNeededMutableList
transformFlat0IrDeclarationContainer
transformDeclarationsFlatMutableList
transformSubsetFlatMutableList
replaceInPlaceIrDeclaration
fileOrNullIrFunction
originalFunctionIrConst
shallowCopyIrDeclaration
parentAsClass%IrMemberAccessExpression
addArguments)IrDeclarationWithName
fqNameWhenAvailable!IrDeclarationParent
isFacadeClassIrExpression
isNullConstIrClass
isSubclassOf'IrValueParameter
createStubDefaultValueIrClass
isEnumClassIrClassSymbol
constructors/IrMemberAccessExpression
getTypeSubstitutionMapIrExpression
isTrueConst6IrMemberAccessExpression
copyTypeAndValueArgumentsFromIrClass
isAnnotationClassIrClass
fieldsIrClass
defaultType/IrMemberAccessExpression
copyValueArgumentsFromIrExpression
isTrivialIrClass
isObjectIrStatementOrigin
isLambda"IrConstructor
constructedClassType&ReferenceSymbolTable
referenceFunctionIrClass
primaryConstructorBoolean
toInt,IrFunction
isExternalOrInheritedFromExternalIrClass
isAnonymousObject/IrFunctionAccessExpression
usesDefaultArguments"IrFunction
isFakeOverriddenFromAnyIrFunction
explicitParametersIrClass
functionsIrExpression
shallowCopyIrValueDeclaration
isImmutable'IrFunctionReference
typeSubstitutionMapIrClassSymbol
fields2IrFunctionAccessExpression
getArgumentsWithSymbols3IrPossiblyExternalDeclaration
isEffectivelyExternal IrValueParameter
hasDefaultValueIrClass
isInterfaceIrClassSymbol
functionsIrClass
isNonCompanionObject.IrFunctionAccessExpression
typeSubstitutionMapIrExpression
isFalseConst&IrDeclarationContainer
findDeclarationIrDeclaration
isFileClass"IrFunction
explicitParametersCountIrClass
constructors!IrDeclarationContainer
propertiesIrProperty
originalPropertyIrDeclaration
parentClassOrNullIrFunction
allTypeParametersIrBody
statements!IrExpression
coerceToUnitIfNeededIrExpression
isIntegerConst#IrDeclaration
isEffectivelyExternalIrClass
isEnumEntryIrExpression
shallowCopyOrNullIrDeclaration
file"IrFunction
addExplicitParametersTo+IrMemberAccessExpression
getArgumentsWithIrIrCall
isSuperToAnyIrElement
getPackageFragment%IrMemberAccessExpression
getArgumentsIrClass
isClass IrDeclaration
hasInterfaceParentIrDeclaration
isFromJava(ReferenceSymbolTable
referenceClassifierIrType
classifierOrNull%IrClassifierSymbol
typeWithParametersIrType
withNullabilityIrTypeArgument
typeOrNullIrClassSymbol
createTypeIrSimpleType
withNullabilityIrType
classFqNameIrType
makeNotNullIrType
removeAnnotationsIrClassifierSymbol
defaultTypeIrType
makeNullableIrType
mergeNullabilityIrTypeParameter
defaultTypeIrClassifierSymbol
typeWithIrClassSymbol
starProjectedType!IrClass
typeConstructorParametersIrType
classOrNullIrClass
typeWithIrType
classifierOrFailIrType
toKotlinTypeIrType
addAnnotationsIrType
getClass$IrClassifierSymbol
typeWithArguments#IrClassifierSymbol
isSubtypeOfClassIrType
isSubtypeOfClass"IrType
toArrayOrPrimitiveArrayTypeIrType
isNullable)IrClassifierSymbol
isStrictSubtypeOfClassIrType
isSubtypeOfIrType
isBoxedArrayIrType
getArrayElementTypeIrClassifierSymbol
superTypesIrType
isStrictSubtypeOfClassIrTypeAbbreviationBuilder
build IrTypeAbbreviationImpl
toBuilderIrType
isByteIrType
isCharIrType
isDoubleArrayIrType
isStringIrType
getUnsignedType$IrClassifierSymbol
isClassWithFqNameIrType
isUnsignedTypeIrType
isShortIrType
isUByteIrType
isIntIrType
isCollection(IrType
isDoubleOrFloatWithoutNullabilityIrType
isIterableIrType
isUIntIrType
isComparableIrType
isNullableAnyIrSimpleType
isMarkedNullableIrType
isStringClassTypeIrType
isByteArrayIrType
isNullableClassTypeIrType
isCharSequenceIrType
isUShortIrType
isNullableArrayIrType
isDoubleIrType
isSequenceIrType
isShortArrayIrType
isKClassIrType
isUnitIrType
isNullableContinuationIrType
isNothingIrType
isNullableNothingIrType
isArrayIrType
isLongArrayIrType
isIntArrayIrType
isNumberIrType
isKotlinResult!IrClass
hasFqNameEqualToSignatureIrType
isNullableStringIrType
isMarkedNullableIrType
isBooleanArrayIrType
isFloatArrayIrType
isPrimitiveTypeIrType
isFloatIrType
isNotNullClassTypeIrType
isCharArrayIrType
isLong!IrType
getPrimitiveOrUnsignedTypeIrType
isNullablePrimitiveTypeIrType
isAnyIrType
isClassTypeIrType
isULongIrType
isBooleanIrType
originalKotlinTypeIrSimpleType
buildSimpleTypeIrSimpleType
toBuilder#IrSimpleTypeBuilder
buildSimpleType'IrSimpleTypeBuilder
buildTypeProjection#ClassLoweringPass
runOnFilesPostfix2DeclarationContainerLoweringPass
runOnFilesPostfix#NamedCompilerPhase
toModuleLoweringBackendContext
lazy22GeneratorContext
generateModuleFragmentWithPluginsKotlinLibrary
moduleName%CompilerConfiguration
metadataVersion Map
getUniqueNameForEachFragment(CompilerConfiguration
expectActualLinker0KlibMetadataIncrementalSerializer
serializeScopeKotlinLibrary
isBuiltIns IrMessageLogger
toResolverLoggerFile
useCodedInputIfExistsFile
ifExistsFile
useCodedOutputFile
recreateString
stringHashForICIrElement
irElementHashForICKotlinLibrary
fingerprintFile
fileHashForIC4CrossModuleReferences
crossModuleReferencesHashForIC%CompilerConfiguration
configHashForICCollection
filterDescendantsOfIrDeclaration
addRootsToIrField
isConstantIrField
isKotlinPackage.RuntimeDiagnostic
unreachableDeclarationMethodIrElement
containsCallsTo'JsIrBackendContext
buildInitDeclaration*JsIrBackendContext
buildFactoryDeclaration+JsIrBackendContext
buildConstructorDelegateIrTypeParameter
toIrType*JsIrBackendContext
buildConstructorFactory0LowerCtorHelper
changeReturnUnitToReturnInstanceIrClass
isInstantiableEnum;JsCommonBackendContext
fixReferencesToConstructorParametersIrClass
enumEntriesIrEnumEntry
getType#IrDeclaration
parentEnumClassOrNull5JsCommonBackendContext
getOrCreateGetInstanceFunctionIrProperty
isForLazyInit#IrDeclaration
correspondingProperty%IrDeclaration
isCompatibleDeclaration(IrDeclaration
propertyWithPersistentSafe IrDeclaration
withPersistentSafeIrExpression
isGetUnitMutableMap
addWithPredicateMemberToTransformer
addSymbolToTransformer
addList
toArrayLiteralIrClassSymbol
sizeConstructorIrClassSymbol
iteratorIrClassSymbol
subSequenceIrClassSymbol
sizePropertyIrClassSymbol
setFunctionIrClassSymbol
getFunctionIrClassSymbol
hashCodeFunctionIrClassSymbol
lengthProperty,BackendContext
jsRecordExtractedLocalClasses8IrSimpleFunction
getOrCreateFunctionWithContinuationStub#IrAnnotationContainer
isJsNonModule&IrAnnotationContainer
isJsNativeSetter&IrAnnotationContainer
isJsNativeInvokeIrAnnotationContainer
getJsName7IrDeclarationWithName
getJsNameForOverriddenDeclaration#IrAnnotationContainer
getJsPolyfill"IrConstructorCall
associatedObject$IrAnnotationContainer
getJsQualifier!IrAnnotationContainer
getJsModule IrAnnotationContainer
isJsExport&IrAnnotationContainer
isJsNativeGetter-IrClass
isAssociatedObjectAnnotatedAnnotation*IrAnnotationContainer
isAnnotatedWithJsFun#IrAnnotationContainer
hasJsPolyfill.IrConstructorCall
getSingleConstStringArgument+IrDeclarationWithName
getJsNameOrKotlinName#IrFunction
isLoweredSuspendFunction(IrValueParameter
isContinuationParameter'IrValueParameter
isStringArrayParameterIrType
eraseGenericsIrType
asStringIrClassifierSymbol
asStringIrTypeArgument
asStringIrType
getClassRef#IrReturn
isTheLastReturnStatementInIrDeclaration
isExportedMember!IrDeclaration
isExportedInterfaceIrDeclaration
isExportedClass%IrValueDeclaration
isDispatchReceiver*IrFunction
isInlineFunWithReifiedParameter2JsCommonBackendContext
findUnitGetInstanceFunctionIrBody
prependFunctionCallIrFunction
hasStableJsName#IrFunction
isEqualsInheritedFromAnyIrDeclaration
hasStaticDispatch&IrDeclaration
isImportedFromModuleOnlyNameTable
dump,IrDeclarationWithName
nameIfPropertyAccessorInt
toJsIdentifierChar
mangleIfNotIrFunction
realOverrideTarget#IrSimpleFunction
realOverrideTarget ExportedDeclaration
toTypeScriptModuleKind
indentExportedType
toTypeScriptList
toImplementsClauseExportedType
toExtendsClauseExportedParameter
toTypeScript'ExportedClass
withProtectedConstructors$ExportedClass
shouldNotBeImplementedIrClass
asNestedClassAccessList
toTypeScriptExportedModule
toTypeScriptList
withMagicProperty ExportedClass
toReadonlyPropertyList
toJsCodeStringIrModuleFragment
jsModuleNameString
safeModuleNameIrModuleFragment
safeNameIrDeclaration
isExported-IrOverridableDeclaration
isOverriddenExported)DescriptorVisibility
toExportedVisibility;IrOverridableDeclaration
isAllowedFakeOverriddenDeclarationIrField
safeNameList
makeRef)IrSimpleFunction
overriddenStableProperty"IrSimpleFunction
overridesExternal%IrSimpleFunction
shouldExportAccessor(IrClassifierSymbol
isEffectivelyExternalString
prettyTagJsNode
withSourceJsStatement
asBlock*IrMemberAccessExpression
validWithNullArgsJsNode
addSourceInfoIfNeedIrFunction
varargParameterIndexIrWhen
toJsNodeMutableMap
addMutableMap
addIfNotNullMutableMap
prefixOpMutableMap
withTranslatedArgsMutableMap
binOpMutableMap
postfixOpIrSymbol
isPublicApiScope
createTmpVariableIrBuilderWithScope
irGetObjectIrBuilderWithScope
irWhileIrBuilderWithScope
irBreakIrBuilderWithScope
irContinue%IrStatementsBuilder
createTmpVariable%IrGeneratorContextInterface
constTrue"IrGeneratorContextInterface
andand%IrGeneratorContextInterface
whenComma IrGeneratorContextInterface
oror&IrGeneratorContextInterface
constFalse"IrGeneratorContextInterface
eqeqeq&IrGeneratorContextInterface
equalsNull%IrGeneratorContextInterface
constNull&IrGeneratorContextInterface
elseBranchIrElementBuilder
setSourceRange#IrGeneratorWithScope
buildStatementIrBuilderWithScope
irTryIrBuilderWithScope
irBooleanIrBuilderWithScope
irIs.IrBuilderWithScope
irDelegatingConstructorCallIrBuilderWithScope
irIfThenElse IrBuilderWithScope
irReturnFalseIrBuilderWithScope
irGetField+IrBuilderWithScope
irRawFunctionReferefenceIrBuilderWithScope
irReturnTrueIrBuilderWithScope
irSetIrBuilderWithScope
irStringIrBuilderWithScope
irLongIrBuilderWithScope
irSetFieldIrBuilderWithScope
irBlockIrBuilderWithScope
irWhen$IrBuilderWithScope
irIfThenMaybeElseIrBuilderWithScope
irNotIsIrBuilderWithScope
irCallOpIrBuilderWithScope
irCallIrBuilderWithScope
irVararg"IrBuilderWithScope
irConstantArrayIrBuilderWithScope
parent#IrBuilderWithScope
irGetObjectValueIrStatementsBuilder
irTemporaryIrBuilderWithScope
irReturnIrBuilderWithScope
irFalseIrBuilderWithScope
irBranchIrBuilderWithScope
irCharIrBuilderWithScope
irExprBodyIrBuilderWithScope
irEqeqeq&IrBuilderWithScope
irConstantPrimitiveIrBuilderWithScope
irIfNullIrBuilderWithScope
irEquals$IrBuilderWithScope
irCallConstructorIrBuilderWithScope
irConcatIrBuilderWithScope
irLetSIrBuilderWithScope
irNullIrBuilderWithScope
irComposite#IrBuilderWithScope
irConstantObjectIrBuilderWithScope
irNotEquals!IrBuilderWithScope
irImplicitCastIrBuilderWithScope
irElseBranchIrBuilderWithScope
irReturnUnitIrBuilderWithScope
irEqualsNullIrBuilderWithScope
irGet%IrBuilderWithScope
irIfThenReturnTrueIrBuilderWithScope
irTrueIrBuilderWithScope
irAsIrBuilderWithScope
irIntIrBuilderWithScope
irUnit"IrBuilderWithScope
irSamConversionIrBuilderWithScope
typeOperatorIrBuilderWithScope
irBlockBody&IrBuilderWithScope
irIfThenReturnFalse$IrBuilderWithScope
irReinterpretCastIrFunction
addValueParameterIrFactory
buildValueParameterIrFactory
addFunctionIrFactory
buildFunIrClass
addPropertyIrFactory
buildPropertyIrFactory
buildClassIrFactory
buildFunctionIrProperty
addGetter*IrTypeParametersContainer
addTypeParameter%IrSimpleFunction
addExtensionReceiverIrClass
addField$IrSimpleFunction
addDispatchReceiverIrFactory
buildTypeParameterIrClass
addFunctionIrFactory
buildFieldIrFactory
buildConstructorIrProperty
addDefaultGetterIrClass
addConstructorIrElement
acceptVoidIrElement
acceptChildrenVoidIrElement
transformChildrenVoid&IrSimpleFunction
isOverridableFunction+IrDeclaration
isOverridableMemberOrAccessor IrProperty
isOverridableProperty)IrOverridableMember
isPrivateToThisModule.KotlinBuiltIns
kSuspendFunctionClassDescriptor&KotlinBuiltIns
functionClassDescriptor'KotlinBuiltIns
kFunctionClassDescriptor-KotlinBuiltIns
suspendFunctionClassDescriptor$IrFunctionReference
isWithReflectionIrVararg
addElement IrDynamicOperatorExpression
left&IrFunctionAccessExpression
putArgumentIrVararg
putElement!IrStringConcatenation
addArgument"IrReturnableBlock
sourceFileSymbol!IrDynamicOperatorExpression
right+IrFunctionReference
isAdapterWithReflection,IrConstructorCall
getConstructorTypeArgumentConstructorTypeArguments
setClassTypeArguments
set&IrConstructorCall
getClassTypeArgument$IrConstructorCall
outerClassReceiver'IrConstructorCall
getClassTypeArguments&IrConstructorCall
putClassTypeArgument,IrConstructorCall
putConstructorTypeArgument1IrConstructorCall
getConstructorTypeArgumentIndex-IrConstructorCall
getConstructorTypeArguments)IrConstructorCall
classTypeArgumentsCount4IrSimpleFunctionSymbol
toIrBasedDescriptorIfPossibleIrVariable
toIrBasedDescriptor&IrErrorDeclaration
toIrBasedDescriptorIrEnumEntry
toIrBasedDescriptor,IrScriptSymbol
toIrBasedDescriptorIfPossible#IrTypeParameter
toIrBasedDescriptorIrType
toIrBasedKotlinTypeIrClass
toIrBasedDescriptorIrField
toIrBasedDescriptorIrTypeAlias
toIrBasedDescriptor+IrClassSymbol
toIrBasedDescriptorIfPossibleIrProperty
toIrBasedDescriptor!IrConstructor
toIrBasedDescriptor,IrLocalDelegatedProperty
toIrBasedDescriptor$IrValueParameter
toIrBasedDescriptor$IrSimpleFunction
toIrBasedDescriptor3IrTypeParameterSymbol
toIrBasedDescriptorIfPossibleIrFunction
toIrBasedDescriptor!IrDeclaration
toIrBasedDescriptor.IrPropertySymbol
toIrBasedDescriptorIfPossible&IrStatementOrigin
isAssignmentOperator0IrStatementOrigin
isAssignmentOperatorWithResult9IrMemberAccessExpression
throwNoSuchArgumentSlotException*IrMemberAccessExpression
mapTypeParameters.IrMemberAccessExpression
copyTypeArgumentsFrom)IrMemberAccessExpression
getValueArgument(IrMemberAccessExpression
getTypeArgument$IrMemberAccessExpression
putArgument2IrMemberAccessExpression
mapValueParametersIndexed)IrMemberAccessExpression
putValueArgument)IrMemberAccessExpression
putTypeArguments&CallableDescriptor
typeParametersCount+IrMemberAccessExpression
mapValueParameters1IrMemberAccessExpression
getTypeArgumentOrDefaultIrGetValue
copyWithOffsetsIrBlockImpl
addIfNotNullIrBlockImpl
inlineStatementIrConst
copyWithOffsetsIrBuiltIns
irIfNullThenElseAny
toIrConstList
wrapWithBlockBodyIrFunction
createReturnIrFunction
createCallState
toIrExpression IrBuiltIns
emptyArrayConstructorIrFunction
createGetField#IrConstructor
createConstructorCallAny
toIrConstOrNull&IrFunctionAccessExpression
shallowCopy%IrValueDeclaration
createTempVariableIrBuiltIns
irEqualsIrClass
createGetObjectIrBuiltIns
copyArgs!IrValueDeclaration
createGetValue+IrFunctionAccessExpression
getSuperEnumCallIrFunction
checkCastIrClass
isSubclassOfThrowableIrGetValue
isAccessToObjectIrClass
internalName/IrValueParameter
getDefaultWithActualParametersIrFunction
getExtensionReceiver!IrFunction
getCapitalizedFileName%IrFunction
getArgsForMethodInvocation/IrAnnotationContainer
getEvaluateIntrinsicValue!IrClass
getOriginalPropertyByName5IrFieldAccessExpression
accessesTopLevelOrObjectFieldIrElement
fqNameList
toPrimitiveStateArray IrFunction
hasFunInterfaceParent:IrFunctionAccessExpression
getFunctionThatContainsDefaults/IrFunction
isAccessorOfPropertyWithBackingField1IrInterpreterEnvironment
loadReifiedTypeArgumentsIrType
getTypeIfReified(IrFunctionAccessExpression
getVarargTypeIrType
getOnlyName*IrFunctionAccessExpression
getThisReceiverIrConst
toPrimitiveIrFunction
getLastOverriddenIrFunction
getReceiverIrFunction
getDispatchReceiver IrExpression
handleAndDropResult!CallStack
pushCompoundInstructionCallStack
pushSimpleInstruction
State
wrap	List
wrapClass
isObjectState
isSubtypeOfState
hasTheSameFieldsWithState
isUnitState
asIntState
mustBeHandledAsReflectionState
asStringOrNullState
checkNullabilityState
asStringState
isNullState
asBooleanOrNullState
asBooleanThrowable
handleUserException!IrClass
inlineClassRepresentationIrFile
nameIrFunction
putDefault#IrAttributeContainer
copyAttributes*IrClass
multiFieldValueClassRepresentationIrClass
addAllIrFunction
isPropertyAccessorIrFunction
getIrValueParameterIrFile
pathIrClass
addMember IrFunction
isStaticMethodOfClassIrClass
isMultiFieldValueClassIrClass
isSingleFieldValueClassJsNode
extractLocationIterable
extractReachableRootsContext
isWrapFunctionContext
isDefineModuleContext
isTopLevelFunctionContext
isObjectFunction(Context
isObjectGetOwnPropertyDescriptorContext
isKotlinFunctionContext
isDefineInlineFunctionJsLocation
asStringContext
isAmdDefineNode
extractRootsImplContext
isObjectDefinePropertyChar
isES5IdentifierStartFull Char
isNotAllowedSimpleCharacterChar
isAllowedSimpleDigit"Char
isAllowedLatinLetterOrSpecialString
isValidES5IdentifierChar
isES5IdentifierStartChar
isES5IdentifierPartJsNode
fixForwardNameReferencesJsFunction
markInlineArgumentsChar
isWhitespaceOrCommaCollection
toIdentitySetIterable
zipWithDefaultSequence
toIdentitySet JsExpression
transitiveStaticRef!JsExpression
canHaveOwnSideEffectJsExpression
canHaveSideEffectJsFunction
getInnerFunctionJsNode
withParentsOfNodesJsNode
matchList
toStatement"JsNode
collectBreakContinueTargetsJsFunction
collectFreeVariables JsFunction
collectLocalVariables1JsExpression
checkNoInvocationsWithRecursiveKType-JsInvocation
checkDoesNotCreateRecursiveKType StringBuilder
encodeForSignatureNode
toJsAst/DeclarationDescriptor
isLexicallyInsideJsNativeJsImportedModule
requireNameJsName
staticRefJsNameRef
psiElementJsExpression
isSuspend&JsInvocation
callableReferenceReceiverJsFunction
coroutineMetadataJsFunction
forceStateMachine JsInvocation
isCallableReferenceJsFunction
forcedReturnVariableJsInvocation
descriptor!JsExpressionStatement
exportedTagJsExpression
typeJsExpression
primitiveKClassHasMetadata
sideEffectsJsNameRef
isInlineJsReturn
returnTargetJsExpression
kTypeWithRecursionJsName
localAliasJsExpression
kTypeJsInvocation
typeCheckJsExpression
rangeHasMetadata
syntheticJsNameRef
coroutineControllerJsParameter
hasDefaultValueJsFunction
isLocalJsInvocation
isInlineJsName
descriptorJsNameRef
coroutineReceiverJsNameRef
coroutineResultJsName
specialFunctionJsNameRef
descriptorJsExpression
isUnitJsInvocation
psiElementJsInvocation
boxingJsName
importedJsFunction
functionDescriptor$JsFunction
isInlineableCoroutineBodyJsNameRef
isJsCallJsExpression
localAliasJsVars
exportedPackageString
offsetOf$KtExpression
isConstantStringLiteralDeclarationDescriptor
findPsiString
underlineAsHtmlString
underlineAsText!JsExpressionStatement
targetBlockJsDebugger
targetBlock*JsExpressionStatement
targetExceptionBlockJsDebugger
targetExceptionBlock!JsExpressionStatement
finallyPathJsDebugger
finallyPath0JsBlock
replaceSpecialReferencesInSimpleFunction!JsExpression
isStateMachineResult"CoroutineBlock
collectTargetBlocks JsBlock
replaceSpecialReferences#List
replaceCoroutineFlowStatementsJsNode
collectNodesToSplitJsBlock
replaceLocalVariables+List
collectVariablesSurvivingBetweenBlocksCoroutineBlock
buildGraph"CoroutineBlock
collectFinallyPathsTranslationContext
aliasedNameJsExpression
nameTranslationContext
toLongJsArrayAccess
index
JsNode
anyTranslationContext
toShortJsConditional
testJsWhile
testJsFunction
addParameter'TranslationContext
invokeKotlinFunctionJsExpression
toInvocationWithTranslationContext
toCharTranslationContext
toByteJsConditional
otherwiseJsFunction
addStatementJsConditional
thenJsArrayAccess
array*TranslationContext
getPrecisePrimitiveTypeKotlinType
refineType4TranslationContext
getPrimitiveNumericComparisonInfo:FunctionDescriptor
hasOrInheritsParametersWithDefaultValue1TranslationContext
getPrecisePrimitiveTypeNotNull(TranslationContext
createCoroutineResult3FunctionDescriptor
hasOwnParametersWithDefaultValueList
splitToRangesPsiElement
finalElement*TranslationContext
addAccessorsToPrototype)TranslationContext
addFunctionToPrototype*TranslationContext
addFunctionButNotExport JsFunction
fillCoroutineMetadata%JsProgramFragment
normalizeImportTagsUsageTracker
isCaptured6ReceiverParameterDescriptor
getNameForCapturedReceiver)UsageTracker
getNameForCapturedDescriptor(UsageTracker
hasCapturedExceptContainingTranslationContext
createKTypeMap
buildReifiedTypeArgs.TranslationContext
translateAndAliasParameters5FunctionDescriptor
requiresExtensionReceiverParameter/IncrementalResultsConsumer
reportInlineFunction+FunctionDescriptor
getCorrectTypeParameters$TranslationContext
translateFunction)TranslationContext
wrapWithInlineMetadataHasName
getStaticRef!JsFunction
withCapturedParametersJsFunction
addDeclaration)TranslationContext
addFunctionDeclarationSpecialFunction
refKtProperty
hasCustomSetter;TranslationContext
translateDelegateOrInitializerExpressionKtProperty
hasCustomGetterBTranslationContext
contextWithPropertyMetadataCreationIntrinsifiedMutableList
addGetterAndSetter&FunctionCallInfo
translateFunctionCallArgumentsInfo
argsWithReceiverVariableAccessInfo
variableNameCallInfo
calleeOwner,VariableAccessInfo
constructAccessExpression&VariableAccessInfo
getAccessDescriptorVariableAccessInfo
isGetAccess%VariableAccessInfo
variableDescriptorCallInfo
isNativeCallInfo
isSuperInvocationFunctionCallInfo
functionName.VariableAccessInfo
getAccessDescriptorIfNeededCallInfo
callableDescriptor"FunctionCallInfo
hasSpreadOperatorResolvedCall
expectedReceiversResolvedCall
getReturnType&TranslationContext
getDispatchReceiverTranslationContext
getCallInfo!TranslationContext
createCallInfo$EffectiveVisibility
shouldBeExportedKotlinType
getJetTypeFqNameKotlinType
nameIfStandardType&DeclarationDescriptor
shouldBeExported'DeclarationDescriptor
isCoroutineLambda%ClassDescriptor
hasPrimaryConstructor*VariableAccessInfo
translateVariableAccess&VariableAccessInfo
additionalArgumentsList
hasUnknownPseudocode
traversePseudocode
getInstructionsPseudocode
getStartInstruction#Instruction
getPreviousInstructions$Pseudocode
traverseIncludingDeadCodeInstruction
isStartInstructionPseudocode
getLastInstructionInstruction
getNextInstructions"Pseudocode
collectDataFromSubgraphPseudocode
collectData;KtDeclaration
getDeclarationDescriptorIncludingConstructors%KtElement
getElementParentDeclaration,KtElement
containingDeclarationForPseudocodeTypePredicate
expectedTypeForKotlinType
getSubtypesPredicateKotlinType
render!Pseudocode
getPseudocodeByElement!KtElement
getContainingPseudocodeInstruction
sideEffectFreeLabel
isJumpToError%KtDeclaration
getContainingPseudocode0Instruction
getPrimaryDeclarationDescriptorIfAny&Pseudocode
getElementValuesRecursivelyInstruction
calcSideEffectFreeAccessTarget
accessedDescriptorList
createInsertionPlaceCompanion
resolveString
toBooleanLenientError
locationString(AggregatedReplStageState
adjustHistoriesIterable
findMapping'IReplStageHistory
firstMismatchFiltered$IReplStageHistory
firstMismatchWhileIReplStageHistory
firstMismatchString
replAddLineBreak#String
replRemoveLineBreaksInTheEndString
replUnescapeLineBreaksClassLoader
listAllUrlsAsFilesString
replEscapeLineBreaksString
replNormalizeLineBreaksList
ensureNotEmpty#URLClassLoader
listLocalUrlsAsFilesString
replInputAsXmlString
replOutputAsXmlArgument
isAdvanced+CommonToolArguments
updateInternalArgumentsFreezable
frozenFreezable
unfrozen"String
isDeprecatedArgfileArgumentString
deprecatedArgfilePath"Reader
consumeRestOfQuotedSequenceString
isArgfileArgumentReader
parseNextArgumentFile
expandReader
nextCharString
argfilePath,K2JSCompilerArguments
isPreIrBackendDisabled(K2JSCompilerArguments
isIrBackendEnabled>CommonCompilerArguments
setApiVersionToLanguageVersionIfNeededAny
copyValueIfNeeded$FirSession
languageSettingsComponent"FirSession
languageVersionSettings(FirSession
safeLanguageSettingsComponent&FirSession
safeLanguageVersionSettings0FirSimpleFunction
lowestVisibilityAmongOverrides.FirRegularClassBuilder
generateValueOfFunction-FirRegularClassBuilder
generateValuesFunction Visibility
toEffectiveVisibilityFirBlock
returnExpressionsFirReference
resolved FirTypeRef
copyWithNewSourceKind"ModuleInfo
dependenciesWithoutSelfFirContextReceiver
labelNameFirElement
psiFirReference
resolvedSymbolFirFile
packageFqNameFirElement
realPsiFirSession
nameConflictsTrackerFirSession
moduleDataFirSession
nullableModuleDataFirVariable
toQualifiedAccess3FirLookupTrackerComponent
recordTypeResolveAsLookup*FirLookupTrackerComponent
recordTypeLookupFirSession
lookupTracker*FirLookupTrackerComponent
recordCallLookupClassId
createTypeFirClass
isByteFirClassSymbol
isLongFirClassSymbol
isFloatConeClassLikeType
isFloatFirClass
isPrimitiveTypeFirClass
isPrimitiveNumberTypeFirClassSymbol
isInt,FirClassSymbol
isPrimitiveUnsignedNumberType'ConeClassLikeType
isPrimitiveNumberTypeFirClassSymbol
isShortConeClassLikeType
isBooleanConeClassLikeType
isULongFirClassSymbol
isCharFirClass
isChar$FirClassSymbol
isPrimitiveNumberTypeFirClass
isBooleanConeClassLikeType
isDoubleFirClassSymbol
isByte/ConeClassLikeType
isPrimitiveUnsignedNumberTypeFirClassSymbol
isPrimitiveTypeFirClass
isLong!ConeClassLikeType
isPrimitiveTypeFirClass
isFloat.FirClass
isPrimitiveNumberOrUnsignedNumberTypeFirClass
isDoubleConeClassLikeType
isInt&FirClass
isPrimitiveUnsignedNumberType4FirClassSymbol
isPrimitiveNumberOrUnsignedNumberType7ConeClassLikeType
isPrimitiveNumberOrUnsignedNumberTypeConeClassLikeType
isCharConeClassLikeType
isLongFirClass
isIntFirClassSymbol
isBooleanFirClassSymbol
isDoubleConeClassLikeType
isShortConeClassLikeType
isByteFirClass
isShort:FirCallableDeclaration
originalForIntersectionOverrideAttr&FirCallableDeclaration
containingClass*FirCallableDeclaration
unwrapFakeOverrides-FirCallableDeclaration
isIntersectionOverride-FirCallableDeclaration
isSubstitutionOverride-FirCallableDeclaration
originalIfFakeOverride(FirCallableSymbol
originalIfFakeOverride(FirCallableSymbol
isIntersectionOverride:FirCallableDeclaration
originalForSubstitutionOverrideAttr;FirCallableDeclaration
isSubstitutionOrIntersectionOverride-FirCallableSymbol
dispatchReceiverClassOrNull+FirRegularClass
containingClassForLocalAttr2FirCallableDeclaration
dispatchReceiverClassOrNull+FirRegularClass
isNewPlaceForBodyGeneration6FirCallableSymbol
isSubstitutionOrIntersectionOverride2FirCallableDeclaration
baseForIntersectionOverride,FirCallableSymbol
dispatchReceiverTypeOrNull'FirValueParameter
correspondingProperty FirCallableSymbol
originalOrSelf!FirCallableSymbol
containingClass'FirRegularClass
containingClassForLocal1FirCallableSymbol
originalForSubstitutionOverride6FirCallableDeclaration
originalForSubstitutionOverride9FirCallableDeclaration
containingClassForStaticMemberAttr%FirCallableDeclaration
originalOrSelf(FirCallableSymbol
isSubstitutionOverride+FirCallableDeclaration
initialSignatureAttr%FirCallableSymbol
unwrapFakeOverrides2FirAnonymousFunction
matchingParameterFunctionType-FirCallableSymbol
baseForIntersectionOverride&FirClassLikeDeclaration
ownerGenerator!FirTypeRef
errorTypeFromPrototype(FirFunctionCall
copyAsImplicitInvokeCallFirDeclarationStatus
copy$FirTypeRef
resolvedTypeFromPrototype0BodyResolveComponents
resolveRootPartOfQualifier!FqName
continueQualifierInPackage&FirResolvedQualifier
continueQualifierFirSession
visibilityChecker"FirSession
moduleVisibilityChecker(FirBasedSymbol
isVariableOrNamedFunction FirBasedSymbol
getOwnerLookupTagFirSession
jvmDefaultModeState"FirSession
jvmDefaultModeComponentFirElement
renderFirElement
renderWithType"FirTypeParameter
eraseToUpperBoundJavaType
toFirJavaTypeRefFirTypeRef
resolveIfJavaTypeList
eraseToUpperBoundsJavaType
toConeKotlinType ConeKotlinType
eraseAsUpperBound+FirTypeRef
toConeKotlinTypeProbablyFlexibleClassId
toConeFlexibleType3JavaClassifierType
toConeKotlinTypeForFlexibleBoundJavaType
toFirResolvedTypeRefJavaType
toConeTypeProjectionClassId
toLookupTag<JavaClassifierType
argumentsMakeSenseOnlyForMutableContainer&JavaAnnotationArgument
toFirExpression+JavaAnnotationOwner
convertAnnotationsToFirList
mapJavaTargetArguments/JavaAnnotationArgument
mapJavaRetentionArgument&JavaValueParameter
toFirValueParameter Iterable
convertAnnotationsToFir"JavaAnnotation
toFirAnnotationCallMutableList
addFromJava'ConeTypeProjection
mapToCanonicalString,FirSession
collectAllDependentSourceSessions&ConeClassLikeType
mapToCanonicalString.FirSession
collectAllDependentSourceSessionsTo1ConeClassLikeType
mapToCanonicalNoExpansionString-PsiClassStubImpl
addSupertypesReferencesListsFirRegularClass
packFlags#ConeKotlinType
mapToCanonicalStringConeClassLikeType
toFirClassJavaClass
modalityList
createArrayOfCallAny
createConstantOrError FirConstExpression
setProperTypeAny
createConstantIfAnyJavaClass
classKindJavaModifierListOwner
modality.FirSession
javaAnnotationTypeQualifierResolver+FirCallableSymbol
getJvmMethodNameIfSpecial)FirCallableSymbol
firstOverriddenCallable9FirCallableSymbol
doesOverrideBuiltinWithDifferentJvmName:FirCallableSymbol
getOverriddenBuiltinWithDifferentJvmName.FirNamedFunctionSymbol
firstOverriddenFunction$FirCallableSymbol
isFromBuiltinClass$ConeKotlinType
enhanceConeKotlinType*ConeSimpleKotlinType
enhanceInflexibleType"ConeKotlinType
computeSubtreeSizesConeKotlinType
enhanceConeKotlinType
lexicalCastFromClassId
readOnlyToMutable)ConeClassifierLookupTag
enhanceMutabilityClassId
mutableToReadOnly FirSession
enhancedSymbolStorage FirSession
loadMemberAnnotationsList
asReversedFrozen!ConeAttributes
unsafeVarianceType$ConeAttributes
extensionFunctionType4ConeKotlinType
contextReceiversNumberForFunctionType(ConeAttributes
contextFunctionTypeParams"ConeAttributes
enhancedNullability"ConeKotlinType
hasContextReceivers%ConeAttributes
hasEnhancedNullability4ConeAttributes
contextReceiversNumberForFunctionTypeConeAttributes
noInfer%ConeKotlinType
hasEnhancedNullabilityConeAttributes
exactFirTypeRef
isBuiltinTypeFirTypeRef
coneTypeUnsafe/FirAnnotation
isExtensionFunctionAnnotationCall#FirResolvedTypeRef
functionTypeKindFirTypeRef
isNullableNothingConeKotlinType
canBeNullFirTypeRef
canBeNullFirTypeRef
isUnitFirExpression
isNullLiteral$List
dropExtensionFunctionAnnotationConeClassLikeType
toConstKindFirTypeRef
isBooleanList
computeTypeAttributesConeKotlinType
functionTypeKind"FirFunctionTypeRef
parametersCount&FirTypeProjection
toConeTypeProjectionFirTypeRef
isEnumFirTypeRef
isNothingFirExpression
isStableSmartcast*ConeTypeParameterType
hasNotNullUpperBoundFirTypeRef
coneTypeSafeFirTypeRef
isAnyFirTypeRef
isIntFirTypeRef
isArrayTypeFirTypeRef
isNullableAnyFirTypeRef
isStringFirTypeRef
isMarkedNullableFirTypeRef
coneType*FirAnnotation
extractContextReceiversCountFirTypeRef
lookupTagBasedOrNull ConeKotlinType
customAnnotationsConeAttributes
custom ConeAttributes
customAnnotationsFirSession
typeComponentsFirSession
typeApproximatorFirSession
typeContextCompanion
findCommonSuperType,ConeKotlinType
approximateIntegerLiteralTypeConeTypeProjection
replaceType%ConeTypeProjection
removeQuestionMarkFirSession
doUnify,ConeSimpleKotlinType
unwrapDefinitelyNotNullConeKotlinType
toTypeProjection#ConeKotlinType
lowerBoundIfFlexible$ConeIntersectionType
withAlternative5ConeClassLikeType
replaceArgumentsWithStarProjectionsConeKotlinType
isMarkedNullableConeKotlinType
containsConeKotlinType
isNullableConeIntersectionType
mapTypesConeKotlinType
forEachType#ConeKotlinType
upperBoundIfFlexibleConeClassLikeType
withArguments"ConeTypeProjection
createArrayTypeConeKotlinType
arrayElementType!ConeKotlinType
createOutArrayType!ConeKotlinType
isPotentiallyArray&ConeKotlinType
isArrayOrPrimitiveArray ConeKotlinType
varargElementType%FirTypeRef
approximatedIfNeededOrSelf"FirCallableDeclaration
isSubtypeOf#ConeKotlinType
isUnsafeVarianceType!FirTypeRef
hasEnhancedNullabilityConeKotlinType
withAttributes FirTypeRef
hideLocalTypeIfNeeded"FirTypeRef
isExtensionFunctionType!FirTypeRef
withReplacedReturnType/ConeTypeContext
makesSenseToBeDefinitelyNotNull%FirTypeRef
withoutEnhancedNullabilityConeKotlinType
withArgumentsConeKotlinType
withNullability)FirDeclaration
visibilityForApproximationConeKotlinType
toSymbolFirTypeRef
isUnsafeVarianceTypeFirTypeRef
withReplacedConeType(FirTypeRef
approximatedForPublicPosition%TypeCheckerProviderContext
equalTypes ConeTypeContext
captureArguments)ConeInferenceContext
intersectTypesOrNull,ConeTypeContext
captureFromArgumentsInternal4ConeKotlinType
requiresApproximationInPublicPosition*ConeInferenceContext
commonSuperTypeOrNull#ConeKotlinType
toFirResolvedTypeRef5ConeKotlinType
makeConeTypeDefinitelyNotNullOrNotNullConeKotlinType
isSubtypeOf3ConeTypeContext
captureArgumentsForIntersectionType-ConeTypeContext
captureFromExpressionInternalConeClassLikeType
toSymbol&ConeClassLikeType
findBaseInvokeSymbol*ConeKotlinType
kFunctionTypeToFunctionTypeClassId
toFunctionClassKind3ConeKotlinType
valueParameterTypesIncludingReceiver!FirAnonymousFunction
receiverTypeConeKotlinType
receiverTypeFirAnonymousFunction
returnType(ConeKotlinType
isSubtypeOfFunctionalTypeConeKotlinType
isKClassType4ConeKotlinType
findSubtypeOfNonSuspendFunctionalType.ConeClassLikeLookupTag
isBuiltinFunctionalTypeConeKotlinType
returnType0ConeKotlinType
suspendFunctionTypeToFunctionType$ConeKotlinType
isSuspendFunctionTypeConeKotlinType
isFunctionalType&ConeKotlinType
isBuiltinFunctionalTypeConeKotlinType
isKFunctionType*ConeKotlinType
findContributedInvokeSymbol@ConeKotlinType
suspendFunctionTypeToFunctionTypeWithContinuation ConeTypeProjection
typeOrDefault!ConeKotlinType
isKMutableProperty.ConeTypeContext
isTypeMismatchDueToNullability ConeKotlinType
functionClassKindConeTypeProjection
renderConeKotlinType
render!ConeKotlinType
renderFunctionTypeConeKotlinType
renderAttributes"FunctionClassKind
withPrettyRenderConeKotlinType
isStringConeKotlinType
isPrimitiveArrayConeKotlinType
isNothing)ConeKotlinType
isBooleanOrNullableBoolean ConeKotlinType
isNullableNothing3ConeKotlinType
isUnsignedTypeOrNullableUnsignedTypeConeKotlinType
isPrimitiveConeKotlinType
isAnyConeKotlinType
isULongConeKotlinType
isBooleanConeKotlinType
isUnit"ConeKotlinType
isNonPrimitiveArrayConeKotlinType
isNullableAnyConeKotlinType
isEnumConeKotlinType
isUnsignedTypeConeKotlinType
isLongConeKotlinType
isInt-ConeKotlinType
isPrimitiveOrNullablePrimitive!ConeKotlinType
isAnyOfBuiltinTypeConeKotlinType
isArrayType ConeKotlinType
isNullableBoolean:ConeKotlinType
isIntegerTypeOrNullableIntegerTypeOfAnySizeConeKotlinType
isUIntConeKotlinType
isBuiltinTypeConeTypeProjection
type#ConeTypeProjection
isStarProjection)ConeClassLikeLookupTag
constructClassTypeClassId
constructClassLikeType%ConeClassifierLookupTag
constructType'FirSession
correspondingSupertypesCacheJavaType
render(FirImplicitBuiltinTypeRef
withFakeSourceFirCache
containsFirLazyValue
getValueFirCache
getValueNullableMap
getOrPutFirSession
firCachesFactoryFirCachesFactory
createCache+FirCachesFactory
createCacheWithPostCompute/ConeClassLikeLookupTag
getNestedClassifierScopeFirSession
platformClassMapper ConeKotlinType
scopeForSupertypeFirSession
kotlinScopeProviderFirClass
scopeForClassImplFirClass
scopeForClass1FirDeclarationAttributes
fakeOverrideSubstitution4FirTypeScope
getDirectOverriddenMembersWithBaseScope'FirTypeScope
getDirectOverriddenMembers,FirTypeScope
doProcessAllOverriddenCallables*FirTypeScope
getDirectOverriddenProperties)FirTypeScope
getDirectOverriddenFunctionsList
processOverriddenFunctions3FirTypeScope
processOverriddenPropertiesWithVisited7FirTypeScope
getDirectOverriddenPropertiesWithBaseScope(FirTypeScope
processOverriddenProperties6FirTypeScope
getDirectOverriddenFunctionsWithBaseScope2FirTypeScope
processOverriddenFunctionsWithVisited/FirTypeScope
processDirectlyOverriddenFunctions0FirTypeScope
processDirectlyOverriddenProperties List
processOverriddenPropertiesMutableCollection
addOverridden'FirTypeScope
processOverriddenFunctions1FirContainingNamesAwareScope
processAllProperties1FirContainingNamesAwareScope
collectAllProperties0FirContainingNamesAwareScope
processAllFunctions FirScope
getDeclaredConstructors'List
processOverriddenPropertiesAndSelf.FirTypeScope
processOverriddenFunctionsAndSelf/FirTypeScope
processOverriddenPropertiesAndSelf!FirScope
processClassifiersByNameFirScope
getSingleClassifierFirScope
getFunctionsFirScope
getPropertiesFirSession
overrideService'FirOverrideChecker
isOverriddenFunctionFirTypeRef
isVoidStringBuilder
appendConeType FirFunction
computeJvmDescriptorFirFunction
computeJvmSignature1ConeKotlinType
computeJvmDescriptorRepresentation-FirCallableDeclaration
importedFromObjectData&FirCallableSymbol
delegatedWrapperData<FirCallableDeclaration
multipleDelegatesWithTheSameSignature7FirCallableSymbol
multipleDelegatesWithTheSameSignatureFirSimpleFunction
isPublicInAny+FirCallableDeclaration
delegatedWrapperDataFirValueParameter
hasTypeOfRFirContainingNamesAwareScope
wrapNestedClassifierScopeWithSubstitutionForSuperType&FirSession
substitutionOverrideStorage3FirOverrideChecker
similarFunctionsOrBothProperties!FirTypeParameterSymbol
toConeTypeFirTypeParameterRef
toConeType:ScopeSession
getOrBuildScopeForIntegerConstantOperatorType2FirSimpleFunction
isUnsignedWrappedIntegerOperator'FirBasedSymbol
isWrappedIntegerOperator6FirBasedSymbol
isWrappedIntegerOperatorForUnsignedType'FirDeclaration
isWrappedIntegerOperator3FirSimpleFunction
originalForWrappedIntegerOperator FirSession
nestedClassifierScope&FirSession
declaredMemberScopeProvider1FirSession
declaredMemberScopeWithLazyNestedScopeFirSession
declaredMemberScope FirSession
groupExtensionsByName FirSession
getExtensionsForClass&FirSession
intersectionOverrideStorageFirCallableSymbol
withScope+ResultOfIntersection
isIntersectionOverrideFirTypeRef
toIrType!FirCallableSymbol
toSymbolForCall+FirVariableAssignment
getIrAssignmentOrigin/FirSession
createFilesWithGeneratedDeclarations"KtSourceElement
convertWithOffsetsFirConstExpression
toIrConstConstantValueKind
toIrConstKind(Fir2IrComponents
createTemporaryVariable!FirClass
getSuperTypesAsIrClassesFFirCallableDeclaration
contextReceiversForFunctionOrContainingPropertyFirElement
convertWithOffsets*FirCallableSymbol
unwrapCallRepresentative,FirProperty
processOverriddenPropertySymbolsFirClass
irOrigin-FirProperty
generateOverriddenAccessorSymbols7FirTypeScope
processOverriddenFunctionsFromSuperClasses-FirProperty
generateOverriddenPropertySymbolsFirReference
statementOrigin2FirSimpleFunction
processOverriddenFunctionSymbols!FirConstExpression
getIrConstKindFirClassifierSymbol
toSymbol/FirRegularClass
getIrSymbolsForSealedSubclasses%FirQualifiedAccess
convertWithOffsetsFirBasedSymbol
toSymbolForCallFirReference
toSymbolForCall0IrDeclarationParent
declareThisReceiverParameterIrType
isSamType3FirSimpleFunction
generateOverriddenFunctionSymbols<FirCallableSymbol
unwrapSubstitutionAndIntersectionOverrides?Fir2IrComponents
createTemporaryVariableForSafeCallConstruction+Fir2IrComponents
createSafeCallConstructionFirDeclaration
computeIrOrigin0Fir2IrComponents
computeValueClassRepresentation8FirTypeScope
processOverriddenPropertiesFromSuperClassesFirComparisonExpression
leftFirComparisonExpression
right*ConeKotlinType
getPrimitiveTypeOrSupertype;FirComparisonExpression
inferPrimitiveNumericComparisonInfo3ConeClassLikeType
promoteIntegerTypeToIntIfRequired KtSourceElement
isChildOfForLoopKtSourceElement
operationTokenFirProperty
copyToFreeProperty'FirFunction
copyToFreeAnonymousFunction&FirPropertyAccessor
copyToFreeAccessor$ConeKotlinType
collectTypeParametersFirSession
jvmTypeMapper"KtWhenCondition
toFirWhenConditionArray
toFirWhenCondition%FirClassifierSymbol
collectSuperTypes FirClass
isThereLoopInSupertypes"ConeClassLikeType
isClassBasedType)ConeClassLikeType
computePartialExpansion4FirClassBuilder
ownerRegularClassTypeParametersCount.FirCallableDeclaration
initContainingClassAttr!FirQualifiedAccess
createSafeCall$FirExpression
generateNotNullOrOther-FirBlock
extractContractDescriptionIfPossible*FirExpression
generateLazyLogicalOperation'FirExpression
generateContainsOperationString
parseCharacter.FirPropertyBuilder
generateAccessorsByDelegateIElementType
toFirOperationIElementType
toBinaryName"FirBlock
isContractPresentFirCheckList
filterUseSiteTarget*FirExpression
generateComparisonExpression3FirClassBuilder
ownerRegularOrAnonymousObjectSymbol'FirExpression
pullUpSafeCallIfNecessary"FirExpression
createConventionCallIElementType
toUnaryNameFirExpression
checkReceiverResolutionMode
expectedTypeFirDeclarationStatus
modeFirSession
typeResolver-FirConstructorSymbol
isTypeAliasedConstructorFirSimpleFunction
isEquals0FirClassLikeDeclaration
getContainingDeclarationFirTypeRef
firClassLike-FirConstructor
originalConstructorIfTypeAlias)FirFunctionCall
hasExplicitValueArguments#FirSession
defaultParameterResolverOFirPropertyWithExplicitBackingFieldResolvedNamedReference
getNarrowedDownSymbol4BodyResolveComponents
buildResolvedQualifierForClass,BodyResolveComponents
initialTypeOfCandidate/FirAnnotation
getCorrespondingClassSymbolOrNull#FirFunction
constructFunctionalType$BodyResolveComponents
typeFromCallee.FirStatement
expressionTypeOrUnitForAssignment;BodyResolveComponents
transformExpressionUsingSmartcastInfo;FirCheckedSafeCallSubject
propagateTypeFromOriginalReceiver,FirExpression
isIntegerLiteralOrOperatorCallFBodyResolveComponents
transformWhenSubjectExpressionUsingSmartcastInfo)FirCallableDeclaration
getContainingClass&BodyResolveComponents
typeForQualifier&FirFunction
getHasStableParameterNames.FirFunction
getAsForbiddenNamedArgumentsTarget$BodyResolveComponents
typeFromSymbolDFirSafeCallExpression
propagateTypeFromQualifiedAccessAfterNullCheck@BodyResolveComponents
transformQualifiedAccessUsingSmartcastInfo&FirFunction
constructFunctionalTypeRef,BodyResolveComponents
createCurrentScopeList&ConeSimpleKotlinType
fullyExpandedType*ConeClassLikeType
fullyExpandedTypeNoCache%ConeClassLikeType
directExpansionType ConeKotlinType
fullyExpandedType&ConeClassLikeType
applyNullabilityFrom#ConeClassLikeType
fullyExpandedType%ConeClassLikeType
applyAttributesFrom1Collection
findClassRepresentationThatIsSubtypeOf.ConeClassLikeLookupTag
toFirRegularClassSymbol(ConeClassLikeLookupTag
toFirRegularClass0ConeClassLikeLookupTagImpl
bindSymbolToLookupTag)ConeKotlinType
withCombinedAttributesFrom ConeClassifierLookupTag
toSymbol*ConeKotlinType
withParameterNameAnnotationAConeTypeParameterLookupTag
findClassRepresentationThatIsSubtypeOfConeClassLikeLookupTag
toSymbol&FirSymbolProvider
getSymbolByLookupTag&ConeKotlinType
findClassRepresentation&ConeClassLikeLookupTag
toSymbolOrErrorCallableId
isIteratorCallableId
isIteratorNextCallableId
isKFunctionInvokeCallableId
isIteratorHasNextFirAnnotation
fqNameCallableId
isInvoke*ResolutionStageRunner
createErrorCandidate+ResolutionStageRunner
fullyProcessCandidate!FirClassifierSymbol
constructTypeFirSession
qualifierResolver FirClass
typeWithStarProjectionsClassId
defaultTypeConeKotlinType
scopeFirClassSymbol
defaultTypeFirClass
defaultType)FirExpressionWithSmartcast
smartcastScope)FirControlFlowGraphReference
dataFlowInfo-FirControlFlowGraphReference
controlFlowGraph"FirSimpleFunction
isPublicInObject-FirRegularClass
getSingleAbstractMethodOrNullCFirRegularClass
hasMoreThenOneAbstractFunctionOrHasAbstractProperty(FirRegularClass
computeSamCandidateNames2FirSimpleFunction
getFunctionTypeForAbstractMethod FirSession
samConstructorStorage/FirRegularClass
findSingleAbstractMethodByNames'FirExpression
unwrapSmartcastExpressionFirExpression
coneTypeFirOperation
invertFirFunctionCall
isBooleanNotFirElement
symbolFirOperation
isEq!ConeConstantReference
toOperationFirResolvable
symbolPersistentMap
putMutableMap
putStack
isNotEmptyStack
topOrNullStack
popOrNullStack
isEmptyFirElement
isEqualsToFlow
unwrapVariable TypeStatement
asMutableStatementTypeStatement
toPersistent1PersistentApprovedTypeStatements
addTypeStatement%LogicSystem
approveOperationStatement4LogicSystem
replaceVariableFromConditionInStatementsTypeStatement
plusDataFlowVariable
eqImplication
invertConditionDataFlowVariable
notEqDataFlowVariable
isSynthetic"MutableTypeStatements
addStatementRealVariable
typeEqDataFlowVariable
isReal)MutableTypeStatements
mergeTypeStatementsRealVariable
typeNotEqOperationStatement
impliesControlFlowGraph
orderNodes#ControlFlowGraph
walkThrowSubGraphs ControlFlowGraph
forEachSubGraphControlFlowGraph
sortedNodes7ControlFlowGraphBuilder
createEnterDefaultArgumentsNode6ControlFlowGraphBuilder
createAnonymousObjectEnterNode5ControlFlowGraphBuilder
createPostponedLambdaExitNode1ControlFlowGraphBuilder
createQualifiedAccessNode9ControlFlowGraphBuilder
createStringConcatenationCallNode3ControlFlowGraphBuilder
createElvisLhsIsNotNullNode:ControlFlowGraphBuilder
createDelegatedConstructorCallNode4ControlFlowGraphBuilder
createTryExpressionEnterNode3ControlFlowGraphBuilder
createTryMainBlockEnterNode*ControlFlowGraphBuilder
createLoopExitNode+ControlFlowGraphBuilder
createBlockExitNode7ControlFlowGraphBuilder
createWhenBranchResultEnterNode2ControlFlowGraphBuilder
createFinallyBlockExitNode6ControlFlowGraphBuilder
createWhenBranchResultExitNode3ControlFlowGraphBuilder
createFinallyProxyEnterNode+ControlFlowGraphBuilder
createLoopEnterNode3ControlFlowGraphBuilder
createCallableReferenceNode5ControlFlowGraphBuilder
createAnonymousObjectExitNode3ControlFlowGraphBuilder
createTryExpressionExitNode*ControlFlowGraphBuilder
createWhenExitNode0ControlFlowGraphBuilder
createAnnotationExitNode:ControlFlowGraphBuilder
createContractDescriptionEnterNode9ControlFlowGraphBuilder
createWhenBranchConditionExitNode5ControlFlowGraphBuilder
createVariableDeclarationNode2ControlFlowGraphBuilder
createCheckNotNullCallNode/ControlFlowGraphBuilder
createLoopBlockExitNode6ControlFlowGraphBuilder
createExitDefaultArgumentsNodeAControlFlowGraphBuilder
createAnonymousFunctionExpressionExitNode:ControlFlowGraphBuilder
createWhenBranchConditionEnterNode0ControlFlowGraphBuilder
createLocalClassExitNode.ControlFlowGraphBuilder
createExitContractNode3ControlFlowGraphBuilder
createLoopConditionExitNode2ControlFlowGraphBuilder
createTypeOperatorCallNode2ControlFlowGraphBuilder
createCatchClauseEnterNode0ControlFlowGraphBuilder
createInitBlockEnterNode/ControlFlowGraphBuilder
createBinaryOrEnterNode9ControlFlowGraphBuilder
createPropertyInitializerExitNode.ControlFlowGraphBuilder
createExitSafeCallNode3ControlFlowGraphBuilder
createResolvedQualifierNode9ControlFlowGraphBuilder
createWhenSyntheticElseBranchNode1ControlFlowGraphBuilder
createCatchClauseExitNode+ControlFlowGraphBuilder
createElvisExitNode0ControlFlowGraphBuilder
createLoopBlockEnterNode/ControlFlowGraphBuilder
createEnterSafeCallNode+ControlFlowGraphBuilder
createWhenEnterNode/ControlFlowGraphBuilder
createElvisRhsEnterNode.ControlFlowGraphBuilder
createBinaryOrExitNode6ControlFlowGraphBuilder
createEqualityOperatorCallNode.ControlFlowGraphBuilder
createFunctionCallNode;ControlFlowGraphBuilder
createWhenSubjectExpressionExitNode2ControlFlowGraphBuilder
createTryMainBlockExitNode.ControlFlowGraphBuilder
createElvisLhsExitNode<ControlFlowGraphBuilder
createUnionFunctionCallArgumentsNode4ControlFlowGraphBuilder
createLoopConditionEnterNode;ControlFlowGraphBuilder
createPartOfClassInitializationNode/ControlFlowGraphBuilder
createFunctionEnterNode,ControlFlowGraphBuilder
createBlockEnterNode<ControlFlowGraphBuilder
createBinaryAndEnterRightOperandNode1ControlFlowGraphBuilder
createConstExpressionNode/ControlFlowGraphBuilder
createBinaryAndExitNode1ControlFlowGraphBuilder
createAnnotationEnterNode0ControlFlowGraphBuilder
createThrowExceptionNode:ControlFlowGraphBuilder
createBinaryAndExitLeftOperandNode?ControlFlowGraphBuilder
createAnonymousObjectExpressionExitNode2ControlFlowGraphBuilder
createFinallyProxyExitNode&ControlFlowGraphBuilder
createStubNode.ControlFlowGraphBuilder
createGetClassCallNode:ControlFlowGraphBuilder
createLocalFunctionDeclarationNode+ControlFlowGraphBuilder
createClassExitNode.ControlFlowGraphBuilder
createFunctionExitNode,ControlFlowGraphBuilder
createClassEnterNode6ControlFlowGraphBuilder
createPostponedLambdaEnterNode/ControlFlowGraphBuilder
createEnterContractNode:ControlFlowGraphBuilder
createPropertyInitializerEnterNode/ControlFlowGraphBuilder
createInitBlockExitNode0ControlFlowGraphBuilder
createBinaryAndEnterNode7ControlFlowGraphBuilder
createFieldInitializerEnterNode4ControlFlowGraphBuilder
createVariableAssignmentNode6ControlFlowGraphBuilder
createComparisonExpressionNode3ControlFlowGraphBuilder
createFinallyBlockEnterNode;ControlFlowGraphBuilder
createBinaryOrEnterRightOperandNode9ControlFlowGraphBuilder
createBinaryOrExitLeftOperandNode&ControlFlowGraphBuilder
createJumpNode6ControlFlowGraphBuilder
createFieldInitializerExitNodeFirFunction
nameCFGNode
renderFirLoop
typeCFGNode
lastPreviousNodeCFGNode
firstPreviousNode*FirClassLikeDeclaration
fullyExpandedClass1ConeConditionalEffectDeclaration
buildContractFirCandidate
fullyAnalyzed&FirSession
callConflictResolverFactory&BodyResolveComponents
isConcreteMember(BodyResolveComponents
getFunctionMembers(BodyResolveComponents
getPropertyMembers3BodyResolveComponents
resolveSupertypesByCalleeName0BodyResolveComponents
resolveSupertypesByMembers1BodyResolveComponents
findTypesForSuperCandidates5BodyResolveComponents
resolveSupertypesByPropertyName5BodyResolveComponents
resolveSupertypesForMethodOfAny"BodyResolveComponents
mapArguments&ConeKotlinType
removeTypeVariableTypes%CheckerSink
reportDiagnosticIfNotNullCheckerSink
yieldIfNeedCheckerSink
yieldDiagnostic,FirDeclaration
isLocalClassOrAnonymousObjectHCallableReferenceAdaptation
needCompatibilityResolveForCallableReference!FirVariable
canBeMutableReferenceFirFunction
indexOf2ConeKotlinType
isBaseTypeForNumberedReferenceTypes4BodyResolveComponents
getCallableReferenceAdaptationConeKotlinType
isKCallableTypeFirExpression
index#ConeKotlinType
isUnitOrFlexibleUnit!FirSession
syntheticNamesProviderCandidate
prepareReceivers#Candidate
isJavaApplicableCandidate0CheckerSink
markCandidateForCompatibilityResolve&Candidate
findClosestMatchingReceivers(FirExpression
isSuperReferenceExpressionFirExpression
isSuperCall*Candidate
getExpectedTypeWithSAMConversionCandidate
resolveBlockArgumentFirExpression
isFunctional#Candidate
resolveArgumentExpression)Candidate
captureTypeFromExpressionOrNull+ConeKotlinType
hasSupertypeWithGivenClassIdFirExpression
getExpectedTypeCandidate
prepareCapturedTypeCandidate
resolveArgument(Candidate
resolvePlainExpressionArgument Candidate
resolveSubCallArgument"Candidate
resolvePlainArgumentTypeCandidate
prepareExpectedType#FirScope
getSingleVisibleClassifier"FirDeclaration
isInvisibleOrHidden.FirScope
processFunctionsAndConstructorsByName"FirScope
processConstructorsByName!FirScope
getFirstClassifierOrNull1FirTypeAliasSymbol
findSAMConstructorForTypeAlias%FirClassLikeSymbol
findSAMConstructor2FirTypeParameter
getTypeParameterFromExpandedClass0FirMemberDeclaration
getBackingFieldIfApplicableFirVisibilityChecker
isVisible<PostponedArgumentsAnalyzerContext
addSubsystemFromExpressionFirResolvable
candidate,FirDeclaration
hasBuilderInferenceAnnotation5BodyResolveComponents
createExplicitReceiverForInvoke?BodyResolveComponents
createExplicitReceiverForInvokeByCallable&FirCallableSymbol
hasExtensionReceiver%Candidate
preprocessCallableReference"Candidate
preprocessLambdaArgument0Candidate
isFunctionForExpectTypeFromCastFeatureConeKotlinType
unwrap2FirFunction
isFunctionForExpectTypeFromCastFeatureCandidate
computeCompletionModeFirSession
inferenceComponents1FirSymbolProvider
getClassDeclaredFunctionSymbols.FirSymbolProvider
getClassDeclaredConstructorsFirSession
symbolProvider$FirSymbolProvider
getSymbolByTypeRef1FirSymbolProvider
getClassDeclaredPropertySymbols-FirSymbolProvider
getClassDeclaredMemberScope%FirSession
dependenciesSymbolProviderFirSession
firProvider*FirResolvable
processCandidateIfApplicable/FirStatement
processAllContainingCallCandidatesCandidate
csBuilder ConeSubstitutor
substituteOrNull/FirCallableDeclaration
transformTypeToArrayType0FirValueParameter
transformVarargTypeToArrayTypeConeSubstitutor
chainMIntegerLiteralAndOperatorApproximationTransformer
approximateIfIsIntegerConst8FirClassLikeDeclaration
runTypeResolvePhaseForLocalClass'FirDeclaration
hasOwnBodyOrAccessorBody$ExpectedArgumentType
getExpectedTypeConeKotlinType
toExpectedType=FirClassLikeDeclaration
runSupertypeResolvePhaseForLocalClass!ScopePersistentList
pushIfNotNullPersistentList
pushAllPersistentList
push+FirClassLikeDeclaration
typeParametersScope)FirRegularClass
resolveSupertypesInTheAir.FirResolvePhase
createCompilerProcessorByPhase%FirBasedSymbol
ensureResolvedForCalls(FirTypeRef
ensureResolvedTypeDeclaration,ConeKotlinType
ensureResolvedTypeDeclaration1FirCallableSymbol
publishedApiEffectiveVisibility.FirDeclaration
publishedApiEffectiveVisibility5FirClassLikeDeclaration
runStatusResolveForLocalClass:BodyResolveComponents
computeRepresentativeTypeForBareType#FirFunctionCall
getOriginalFunction9FirClassLikeDeclaration
collectLocalClassesNavigationInfoFirBlock
writeResultTypeFirExpression
resultType"ConstantValueKind
expectedConeTypeCFirClassLikeDeclaration
runContractAndBodiesResolutionForLocalClass*ReturnTypeCalculator
getTransformerCreator1FirClassLikeDeclaration
runAllPhasesForLocalClassFirSession
generatedClassIndex7FirClassLikeDeclaration
runContractResolveForLocalClass$FirSession
registerResolveComponents#FirSession
registerCommonComponents,FirSession
registerCliCompilerOnlyComponents0FirSession
registerJavaSpecificResolveComponents'FirSession
registerCommonJavaComponentsFirSession
registerModuleData FirContractDescriptionOwner
body+FirContractDescriptionOwner
valueParameters!FirContractDescriptionOwner
errorFirSession
sourcesToPathsMapperFirBasedSymbol
ensureResolvedFirDeclaration
ensureResolvedFirSession
phaseManager)FirClassSymbol
constructStarProjectedTypeFirCallableSymbol
isExtension/FirSession
overridesBackwardCompatibilityHelperFirSession
checkersComponentKtLightSourceElement
getChildKtPsiSourceElement
getChildKtSourceElement
getChild,KtLightSourceElement
buildChildSourceElementCFGNode
isEnterNode ControlFlowGraph
getNodesInOrderControlFlowGraph
getEnterNodeCFGNode
previousCfgNodesCFGNode
followingCfgNodesControlFlowGraph
traverse#ControlFlowGraph
collectDataForNode+ControlFlowGraph
collectDataForNodeInternal%FirBasedSymbol
isCompiledToJvmDefaultCheckerContext
isJvm6)KtModifierKeywordToken
toVisibilityOrNullKtModifierList
getVisibility#ConeKotlinType
canBeUsedForConstVal*FirCallableSymbol
getReferencedClassSymbol/FirDeclaration
loadWasExperimentalMarkerClasses3FirDeclaration
checkSinceKotlinVersionAccessibility'FirDeclaration
getOwnSinceKotlinVersion!ConeAttributes
originalProjectionFirDeclaration
isCollectableFirElement
hasModifierKtSourceElement
getModifierListFirModifierList
containsFirElement
getModifierKtSourceElement
valOrVarKeyword.FirAnnotationContainer
getDefaultUseSiteTarget(FirExpression
extractClassesFromArgumentFirRegularClass
getRetention+FirRegularClass
getAllowedAnnotationTargets)FirAnnotation
getAllowedAnnotationTargets"FirDeclaration
getTargetAnnotation)FirClassLikeSymbol
getAnnotationRetentionFirAnnotation
getRetention.FirAnnotation
getAnnotationClassForOptInMarker%FirDeclaration
getRetentionAnnotation3FirAnnotationContainer
getImplicitUseSiteTargetList/FirClassLikeSymbol
containsRepeatableAnnotation&FirClassLikeSymbol
getTargetAnnotation.FirClassLikeSymbol
getAllowedAnnotationTargets!FirExpression
unfoldArrayOrVarargFirAnnotation
isRepeatable(ConeKotlinType
isNonReifiedTypeParameter"ConeKotlinType
allParameterReified.ConeTypeProjection
isConflictingOrNotInvariant'CheckerContext
findClosestClassOrObject%FirSimpleFunction
overriddenFunctionsFirClassLikeSymbol
classKind)FirCallableSymbol
getImplementationStatus'FirBasedSymbol
getContainingClassSymbolName
isDelegated#FirClassLikeSymbol
outerClassSymbol9FirIntersectionCallableSymbol
subjectToManyNotImplemented!FirMemberDeclaration
isInlineOnlyFirTypeRef
toRegularClassSymbolKotlinTypeMarker
isSupertypeOf%FirClassLikeSymbol
fullyExpandedClassConeKotlinType
canHaveSubtypes(FirRegularClassSymbol
collectEnumEntries'FirCallableDeclaration
isVisibleInClassFirTypeRef
toClassLikeSymbol'FirDeclaration
getContainingClassSymbolFirValueParameter
hasValOrVar%FirMemberDeclaration
implicitModality#FirBasedSymbol
typeParameterSymbols-FirClassSymbol
getContainingDeclarationSymbol#ConeKotlinType
toRegularClassSymbol-FirNamedFunctionSymbol
matchesEqualsSignature@FirNamedFunctionSymbol
matchesDataClassSyntheticMemberSignatures&ConeClassLikeType
toRegularClassSymbol*FirNamedFunctionSymbol
overriddenFunctionsConeKotlinType
isInlineClassFirDeclaration
hasBody#ConeKotlinType
isSubtypeOfThrowable"FirCallableSymbol
isVisibleInClassFirFunctionCall
isIterator/FirNamedFunctionSymbol
matchesHashCodeSignatureFirClassSymbol
isSupertypeOfKotlinTypeMarker
isSubtypeOf"FirClass
findNonInterfaceSupertype/FirNamedFunctionSymbol
matchesToStringSignature8FirFunctionSymbol
isFunctionForExpectTypeFromCastFeatureCheckerContext
findClosest)FirSuperReference
hadExplicitTypeInSource!FirDeclarationPresenter
representFirDeclaration
onConstructors*FirMemberDeclaration
isEffectivelyExternal%FirDeclaration
isEnumEntryInitializer'FirMemberDeclaration
isEffectivelyFinalFirBasedSymbol
isLocalMember*FirRegularClassSymbol
isInlineOrValueClassFirDeclaration
isLocalMember$FirRegularClass
isInlineOrValueClass#FirCallableSymbol
isExtensionMember(FirCallableDeclaration
isExtensionMemberFirClass
canHaveOpenMembers(FirMemberDeclaration
isEffectivelyExpect%FirProperty
hasAccessorImplementation FirBasedSymbol
isEnumConstructorFirBasedSymbol
expandedClass(FirConstructorSymbol
getConstructedClass0FirBasedSymbol
isPrimaryConstructorOfInlineClass&FirBasedSymbol
isAnnotationConstructor5KtDiagnosticFactoryToRendererMap
checkMissingMessages&FirExtensionService
additionalCheckers*DiagnosticReporter
reportOnWithSuppressionConeDiagnostic
toKtDiagnosticKtDiagnosticFactory3
createOn NewConstraintError
lowerConeTypeKtDiagnosticFactory2
createOnKtDiagnosticFactory1
createOn"ConstraintSystemError
toDiagnosticConeDiagnostic
toFirDiagnosticsKtDiagnosticFactory4
createOnConeSimpleDiagnostic
getFactory NewConstraintError
upperConeTypeKtDiagnosticFactory0
createOnFirSession
buildFirFromKtFilesFirSession
buildFirViaLightTreeFirSession
convertToIr5FirSessionConfigurator
registerExtendedCommonCheckers*FirSessionConfigurator
registerJvmCheckers-FirSessionConfigurator
registerCommonCheckersFirSession
runCheckersFirSession
runResolutionList
acceptAllElementsFirElement
transformSingleMutableList
transformInplace,ConeEffectDeclaration
toFirEffectDeclarationFirContractDescription
effects"FirContractDescription
coneEffectsFirClass
generatedMembers#FirClass
generatedNestedClassifiersString
nameAsSafeNameFirUserTypeRef
isUnderscored#FirCallBuilder
extractArgumentsFrom)LighterASTNode
getAsStringWithoutBacktick.FirSession
generatedDeclarationsSymbolProvider&FirExtensionService
registerExtensions2FirExtensionService
expressionResolutionExtensions)FirExtensionService
declarationGenerators'FirExtensionService
supertypeGenerators&FirSession
registeredPluginAnnotations!FirSession
predicateBasedProvider+FirExtensionService
typeAttributeExtensions/FirExtensionService
statusTransformerExtensionsFirDeclarationStatus
transformDeclarationPredicate
andDeclarationPredicate
orFirSession
extensionService!FirExtensionService
hasExtensions&FirWhenExpression
isProperlyExhaustiveFirWhenExpression
isExhaustiveFirCall
argumentsFirCall
argumentMappingFirAnnotation
classIdFirBlock
replaceFirstStatement&FirExpression
toResolvedCallableSymbolFirExpression
toReferenceFirCall
resolvedArgumentMapping)FirExpression
toResolvedCallableReference%FirReference
toResolvedCallableSymbolFirCall
argumentFirAnnotation
coneClassLikeTypeFirExpression
unwrapArgument#FirBlock
transformStatementsIndexed3FirResolvedArgumentList
toAnnotationArgumentMapping+FirArgumentList
toAnnotationArgumentMapping<ConeSimpleKotlinType
valueClassRepresentationTypeMarkersList1FirRegularClass
getValueClassUnderlyingParameters6ConeKotlinType
substitutedUnderlyingTypeForInlineClass8ConeKotlinType
unsubstitutedUnderlyingTypeForInlineClass$FirAnnotation
getVersionFromArgument%List
extractDeprecationInfoPerUseSiteFirBasedSymbol
getDeprecation!FirAnnotation
getDeprecationLevel'List
getDeprecationInfosFromAnnotations*FirAnnotationContainer
getDeprecationInfos(FirBasedSymbol
getDeprecationForCallSite(FirRegularClass
valueClassRepresentation)FirRegularClass
inlineClassRepresentation2FirRegularClass
multiFieldValueClassRepresentation"FirRegularClass
collectEnumEntries'FirClass
constructorsSortedByDelegation-FirConstructorSymbol
delegatedThisConstructorFirClass
constructors FirClass
primaryConstructorIfAnyFirClass
delegateFieldsMapList
toAnnotationUseSiteTargets2FirExpression
callableNameOfMetaAnnotationArgument FirAnnotation
findArgumentByNameFirExpression
unwrapVarargValue.FirAnnotation
useSiteTargetsFromMetaAnnotation"FirAnnotation
isJvmFieldAnnotationFirAnnotation
toAnnotationClass List
mapAnnotationsWithClassIdTo/FirAnnotationContainer
getJvmNameFromAnnotationList
getAnnotationsByClassIdFirAnnotation
resolved!FirProperty
hasJvmFieldAnnotation%FirBasedSymbol
getAnnotationByClassId-FirAnnotationContainer
getAnnotationByClassId.FirAnnotationContainer
getAnnotationsByClassId!FirAnnotation
toAnnotationClassIdFirDeclaration
hasAnnotation+FirAnnotationContainer
nonSourceAnnotations#FirAnnotation
toAnnotationLookupTagFirAnnotation
getStringArgument'FirDeclaration
versionRequirementsTable'ContextReceiverGroup
asTowerDataElement&SessionHolder
collectImplicitReceivers.SessionHolder
collectTowerDataElementsForClassFirClass
staticScopeFirScope
asTowerDataElement(ImplicitReceiverValue
asTowerDataElement2FirCallableDeclaration
createContextReceiverValuesFirElement
validate(FirRegularClass
getSealedClassInheritors$FirRegularClass
sealedInheritorsAttr(FirSession
sealedClassInheritorsProvider(FirRegularClass
setSealedClassInheritors&FirRegularClassBuilder
addDeclarations2FirTypeParameterBuilder
addDefaultBoundIfNecessary%FirRegularClassBuilder
addDeclarationFirSimpleFunction
isLocalFirFunction
hasBodyFirMemberDeclaration
isInlineFirRegularClass
isCompanionFirMemberDeclaration
isAbstractFirMemberDeclaration
modalityFirClass
isEnumClassFirRegularClass
isSealed&FirMemberDeclaration
isFromSealedClass-FirMemberDeclaration
allowsToHaveFakeOverrideFirMemberDeclaration
isConst$FirProperty
allowsToHaveFakeOverrideFirMemberDeclaration
isStaticFirMemberDeclaration
isSuspendFirMemberDeclaration
isInfix,FirPropertyAccessor
allowsToHaveFakeOverride*FirRegularClass
canHaveAbstractDeclarationFirMemberDeclaration
visibilityFirMemberDeclaration
isOverrideFirMemberDeclaration
isInnerFirMemberDeclaration
isFinalFirMemberDeclaration
isActualFirMemberDeclaration
isLateInitFirMemberDeclaration
isOperator(FirMemberDeclaration
effectiveVisibilityFirPropertyAccessor
hasBody#Visibility
allowsToHaveFakeOverride$FirMemberDeclaration
isFromEnumClassFirClassLikeDeclaration
isLocalFirClass
isInterfaceFirMemberDeclaration
isExternalFirMemberDeclaration
isTailRecFirMemberDeclaration
isExpectFirRegularClass
isDataFirMemberDeclaration
isOpenFirMemberDeclaration
isFun%FirClassLikeDeclaration
sourceElement#FirProperty
hasExplicitBackingField)FirPropertySymbol
hasExplicitBackingFieldFirProperty
isFromVarargFirProperty
isReferredViaField0FirDeclaration
getDanglingTypeConstraintsOrEmptyFirProperty
hasBackingField)FirPropertySymbol
canNarrowDownGetterType)FirPropertySymbol
getExplicitBackingField#FirProperty
getExplicitBackingFieldFirRegularClass
moduleName$FirMemberDeclaration
containerSource#FirProperty
canNarrowDownGetterTypeAny
danglingTypeConstraints"FirProperty
fromPrimaryConstructorFirDeclaration
isJavaFirClass
anonymousInitializersFirDeclaration
isFromLibrary"FirBasedSymbol
isJavaOrEnhancementFirDeclaration
isPrecompiledFirClassLikeDeclaration
classId"FirDeclaration
isJavaOrEnhancementFirClass
delegateFieldsFirClass
superConeTypesFirTypeAlias
expandedConeType)FirQualifiedAccess
referredPropertySymbolFirDeclaration
isSyntheticFirClass
classIdFirClassSymbol
superConeTypesFirCallableSymbol
isActualFirTypeAliasSymbol
isExpect*FirPropertySymbol
allowsToHaveFakeOverrideFirCallableSymbol
isExpectFirTypeAliasSymbol
isActualFirCallableSymbol
isTailRecFirCallableSymbol
isOperatorFirCallableSymbol
isInfixFirClassSymbol
isExpectFirClassSymbol
isExternal"FirClassSymbol
effectiveVisibility"FirTypeAliasSymbol
isFromEnumClassFirTypeAliasSymbol
isInnerFirCallableSymbol
isInnerFirCallableSymbol
visibilityFirCallableSymbol
isOverride%FirCallableSymbol
effectiveVisibility#FirCallableSymbol
isFromSealedClassFirClassSymbol
visibilityFirTypeAliasSymbol
visibilityFirClassSymbol
isEnumClassFirCallableSymbol
isSuspendFirCallableSymbol
isLateInitFirClassSymbol
isAbstractFirClassSymbol
isSealed&FirTypeAliasSymbol
effectiveVisibilityFirClassSymbol
isOpen2FirPropertyAccessorSymbol
allowsToHaveFakeOverrideFirTypeAliasSymbol
isFunFirClassLikeSymbol
isExpectFirClassSymbol
isFinalFirClassSymbol
modality*FirCallableSymbol
allowsToHaveFakeOverride!FirCallableSymbol
isFromEnumClassFirClassSymbol
isInnerFirNamedFunctionSymbol
isLocalFirClassSymbol
isInlineFirCallableSymbol
isExternal$FirTypeAliasSymbol
isFromSealedClassFirCallableSymbol
isOpenFirCallableSymbol
modalityFirTypeAliasSymbol
isOpenFirTypeAliasSymbol
modalityFirTypeAliasSymbol
isExternalFirClassSymbol
isInterfaceFirTypeAliasSymbol
isInlineFirTypeAliasSymbol
isAbstractFirClassLikeSymbol
isActualFirCallableSymbol
isInlineFirCallableSymbol
isFunFirCallableSymbol
isAbstractFirClassLikeSymbol
isLocalFirCallableSymbol
isFinalFirTypeAliasSymbol
isFinalFirClassSymbol
isCompanionFirTypeAliasSymbol
isStatic0FirRegularClassSymbol
canHaveAbstractDeclaration,FirClassSymbol
isLocalClassOrAnonymousObjectFirClassSymbol
isData FirClassSymbol
isFromSealedClassFirClassSymbol
isStaticFirClassSymbol
isFromEnumClassFirClassSymbol
isFunFirClassSymbol
isActualFirCallableSymbol
isConst!FirCallableSymbol
modalityOrFinalFirExpression
toConstantValueProtoEnumFlags
projection.FirRegularClassBuilder
addSerializableIfNeeded/FirRegularClassBuilder
addCloneForArrayIfNeededPsiElement
isThisWithoutLabelStringBuilder
appendInnKtElement
getDebugText(KtElement
suppressDiagnosticsInDebugMode%KtFile
suppressDiagnosticsInDebugModeKtFile
doNotAnalyzeKtFile
analysisContextKtClassOrObject
allConstructorsKtClassOrObject
getOrCreateBody#KtContractEffectList
getExpressions#KtModifierListOwner
addModifierList#KtModifierListOwner
setModifierList"KtExpression
unpackFunctionLiteralKtElement
deleteSemicolonKtContractEffect
getExpression.KtCallableDeclaration
setReceiverTypeReference'KtFunctionType
setReceiverTypeReference$KtElement
doSetReceiverTypeReferenceKtElement
getModificationStamp5KtClass
createPrimaryConstructorParameterListIfAbsent(KtClass
createPrimaryConstructorIfAbsent'KtPsiFactory
createDeclarationByPattern*KtPsiFactory
buildDestructuringDeclarationKtPsiFactory
buildExpression-KtPsiFactory
createValueArgumentListByPattern#KtPsiFactory
buildValueArgumentList4KtPsiFactory
createDestructuringDeclarationByPattern&KtPsiFactory
createExpressionByPatternKtPsiFactory
buildDeclaration!KtPureElement
findClassDescriptorPsiElement
parameterIndex%KtModifierList
visibilityModifierType4KtExpression
getQualifiedExpressionForSelectorOrThis"KtClassOrObject
findFunctionByName"KtFunctionLiteral
findLabelAndCall.KtExpression
getQualifiedExpressionForReceiverKtExpression
getLabeledParent KtCallExpression
addTypeArgument*KtFunctionLiteral
getOrCreateParameterListKtElement
containingClass*KtModifierListOwner
visibilityModifierType!KtModifierList
visibilityModifier%KtElement
getQualifiedElementSelectorKtSimpleNameExpression
isCalleeKtElement
isFirstStatement)KtNamedFunction
isContractPresentPsiCheck1KtNameReferenceExpression
isUnderscoreInBackticksString
quoteIfNeededString
isIdentifier3KtSimpleNameExpression
isPackageDirectiveExpression-KtCallExpression
getOrCreateValueArgumentList(KtModifierListOwner
modifierFromTokenSetKtElement
parentSubstituteKtParameter
isPropertyParameter3KtModifierListOwner
visibilityModifierTypeOrDefault'KtStringTemplateExpression
plainContentKtClassOrObject
isObjectLiteral,KtExpression
getOutermostParenthesizerOrThis*KtSimpleNameExpression
getQualifiedElement6KtAnnotationsContainer
collectAnnotationEntriesFromPsi!PsiElement
isExtensionDeclaration7KtQualifiedExpression
isContractDescriptionCallPsiCheck.KtExpression
isContractDescriptionCallPsiCheck#KtCallElement
getCallNameExpressionKtExpression
asAssignment%KtDeclaration
containingClassOrObject+KtElement
getQualifiedExpressionForSelector'KtExpression
isLambdaOutsideParentheses4KtExpression
getQualifiedExpressionForReceiverOrThis%KtClassOrObject
effectiveDeclarations KtExpression
isInImportDirectiveKtExpression
isDotSelectorEKtSimpleNameExpression
getTopmostParentQualifiedExpressionForSelector!KtElement
isContextualDeclaration7KtSimpleNameExpression
getQualifiedElementOrCallableRef%StubBasedPsiElementBase
getSuperNames%KtNamedDeclaration
getValueParameters/KtExpression
getPossiblyQualifiedCallExpressionKtExpression
getAssignmentByLHSKtDeclaration
modalityModifier"KtDeclaration
modalityModifierType"KtFile
getFileOrScriptDeclarations'KtExpression
topParenthesizedParentOrMe"KtStringTemplateExpression
isPlainKtModifierListOwner
isPublicKtBlockExpression
contentRangeKtClass
isAbstract%KtExpression
lastBlockStatementOrThis*KtStringTemplateExpression
getContentRange(KtNamedDeclaration
getValueParameterListKtElement
nonStaticOuterClassesKtTypeElement
unwrapNullabilityKtModifierListOwner
isPrivate-KtStringTemplateExpression
isPlainWithEscapes3StubElement
collectAnnotationEntriesFromStubElement)KtStringTemplateExpression
isSingleQuotedKtDeclaration
hasBody!KtExpression
getAnnotationEntries"KtClassOrObject
findPropertyByName)KtNamedDeclaration
safeNameForLazyResolveKtModifierListOwner
isProtected$KtExpression
getBinaryWithTypeParentName
safeNameForLazyResolve!PsiElement
isFunctionalExpression2KtSimpleNameExpression
isImportDirectiveExpression&KtModifierListOwner
visibilityModifierKtExpression
isDotReceiver#PsiElement
isTopLevelKtOrJavaMember/KtNamedDeclaration
isPrivateNestedClassOrObject<KtAnnotationsContainer
collectAnnotationEntriesFromStubOrPsi+KtNamedDeclaration
safeFqNameForLazyResolvePsiElement
astReplace KtExpression
referenceExpression"KtElement
blockExpressionsOrSingle,KtSimpleNameExpression
getReceiverExpressionKtValueArgument
argumentIndex#KtModifierList
modifierFromTokenSet&PsiElement
startOffsetSkippingComments%PsiElement
collectDescendantsOfTypeToPsiElement
prevLeafsPsiElement
siblings KtModifierList
hasActualModifier$PsiElement
getElementTextWithContext#PsiElement
textRangeWithoutCommentsPsiElement
endOffsetPsiElement
getStartOffsetInPsiElement
findDescendantOfTypePsiChildRange
textRangePsiElement
getParentOfTypePsiElement
getParentOfTypes2PsiElement
getParentOfTypes3!KtModifierList
hasSuspendModifier PsiElement
prevSiblingOfSameType PsiElement
nextSiblingOfSameTypePsiElement
parentsPsiElement
startsWithComment!PsiElement
getTopmostParentOfTypeKtExpression
isNull%PsiElement
getParentOfTypeAndBranchesPsiElement
startOffsetPsiElement
allChildrenKtPureElement
pureStartOffset!PsiElement
getIfChildIsInBranchesPsiElement
beforeASTNode
closestPsiElement#PsiElement
getParentOfTypeAndBranch+PsiElement
getLastParentOfTypeInRowWithSelfPsiElement
getChildOfTypeASTNode
children%KtModifierListOwner
hasExpectModifierPsiFile
elementsInRange0PsiElement
unwrapParenthesesLabelsAndAnnotationsASTNode
siblingsPsiElement
nextLeafPsiElement
prevLeaf#PsiElement
collectDescendantsOfTypePsiElement
parentsWithSelf6PsiElement
getNextSiblingIgnoringWhitespaceAndCommentsPsiElement
getTextWithLocationPsiChildRange
getTextPsiElement
getChildrenOfTypePsiElement
anyDescendantOfType(PsiElement
getOutermostParentContainedInASTNode
parentsASTNode
leavesSearchScope
contains6PsiElement
getPrevSiblingIgnoringWhitespaceAndCommentsKtModifierList
hasValueModifier'PsiElement
getParentOfTypesAndPredicate KtModifierList
hasExpectModifier+PsiElement
getNextSiblingIgnoringWhitespace+LazyParseablePsiElement
getContainingKtFile%KtModifierListOwner
hasActualModifierPsiElement
createSmartPointerPsiElement
getParentOfTypesTextRange
containsInsidePsiChildRange
trimWhiteSpacesKtPureElement
pureEndOffsetPsiElement
getIfChildIsInBranch"PsiElement
forEachDescendantOfTypePsiElement
nextLeafsKtModifierList
hasFunModifier+PsiElement
getPrevSiblingIgnoringWhitespace6PsiElement
unwrapParenthesesLabelsAndAnnotationsDeeply#PsiElement
getLastParentOfTypeInRowPsiElement
isAncestorPsiElement
isInsideOf$KtFunction
getCalleeByLambdaArgument$KtSimpleNameExpression
mainReferenceKtElement
mainReferenceKDocName
mainReferencePsiReference
unwrappedTargets#KtReferenceExpression
mainReferenceFqNameUnsafe
childSafeProject
createJavaClassFinderJavaType
isSuperWildcard$JavaMember
isObjectMethodInInterface(JavaAnnotationOwner
buildLazyValueForMapJavaClass
classIdCollection
convertArray
convertString
splitCanonicalFqName"String
convertCanonicalNameToQName	Int
isSet5TypeSystemCommonBackendContext
hasEnhancedNullability/JavaTypeQualifiers
computeQualifiersForOverride'JavaTypeQualifiers
nullabilityForErrors
Set
select#TypeComponentPosition
shouldEnhance-TypeSystemCommonBackendContext
mapBuiltInTypeJvmTypeFactory
boxTypeIfNeededClassId
internalName4CallableDescriptor
getContainingKotlinJvmBinaryClass%DeclarationDescriptor
toSourceElement!KotlinClassFinder
findKotlinClass ClassId
callableIdForConstructor%FqName
findValueForMostSpecificFqnameFqName
tailFqName
parentOrNullFqName
isOneSegmentFQNFqName
isChildOfFqName
isSubpackageOfString
collectionsIdString
javaAnnotationIdString
coroutinesIdString
jvmInternalIdString
reflectIdString
internalIdName
primitiveArrayIdString
jvmIdString
rangesIdString
callableIdString
annotationIdMap
inverseMapString
internalIrIdString
javaLangIdString
baseIdClassId
unsignedId>NewConstraintSystem
buildNotFixedVariablesToPossibleResultTypeKtDeclaration
isOrdinaryClass'KtElement
containingNonLocalDeclarationKtDeclaration
isAnnotatedSmartPrinter
withIndentOption
getOrNullImmutableMap
getOrNullTuple2
component1Tuple2
component2WeakPair
component2WeakPair
component1Collection
bfsAny
computeHashWasmModule
calculateIdsWasmType
getHeapTypeByte
toWatDataByteArray
toWatDataJavaClass
collectAllSupertypesKtClassOrObject
computeClassId Collection
filterTypeAnnotationsJCModifiers
isAbstractJCModifiers
visibilityJCModifiers
hasDefaultModifierJCModifiers
isFinalJCTree
annotationsJCModifiers
isStaticElement
isStatic!ExecutableElement
valueParametersElement
isFinalElement
isAbstractElement
getVisibilityTypeElement
computeClassIdSet
getVisibility!AnnotatedConstruct
findAnnotation@TypeSystemCommonBackendContext
computeExpandedTypeForInlineClass7TypeSystemCommonBackendContext
computeExpandedTypeInnerKotlinType
classFqnStringBindingContext
getElementType,CallableDescriptor
isTopLevelExtensionOnType;DeclarationDescriptor
findTypeInModuleByTopLevelClassFqName-KotlinType
representativeTypeForTypeParameter5TypeConstructorMarker
isIntegerLiteralTypeConstructor KotlinTypeMarker
typeConstructorTypeVariableMarker
defaultType$TypeSubstitutorMarker
safeSubstitute'TypeVariableMarker
freshTypeConstructor(KotlinTypeMarker
dependsOnTypeParameters)KotlinTypeMarker
dependsOnTypeConstructor CapturedTypeMarker
captureStatusTypeArgumentListMarker
allVariance
convertVariance(KtCallExpression
isWithoutValueArguments KotlinTypeRefiner
refineBareType=KtOperationExpression
reportDeprecatedDefinitelyNotNullSyntax+SimpleFunctionDescriptor
createFunctionType File
withReplacedExtensionOrNullFile
descendantRelativeTo!CharSequence
substringWithContextLookAheadIterator
sequenceUntilKType
allowsNullsField
getSafeClassLoader
loadedClassesAny
isJavacComponentAny
isPrimitiveOrString)ConflictingJvmDeclarationsData
higherThan*KtNamedDeclaration
getAccessorLightMethodsPsiMember
memberIndexPsiJavaFileStub
findDelegatePsiElement
toLightClassOrigin(JvmDeclarationOrigin
toLightMemberOriginKtParameter
toLightGetterPsiElement
unwrapped'PsiElement
getRepresentativeLightMethod#KtTypeParameter
toPsiTypeParametersKtParameter
toPsiParametersKtScript
toLightClass.KtClassOrObject
toLightClassWithBuiltinMapping#KtParameter
toAnnotationLightMethod#PsiAnnotation
withNestedAnnotationsKtElement
toLightAnnotation(KtClassOrObject
hasInterfaceDefaultImpls PsiElement
namedUnwrappedElementKtElement
toLightElementsKtParameter
toLightSetterFqName
defaultImplsChildKtFile
findFacadeClass)FqName
repeatableAnnotationContainerChildPsiElement
toLightMethods0KtClassOrObject
hasRepeatableAnnotationContainerKtClassOrObject
toLightClass KtClassOrObject
toFakeLightClassPsiClass
isAnonymous&AnnotationDescriptor
toLightAnnotation,DeclarationDescriptor
obtainLightAnnotations%ConstantValue
toAnnotationMemberValueKtDeclaration
simpleVisibility KtModifierListOwner
isDeprecated%KtAnnotationEntry
looksLikeDeprecatedKtUltraLightSupport
mapType*KotlinType
tryResolveMarkerInterfaceFQName5KtUltraLightClass
createGeneratedMethodFromDescriptor)KtModifierListOwner
isHiddenByDeprecation/KtUltraLightSupport
createTypeFromCanonicalTextKtUltraLightClass
lightMethod#ConstantValue
asStringForPsiLiteral#KtAnnotationEntry
analyzeAnnotationKtFile
safeIsScript"KtUltraLightSupport
findAnnotationConstantValue
createPsiLiteral"KotlinType
cleanFromAnonymousTypesKotlinType
asPsiTypeProject
applyCompilerPluginsKtDeclaration
getKotlinType&KtValueArgument
looksLikeLevelArgumentKtClassOrObject
safeIsLocalList
toLightAnnotationsKtDeclaration
resolveKtFile
safeScriptKtAnnotated
isJvmStaticAny
invalidAccessLightElement
cannotModify'KtClassOrObject
getExternalDependencies"PsiReferenceList
addSuperTypeEntryKtSuperTypeList
findEntry.KtClassOrObject
shouldNotBeVisibleAsLightClass0KtClassOrObject
defaultJavaAncestorQualifiedName<KtLightClassForSourceDeclaration
isPossiblyAffectedByAllOpenKtLightMethod
isSetterKtLightMethod
isAccessor!KtLightMethod
isTraitFakeOverrideKtLightMethod
isGetter$PsiAnnotation
tryConvertAsRepeatable%PsiAnnotation
extractAnnotationFqNamePsiAnnotation
tryConvertAs*PsiAnnotation
tryConvertAsMustBeDocumented+PsiAnnotation
extractArrayAnnotationFqNames-PsiAnnotation
tryConvertAsRepeatableContainer#PsiAnnotation
tryConvertAsRetention PsiAnnotation
tryConvertAsTargetKtElement
getResolvedCallKtExpression
nameReferenceLanguageVersion
toKotlinVersion1LanguageFeature
forcesPreReleaseBinariesIfEnabled)LanguageVersion
isStableOrReadyForPreview8LanguageVersionSettings
isLibraryToSourceAnalysisEnabled-CompilerConfiguration
languageVersionSettings(KtElement
getChildTokenStartOffsetOrNullMemberScope
findSingleFunctionKtElement
deparenthesize&PropertyDescriptor
resolveFakeOverride%PropertyDescriptor
unwrappedSetMethod5KtSecondaryConstructor
isConstructorDelegatingToSuper(KtPureElement
pureStartOffsetOrUndefined.ResolvedCall
isValueArgumentReorderingRequired%PropertyDescriptor
unwrappedGetMethod&KtPureElement
pureEndOffsetOrUndefinedPsiElement
endOffsetOrUndefined!PsiElement
startOffsetOrUndefinedKotlinType
containsNull&DeclarationDescriptor
isSamConstructor/KotlinType
getSubstitutedFunctionTypeForSamType9CallableDescriptor
getOriginalForFunctionInterfaceAdapterSamConversion
isSamTypeGenerator
getOrFail-Generator
getExpressionTypeWithCoercionToUnitGenerator
getResolvedCallGenerator
get)Generator
getTypeInferredByFrontendOrFail3Generator
getExpressionTypeWithCoercionToUnitOrFail#Generator
getTypeInferredByFrontend$StatementGenerator
computeVarargType>StatementGenerator
generateReceiverForCalleeImportedFromObject5StatementGenerator
createFunctionForSuspendConversionCStatementGenerator
applySuspendConversionForValueArgumentIfRequiredFStatementGenerator
generateContextReceiverForDelegatingConstructorCall)StatementGenerator
generateReceiverOrNull"ResolvedCall
isExtensionInvokeCall.StatementGenerator
getSamTypeForValueParameterCStatementGenerator
generateSamConversionForValueArgumentsIfRequired'StatementGenerator
generateCallReceiver0StatementGenerator
generateVarargExpressionUsing&StatementGenerator
loadContextReceiver(StatementGenerator
generateValueArgument1StatementGenerator
pregenerateValueArgumentsUsingGenerator
getSuperQualifierIrExpression
implicitCastTo-StatementGenerator
generateValueArgumentUsing#StatementGenerator
generateReceiver/StatementGenerator
generateBackingFieldReceiver"StatementGenerator
pregenerateCall1StatementGenerator
pregenerateExtensionInvokeCall=StatementGenerator
shouldGenerateReceiverAsSingletonReference>StatementGenerator
castArgumentToFunctionalInterfaceForSamType+StatementGenerator
pregenerateCallReceivers.StatementGenerator
generateThisOrSuperReceiver'StatementGenerator
pregenerateCallUsing-StatementGenerator
generateSingletonReferenceResolvedCall
isImplicitGetResolvedCall
isImplicitInvokeResolvedCall
isImplicitSetKtElement
getDynamicOperator:KtPureClassOrObject
getStartOffsetOfClassDeclarationOrNullAKtPureElement
getStartOffsetOfConstructorDeclarationKeywordOrNull>KtPureElement
getStartOffsetOfFunctionDeclarationKeywordOrNullIrExpression
hasNoSideEffectsIrExpression
isUnchangingCallGenerator
generateCall*IrProperty
linkCorrespondingPropertySymbol$Scope
createTemporaryVariableInBlockGenerator
createBodyGeneratorCallBuilder
argumentsCount CallBuilder
dispatchReceiverType-CallBuilder
getValueArgumentsInParameterOrder!CallBuilder
extensionReceiverTypeCallBuilder
hasDispatchReceiver CallBuilder
hasExtensionReceiver%CallBuilder
explicitReceiverParameterCallBuilder
lastArgument$CallBuilder
setExplicitReceiverValue-CallBuilder
isValueArgumentReorderingRequired CallBuilder
explicitReceiverType'IrExpression
safeCallOnDispatchReceiverCallReceiver
adjustForCalleeIrVariable
loadAtIrClass
isGeneratedLambdaClassIrFactory
addClassIrFunction
isMultifileBridgeIrFunction
hasMangledReturnTypeIrType
requiresMangling,IrFunction
isMultiFieldValueClassFieldGetterIrType
unboxInlineClass#IrFunction
isInlineClassFieldGetter!IrFunction
fullValueParameterListIrClass
inlineClassFieldNameIrFunction
hasMangledParametersIrClassSymbol
fieldByNameIrClassSymbol
functionByName(IrTypeParameter
representativeUpperBoundIrType
upperBoundIrType
defaultValueIrType
eraseTypeParametersIrTypeArgument
eraseToScopeIrType
eraseToScope"IrTypeArgument
eraseTypeParametersIrType
isInlineClassTypeIrType
isReifiedTypeParameterJvmIrBuilder
irArrayOfJvmIrBuilder
irArrayIrFile
findInlineCallSitesIrFile
findInlineLambdas$JvmBackendContext
createJvmIrBuilderIrType
asJvmFlexibleTypeIrType
isWithFlexibleMutability IrType
isWithFlexibleNullability#IrFunction
isInlineArrayConstructorIrFunction
isInlineFunctionCall!IrFunction
isPrivateInlineSuspend3IrDeclarationWithVisibility
isEffectivelyInlineOnlyIrFunction
isReifiable#IrDeclaration
isInPublicInlineScopeIrDeclaration
originalIrFunction
isInlineOnlyIrStatement
unwrapInlineLambda#IrDeclaration
inlineScopeVisibility'IrFunction
isNonBoxingSuspendDelegation(IrFunction
isInvokeSuspendOfContinuation&IrFunction
isBridgeToSuspendImplMethod&IrFunction
shouldContainSuspendMarkers+IrFunction
isInvokeSuspendForInlineOfLambda7IrFunction
isStaticInlineClassReplacementDelegatingCallBIrFunction
isStaticInlineClassReplacementForDefaultInterfaceMethod IrExpression
isReadOfCrossinline"IrFunction
isInvokeSuspendOfLambda-IrFunction
isInvokeOfSuspendCallableReferenceIrFunction
hasContinuation IrFunction
continuationParameterIrDeclaration
isInCurrentModule.IrSimpleFunction
copyCorrespondingPropertyFromIrField
constantValue IrFunction
extensionReceiverNameIrFunction
propertyIfAccessor,IrDeclaration
isStaticInlineClassReplacementIrProperty
needsAccessorIrSimpleType
isRawTypeIrClass
isJvmInterfaceIrClass
getAnnotationRetention"IrFunction
suspendFunctionOriginal*DeclarationDescriptorWithSource
psiElement.IrDeclaration
getCallableReferenceTopLevelFlagIrFunction
hasPlatformDependent$IrClass
buildAssertionsDisabledField!IrField
isAssertionsDisabledField"IrClass
hasAssertionsDisabledField'IrSimpleFunction
isCompiledToJvmDefaultJvmIrBuilder
javaClassReferenceJvmIrBuilder
kClassToJavaClass/IrMemberAccessExpression
getStringConstArgument0IrClass
hasJvmDefaultWithCompatibilityAnnotation2IrSimpleFunction
isOrOverridesDefaultParameterStub*IrFunctionAccessExpression
receiverAndArgs7IrDeclarationParent
getCallableReferenceOwnerKClassType&IrDeclaration
getJvmNameFromAnnotationIrElement
hasChild0IrMemberAccessExpression
getBooleanConstArgumentIrSimpleFunction
isJvmAbstract=IrMemberAccessExpression
copyFromWithPlaceholderTypeArguments)IrMemberWithContainerSource
parentClassId#IrMemberAccessExpression
psiElementIrClass
rawType.IrClass
hasJvmDefaultNoCompatibilityAnnotation&IrElement
replaceThisByStaticReference"IrConstructorCall
getValueArgumentIrDeclaration
psiElementIrFile
getKtFileIrDeclaration
fileParent.IrExpression
isSmartcastFromHigherThanNullable'JvmBackendContext
makeRawTypeAnnotationIrClass
isSyntheticSingletonIrFile
getIoFileIrFunction
hasJvmDefault0IrFunction
getJvmVisibilityOfDefaultArgumentStubIrFunction
isBridge/IrFunction
isSimpleFunctionCompiledToJvmDefault(IrSimpleFunction
suspendFunctionOriginal,IrMemberAccessExpression
getIntConstArgument!IrClass
isOptionalAnnotationClass IrScript
needsReceiverProcessingIrClass
addAnonymousInitializerIrClass
toStringFunction%JvmIrBuilder
lowerInlineClassArgument"IrExpression
unwrapImplicitNotNullJvmIrBuilder
callToStringJvmIrBuilder
normalizeArgument!IrSimpleFunction
isGenericToArrayIrClass
isCollectionSubClassIrClass
superClassIrType
isArrayOrNullableArray$IrSimpleFunction
isNonGenericToArrayIrType
isArrayOrNullableArrayOf2IrSimpleFunction
isDefinitelyNotDefaultImplsMethod!IrSimpleFunction
isCloneableClone0IrExpression
reinterpretAsDispatchReceiverOfTypeIrBlock
parseSafeCallIrBlock
parseElvisIrFile
getFileClassInfoIrField
shouldMoveToFacade0IrSimpleFunction
createMultifileDelegateIfNeeded!IrFunctionReference
replaceOriginIrStatementOrigin
isInlinableIrFunction
capturesCrossinline*IrSimpleFunction
suspendFunctionViewOrStub.IrMemberAccessExpression
retargetToSuspendViewIrGetField
isGetFieldOfUnitList
findTailCall IrSimpleFunction
resolvesToClass$IrSimpleFunction
overriddenFromClass DescriptorVisibility
isProtectedIrField
resolveFakeOverride&IrClass
syntheticAccessorToSuperSuffix$IrDeclaration
isJvmStaticInCompanion!IrDeclaration
isJvmStaticInObject$IrDeclaration
isJvmStaticDeclaration#IrMemberAccessExpression
makeStaticIrFunction
isArrayOfIrFunction
isEmptyArrayIrFunction
continuationClass0IrSimpleFunction
overridesReturningDifferentType%IrFunction
suspendForInlineToOriginal(IrFunction
isSuspendCapturingCrossinline!IrExpression
isReadOfInlineLambda!MethodNode
acceptWithStateMachine1IrFunction
anyOfOverriddenFunctionsReturnsNonUnitIIrFunction
originalReturnTypeOfSuspendFunctionReturningUnboxedInlineClass3IrFunction
isAccessorForDeprecatedJvmStaticProperty'IrClass
getVisibilityAccessFlagForClassIrFrameMap
leave1IrDeclaration
getVisibilityAccessFlagForAnonymous'IrDeclaration
isAnnotatedWithDeprecated&IrClass
calculateInnerClassAccessFlagsAIrFunction
isAccessorForDeprecatedPropertyImplementedByDelegation!JvmBackendContext
getSourceMapperIrFrameMap
enter9IrDeclarationWithVisibility
isInlineOnlyPrivateInBytecodeIrFunction
isDeprecatedFunction"IrDeclaration
isDeprecatedCallableIrTypeMapper
mapClassSignature1IrDeclarationWithVisibility
specialCaseVisibilityIrType
isExtensionFunctionType3IrDeclarationWithVisibility
getVisibilityAccessFlag*IrClass
innerAccessFlagsForModalityAndKind+IrValueParameter
isSyntheticMarkerParameterIrLoop
nonLocalReturnLabelPromisedValue
materializeAtExpressionCodegen
unitValue PromisedValue
materializeAtBoxedPromisedValue
materializePromisedValue
materializedExpressionCodegen
nullConstantPromisedValue
materializedAt!PromisedValue
materializedAtBoxedIrType
anyTypeArgumentPromisedValue
coerceToBooleanIrClass
getFlagsIrClass
getSynthAccessFlagIrField
computeFieldFlagsType
isAnonymousClassModality
flags*IrField
isPrivateCompanionFieldInInterfaceDescriptorVisibility
flagsIrDeclarationOrigin
flagsIrClass
applicableTargetSetIrTypeMapper
mapTypeParameter#IrSimpleType
buildPossiblyInnerType!IrTypeMapper
mapTypeAsDeclarationIrTypeMapper
mapTypeIrTypeMapper
mapClassIrTypeMapper
mapOwnerIrTypeMapper
mapSupertype#IrFunctionAccessExpression
argTypes%WasmCompiledModuleFragment
generateJsList
onAllFilesIrBlockBuilder
irIntPlus!StringBuilder
appendParameterListIrSimpleFunction
wasmSignatureIrTry
isCanonical6IrAnnotationContainer
hasExcludedFromCodegenAnnotation/IrAnnotationContainer
hasWasmNoOpCastAnnotation,IrAnnotationContainer
getWasmArrayAnnotation)IrAnnotationContainer
getWasmOpAnnotation0IrAnnotationContainer
hasWasmAutoboxedAnnotation"ReferencableAndDefinable
buildDataList
filterVirtualFunctionsIrClass
allFieldsIrClass
getSuperClassIrClass
allSuperInterfacesInt
toLittleEndianBytesChar
toLittleEndianBytesIrType
getRuntimeClassIrElement
sourceElementMutableList
peekMutableList
push"CommonBackendContext
reportWarningMutableList
pop!IrElement
checkDeclarationParents,CommonBackendContext
reportIrValidationError&IrFunction
getEffectiveValueParametersIrFunction
isExportedAFunctionDescriptor
isBuiltInSuspendCoroutineUninterceptedOrReturn&Throwable
wrapWithCompilationException.BodyAndScriptBodyLoweringPass
runOnFilePostfixFileLoweringPass
lower!BodyLoweringPass
runOnFilePostfix1DeclarationContainerLoweringPass
runOnFilePostfix#ScriptLoweringPass
runOnFilePostfixAction
toMultiModuleAction"ClassLoweringPass
runOnFilePostfixKMutableProperty0
getOrPutDelegate
getOrPutIrElement
deepCopyWithVariablesIterable
atMostOneCollection
atMostOneIrExpression
asInlinableLambdaIrExpression
asInlinableIrFunction
inlineIrFunction
moveBodyToIrBody
moveIrInlinable
inlineIrDeclaration
isProperExpectIrDeclaration
isExpectIrFunction
isMethodOfAny)IrSimpleFunction
isOverridableOrOverridesIrElement
setDeclarationsParentIrBuiltIns
getKFunctionType,CommonBackendContext
createArrayOfExpression(IrFunction
copyParameterDeclarationsFromIrFunction
allParameters*IrFunction
createDispatchReceiverParameter%IrAnnotationContainer
copyAnnotations&IrClass
addSimpleDelegatingConstructor&IrFunction
copyValueParametersToStaticIrSimpleFunction
isOverridableIrClass
addFakeOverrides,IrTypeParametersContainer
copyTypeParameters"IrFunction
copyValueParametersFrom0IrMutableAnnotationContainer
copyAnnotationsFromIrType
remapTypeParameters!IrDeclaration
isMemberOfOpenClass,IrTypeParametersContainer
classIfConstructor)IrAnnotationContainer
copyAnnotationsWhenIrReturnTarget
returnTypeIrExpression
isPure&IrDeclarationContainer
simpleFunctionsIrCall
isSuspend?IrClass
createImplicitParameterDeclarationWithWrappedDescriptorIrSimpleFunction
allOverridden;IrSimpleFunction
copyAndRenameConflictingTypeParametersFrom%IrFunction
copyReceiverParametersFromIrFunctionReference
isSuspendIrSymbol
isSuspend0IrFunctionAccessExpression
passTypeArgumentsFromIrDeclarationContainer
addChild+IrFactory
createStaticFunctionWithReceiversIrDeclaration
isTopLevelIrClass
isFinalClass'IrTypeParameter
copyToWithoutSuperTypes#IrClass
createParameterDeclarations"IrTypeParameter
copySuperTypesFrom0IrTypeParametersContainer
copyTypeParametersFromIrValueParameter
copyToIrFunction
allParametersCountIrDeclaration
parentsIrDeclaration
parentsWithSelfIrClass
isLocalNotInner+IrBuilderWithScope
irImplicitCoercionToUnitIrBuilderWithScope
irCatchIrBuilderWithScope
irThrowBackendContext
createIrBuilderIrBuiltIns
createIrBuilder(ParameterDescriptor
copyAsValueParameterIrBuilderWithScope
irNotIrConstructor
callsSuper#IrField
primaryConstructorParameter'TailrecLowering
lowerTailRecursionCalls*IrValueParameterSymbol
suggestVariableName2InnerClassesSupport
primaryConstructorParameterMap"IrExpression
replaceTailExpressionIrProperty
isRealLateinit,CommonBackendContext
buildOrGetNullableFieldIrStatement
isInductionVariable;DeclarationIrBuilder
createLoopTemporaryVariableIfNecessary
Any
toLong7DeclarationIrBuilder
createTemporaryVariableIfNecessaryIrExpression
canHaveSideEffectsIrExpression
castIfNecessary*IrExpression
canChangeValueDuringExecutionIrExpression
negateIrExpression
constLongValueIrExpression
decrement/IrFunction
findBaseFunctionWithDefaultArguments IrValueParameter
isMovedReceiver'IrFunction
generateDefaultsFunctionImpl#IrFunction
generateDefaultsFunction2IrFunctionMatcherContainer
singleArgumentExtensionActionState
isValidationNeededActionState
isDumpNeededIrElement
elementNameIrFunction
isTopLevelInPackage9IrFunction
isBuiltInSuspendCoroutineUninterceptedOrReturnCompilerPhase
thenCompilerPhase
toPhaseMapAction
plusPhaserState
changeTypeCompilerPhase
invokeToplevelPhaserState
downlevelIrFile
copySavingMappings%CallableDescriptor
explicitParameters CallableDescriptor
allParametersCallableDescriptor
isSuspendString
synthesizedNameString
synthesizedStringString
cityHash64IrSymbol
kindIrBuiltIns
knownBuiltinsIrLibraryFile
createFileIrLibraryFile
deserializeFqNameByteArray
codedInputStream8IrModuleDeserializer
findModuleDeserializerForTopLevelId$DeclarationDescriptor
isExpectMember+ModuleDescriptor
isForwardDeclarationModule!DeclarationDescriptor
findPackage1DeclarationDescriptor
extractSerializedKdocString/DeclarationDescriptor
isSerializableExpectClass'CallableMemberDescriptor
findSourceFileCollection
collectForManglerName
isAnonymous.DeclarationDescriptorWithSource
findKDocStringIterable
maybeChunkedMap
describeDependencyStates.UserVisibleIrModulesSupport
getProblemModuleId'StringBuilder
appendProjectDependenciesMap
findMatchingModule6StringBuilder
appendPotentiallyConflictingDependencies:CallableMemberDescriptor
getSpecialBridgeSignatureIfExists3KotlinType
isInlineClassWithUnderlyingTypeAnyOrAnyN%CallableDescriptor
isGenericParameterType
classId2FunctionDescriptor
isJavaForKotlinOverrideProperty8CallableMemberDescriptor
isJvmDefaultOrPlatformDependent8FunctionDescriptor
containerEntityForEqualityAndHashCodeList
filterClassFiles!Builder
addDataFromCompiledModule"GenerationState
loadCompiledModuleIterable
addCompiledPartsClassFileFactory
getClassFiles Iterable
addCompiledPartsAndSortTypeApproximator
approximate2ReceiverParameterDescriptor
substituteTopLevelTypeClassBuilder
addRecordComponentChar
isValidCharacterGBaseExpressionCodegen
putReifiedOperationMarkerIfTypeIsReifiedParameter9FunctionDescriptor
isBuiltinAlwaysEnabledAssertWithLambda)ResolvedCall
replaceAssertWithAssertInner/FunctionDescriptor
isBuiltinAlwaysEnabledAssert<FunctionDescriptor
isBuiltinAlwaysEnabledAssertWithoutLambda%FieldInsnNode
isCheckAssertionsStatus-CalculatedClosure
isForBoundCallableReferenceDInstructionAdapter
generateClosureFieldsInitializationFromParameters/CalculatedClosure
isBoundReferenceReceiverField(CalculatedClosure
isForCallableReference4ClassDescriptor
isSyntheticClassForCallableReference6InstructionAdapter
loadBoundReferenceReceiverParameter:CallableMemberDescriptor
isDefinitelyNotDefaultImplsMethodClassBuilder
generateMethod FqName
topLevelClassInternalNameCollection
withVariableIndices#String
isDefinitelyFitEncodingLimit/CallableDescriptor
isJvmStaticInCompanionObjectKotlinType
asmType1KotlinType
isInlineClassTypeWithPrimitiveEqualityFqName
topLevelClassAsmType(CallableDescriptor
unwrapFrontendVersion,ExpressionCodegen
generateCallSingleArgumentString
encodedUTF8Size8CallableDescriptor
isJvmStaticInObjectOrClassOrInterfaceKtExpression
kotlinTypeCallableDescriptor
arity&ExpressionCodegen
generateCallReceiverFrameMap
useTmpVarKtExpression
asmTypeLabelNode
linkWithLabel CallableDescriptor
isJvmStaticIn/Collection
filterOutDescriptorsWithSpecialNames(MemberDescriptor
isToArrayFromCollection+CallableDescriptor
isJvmStaticInInlineClass?InstructionAdapter
generateNewInstanceDupAndPlaceBeforeStackTopFrameMap
evaluateOnce&FunctionDescriptor
isNonGenericToArray-SpecialSignatureInfo
replaceValueParametersIn9TypeSystemCommonBackendContext
extractReificationArgument0ClassDescriptor
isPossiblyUninitializedSingleton#FunctionDescriptor
isGenericToArray#CallableMemberDescriptor
getJvmName.ClassDescriptor
syntheticAccessorToSuperSuffix#ExpressionCodegen
isArraySizeAccessExpressionCodegen
isConstantOne6ExpressionCodegen
canBeSpecializedByExcludingHighBound%ExpressionCodegen
isArraySizeMinusOne4ExpressionCodegen
createIntrinsifiedRangeValueOrNull0ExpressionCodegen
createReversedRangeValueOrNull/ExpressionCodegen
createRangeValueForExpressionStackValue
unsignedTypeType
isPrimitiveIntOrCoercible7CallableMemberDescriptor
createTypeParameterWithNewNameATypeSystemCommonBackendContext
isMostPreciseContravariantArgument1TypeMappingMode
updateArgumentModeFromAnnotations+DeclarationDescriptor
suppressWildcardsMode=TypeSystemCommonBackendContext
isMostPreciseCovariantArgument7CallableDescriptor
isMethodWithDeclarationSiteWildcards*AnnotationDescriptor
suppressWildcardsModeCTypeSystemCommonBackendContext
extractTypeMappingModeFromAnnotationATypeSystemCommonBackendContext
canHaveSubtypesIgnoringNullability1FqName
isMethodWithDeclarationSiteWildcardsFqName&KotlinTypeMarker
suppressWildcardsModeAppendable
appendQuotedAppendable
appendNameValueClassBuilderFactory
wrapWith2MethodNode
findCapturedFieldAssignmentInstructionsBasicValue
functionalArgument5AbstractInsnNode
isAloadBeforeCheckParameterIsNotNullMethodNode
removeAbstractInsnNode
isAload0"AbstractInsnNode
getNextMeaningful)AbstractInsnNode
isInplaceCallStartMarker+AbstractInsnNode
isInplaceArgumentEndMarker6AbstractInsnNode
isProhibitedDuringArgumentsEvaluation,InstructionAdapter
addInplaceCallStartMarker-AbstractInsnNode
isInplaceArgumentStartMarker0InstructionAdapter
addInplaceArgumentStartMarker*InstructionAdapter
addInplaceCallEndMarkerInstructionAdapter
addMarker'AbstractInsnNode
isInplaceCallEndMarker.InstructionAdapter
addInplaceArgumentEndMarkerRangeMapping
toRangeMethodNode
fixupLVT%TryCatchBlockNodeInfo
bodyInstuctionsMethodInsnNode
operationKind"MethodInsnNode
reificationArgumentGenerationState
trackLookup7TypeSystemCommonBackendContext
doGenerateTypeProjection<TypeSystemCommonBackendContext
putTypeOfReifiedTypeParameter-TypeSystemCommonBackendContext
generateTypeOf>TypeSystemCommonBackendContext
generateNonReifiedTypeParameterOTypeSystemCommonBackendContext
doesTypeContainTypeParametersWithRecursiveBounds5TypeSystemCommonBackendContext
createTypeOfMethodBody%FunctionDescriptor
explicitParameters'IntervalMetaInfo
getMeaningfulIntervalsInterval
isMeaninglessTryCatchBlockNode
isMeaningless,DeclarationDescriptor
isInlineOrInsideInline1DeclarationDescriptor
getInlineCallSiteVisibilityMethodNode
dumpBodyCollection
lineNumberRangeAbstractInsnNode
insnOpcodeText%String
isNumberedFunctionInternalName#InstructionAdapter
emitInlineMarkerTryCatchBlockNode
textMethodNode
nodeTextString
isIntegerAbstractInsnNode
insnText#MethodNode
preprocessSuspendMarkersMethodNode
inlineBridgeSLRUMap
getOrPutFrame
getSourceType
isIntLike*MethodNode
allSuspensionPointsAreTailCallsAbstractInsnNode
nextMeaningful*AbstractInsnNode
isInvisibleInDebugVarInsn$AbstractInsnNode
skipUntilMeaningfulAbstractInsnNode
isReturnUnit&MethodNode
addCoroutineSuspendedChecks BasicValue
toFromSuspensionPoint&AbstractInsnNode
isPopBeforeReturnUnit*FunctionDescriptor
isInvokeSuspendOfLambda9FunctionDescriptor
isLocalSuspendFunctionNotSuspendLambda2InstructionAdapter
generateCoroutineSuspendedCheckModuleDescriptor
getResultMethod
getImplForOpenMethod8ResolvedCall
replaceSuspensionFunctionWithRealDescriptor.InstructionAdapter
invokeInvokeSuspendWithUnitFqName
identifiedChild/InstructionAdapter
loadCoroutineSuspendedMarker#FunctionDescriptor
createCustomCopy5CallableDescriptor
isSuspendFunctionNotSuspensionViewQFunctionDescriptor
originalReturnTypeOfSuspendFunctionReturningUnboxedInlineClassString
isCoroutineSuperClass1FunctionDescriptor
isSuspendLambdaOrLocalFunction1FunctionDescriptor
getOriginalSuspendFunctionView<CallableDescriptor
unwrapInitialDescriptorForSuspendFunction#InstructionAdapter
invokeGetContextFFunctionDescriptor
isBuiltInSuspendCoroutineUninterceptedOrReturnInJvm"ResolvedCall
asMutableResolvedCall@FunctionDescriptor
getContinuationParameterTypeOfSuspendFunctionResolvedCall
isSuspensionPoint*NewResolvedCallImpl
asDummyOldResolvedCall)FunctionDescriptor
allValueParameterTypes(LocalVariableNode
extendRecordIfPossibleType
fieldNameForVarMethodNode
nodeTextWithLiveness3InstructionAdapter
generateResumeWithExceptionCheck6InstructionAdapter
generateContinuationConstructorCallList
containsType
normalize%InstructionAdapter
fakeAlwaysTrueIfeq"InstructionAdapter
fixStackAndJumpAbstractInsnNode
isPseudoInstructionAdapter
asNotNullInstructionAdapter
storeNotNull&InstructionAdapter
fakeAlwaysFalseIfeqInsnList
removeNodeGetNextInsnList
replaceNodeGetNext$AbstractInsnNode
isPrimitiveUnboxing6AbstractInsnNode
isNextMethodCallOfProgressionIterator$AbstractInsnNode
isInlineClassBoxing'MethodInsnNode
isBoxingMethodDescriptor&AbstractInsnNode
isInlineClassUnboxing2MethodInsnNode
isInlineClassBoxingMethodDescriptor2AbstractInsnNode
isIteratorMethodCallOfProgressionAbstractInsnNode
isBoxing(AbstractInsnNode
isJavaLangClassUnboxing;AbstractInsnNode
isAreEqualIntrinsicForSameTypedBoxedValues"AbstractInsnNode
isPrimitiveBoxing+AbstractInsnNode
isCoroutinePrimitiveBoxingAbstractInsnNode
isUnboxing$AbstractInsnNode
isAreEqualIntrinsic&AbstractInsnNode
isJavaLangClassBoxing%AbstractInsnNode
isIteratorMethodCall4MethodInsnNode
isInlineClassUnboxingMethodDescriptor.AbstractInsnNode
isJavaLangComparableCompareToEAbstractInsnNode
isJavaLangComparableCompareToForSameTypedBoxedValues!AbstractInsnNode
isMethodInsnWith*AbstractInsnNode
isPrimitiveTypeConversionAbstractInsnNode
isUnitInstanceAbstractInsnNode
isPopAbstractInsnNode
isPurePushAbstractInsnNode
findNextOrNull%MethodNode
removeUnusedLocalVariablesAbstractInsnNode
takeInsnIfMethodNode
remapLocalVariablesMethodNode
prepareForEmitting%VarInsnNode
isSize2LoadStoreOperationAbstractInsnNode
intConstantAbstractInsnNode
debugText!AbstractInsnNode
isStoreOperation!MethodNode
removeEmptyCatchBlocksInsnList
asSequenceAbstractInsnNode
isInsn AbstractInsnNode
isLoadOperation#MethodNode
stripOptimizationMarkersAbstractInsnNode
hasOpcodeAbstractInsnNode
isBranchOrCall#AbstractInsnNode
findPreviousOrNullMethodNode
updateMaxStackInsnList
removeAllAbstractInsnNode
isMeaningful&TryCatchBlockNode
isDefaultHandlerNodeMethodNode
debugStringFrame
peekWordsToFrame
peekWords
Frame
peek	Frame
topTypeInsnNode
getObjectTypeType
toFixStackValueBasicValue
getNullabilityAbstractInsnNode
isCheckNotNull!AbstractInsnNode
isThrowIntrinsic0AbstractInsnNode
isCheckExpressionValueIsNotNull(AbstractInsnNode
isInstanceOfOrNullCheck*AbstractInsnNode
isCheckParameterIsNotNull,MethodNode
usesLocalExceptParameterNullCheck*AbstractInsnNode
isCheckNotNullWithMessage InsnList
popReferenceValueBefore*AbstractInsnNode
isParameterCheckedForNullProjectContext
withModuleGlobalContext
withProjectModuleDescriptor
kotlinLibrary!KlibModuleOrigin
isInteropLibrary!ModuleDescriptor
klibModuleOrigin#ModuleDescriptorImpl
isStdlibModule"SearchPathResolver
libraryResolver:DeclarationDescriptor
checkSinceKotlinVersionAccessibility6DeclarationDescriptor
loadWasExperimentalMarkerClasses.DeclarationDescriptor
getOwnSinceKotlinVersion2StorageComponentContainer
configureDefaultCheckers'FunctionDescriptor
asImportedFromObject'PropertyDescriptor
asImportedFromObject5ModuleDescriptor
hasImplicitIntegerCoercionCapability"PropertyDescriptor
hasBackingFieldBindingTrace
addElementToSliceMClassifierDescriptor
getCallableReceiverDescriptorRetainingTypeAliasReference4KtCallableDeclaration
createTypeBindingForReturnType!KtTypeReference
createTypeBinding+CallableMemberDescriptor
isEffectivelyFinal9FunctionDescriptor
isFunctionForExpectTypeFromCastFeature StatementFilter
filterStatements(StatementFilter
getLastStatementInABlock=KotlinType
containsIncorrectExplicitDefinitelyNonNullableType,DeclarationDescriptor
hasJvmStaticAnnotation"AnnotationDescriptor
argumentValue(KtExpression
textForRuntimeAssertionInfo;CallableMemberDescriptor
isInsideCompanionObjectOfInterface=CallableMemberDescriptor
isCompiledToJvmDefaultWithProperMode!KtModifierList
findOneOfModifiersJvmTarget
areRecordsAllowed'TypeWithEnhancement
enhancementFromJava KotlinType
enhancementFromKotlinKotlinType
mustNotBeNull$Annotated
findJvmSyntheticAnnotationBCallableMemberDescriptor
checkIsImplementationCompiledToJvmDefault,DeclarationDescriptor
findJvmFieldAnnotation<DeclarationDescriptor
hasJvmDefaultNoCompatibilityAnnotation0DeclarationDescriptor
findSynchronizedAnnotation/DeclarationDescriptor
hasJvmSyntheticAnnotation0DeclarationDescriptor
findJvmOverloadsAnnotation:DeclarationDescriptor
isCallableMemberCompiledToJvmDefault7CallableMemberDescriptor
hasPlatformDependentAnnotation0CallableMemberDescriptor
hasJvmDefaultAnnotation/CallableMemberDescriptor
isCompiledToJvmDefault>DeclarationDescriptor
hasJvmDefaultWithCompatibilityAnnotationClassDescriptor
isJvmRecord+DeclarationDescriptor
hasJvmFieldAnnotation,DeclarationDescriptor
findStrictfpAnnotationMethod
parametersDescriptor)Collection
containsAnyNotTrivialSignature"FunctionDescriptor
containsVarargs)FunctionDescriptor
hasNotTrivialSignatureKtFile
fileScopesCustomizer+ModuleDescriptor
findPackageFragmentForFile,NewCommonSuperTypeCalculator
commonSuperType7KotlinType
isApplicableExpectedTypeForCallableReference#Annotations
extractDslMarkerFqNames AnnotationDescriptor
isDslMarker%NewConstraintMismatch
upperKotlinType%NewConstraintMismatch
lowerKotlinType'ResolvedCall
getFirstArgumentExpressionCall
hasUnresolvedArguments,KtCallElement
getValueArgumentsInParenthesesCall
getResolvedCallWithAssert"Call
getValueArgumentListOrElement!ResolvedCall
hasUnmappedArguments-KotlinCall
extractCallableReferenceExpressionPsiElement
isCallableReferenceCall
isSafeCall!ResolvedCall
usesDefaultArgumentsKtElement
getParentResolvedCall"ResolvedCall
hasUnmappedParameters,ResolvedCall
hasTypeMismatchErrorOnParameter#Call
getValueArgumentsInParentheses.KtExpression
getPropertyResolvedCallWithAssert$NewTypeSubstitutor
toOldSubstitution(PsiElement
asCallableReferenceExpressionKtElement
getCallWithAssert%ResolvedCall
noErrorsInValueArguments0ResolvedCallImpl
shouldBeSubstituteWithStubTypes.KtExpression
getFunctionResolvedCallWithAssertCall
isCallableReference(BindingTrace
reportTrailingLambdaErrorOr,KtLambdaExpression
isTrailingLambdaOnNewLIneList
filterArgsInParentheses'Call
extractCallableReferenceExpression#KtElement
getResolvedCallWithAssert"ResolvedCall
getReceiverExpressionKtElement
getParentCallPsiElement
isFakePsiElementResolvedCall
allArgumentsMapped.KtExpression
getVariableResolvedCallWithAssertKtElement
isFakeElement%KtNamedDeclaration
isSingleUnderscorePsiElement
reportOnElementPSIKotlinCall
replaceArguments(CallableDescriptor
hasInferredReturnType;CallableDescriptor
hasReturnTypeDependentOnUninferredParamsList
replaceTypes%ResolvedCall
getImplicitReceiverValue)CandidateApplicability
toResolutionStatus!ResolvedCall
getImplicitReceivers-ResolvedCall
getDispatchReceiverWithSmartCastResolvedCall
hasBothReceivers(ResolvedCall
hasThisOrNoDispatchReceiver"ResolvedCall
hasInferredReturnType)KtCallElement
getArgumentByParameterIndexResolvedCall
isNewNotCompleted$ResolvedCall
hasSafeNullableReceiver%ResolvedCall
getExplicitReceiverValue"CallableDescriptor
isNotSimpleCall+ResolvedCall
makeNullableTypeIfSafeReceiver1CallableDescriptor
isLowPriorityFromStdlibJre7Or8#CallResolutionResult
resultCallAtomResolvedLambdaAtom
unwrap ResolvedCallAtom
freshReturnTypeKotlinCall
checkCallInvariants0SimpleKotlinCallArgument
checkReceiverInvariantsResolvedCall
isReallySuccess8ResolutionCandidate
markCandidateForCompatibilityResolve KotlinDiagnosticsHolder
addErrorGCallableReferencesCandidateFactory
markCandidateForCompatibilityResolve.KotlinDiagnosticsHolder
addDiagnosticIfNotNull"ConstraintSystemError
asDiagnostic*KotlinCallDiagnostic
constraintSystemErrorCollection
asDiagnosticsList
filterErrorDiagnosticsDeclarationDescriptor
isDynamic KotlinCallArgument
psiExpression2KotlinCallArgument
setResultDataFlowInfoIfRelevant"KotlinCallArgument
psiCallArgument8ImplicitScopeTower
getExtensionInvokeCandidateDescriptor6ResolutionContext
transformToReceiverWithSmartCastInfo&BasicCallResolutionContext
isSuperCallCall
isCallWithSuperReceiver(CandidateApplicability
shouldStopResolve CandidateApplicability
isSuccessKotlinCall
psiKotlinCall#KotlinCall
getResolvedPsiKotlinCall(ReceiverKotlinCallArgument
receiverValueCandidate
forceResolution CallableDescriptor
isSynthesized<CandidateWithBoundDispatchReceiver
requiresExtensionReceiver%CandidateApplicability
isInapplicable4ErrorCandidateContext
getWrongResolutionToClassifier&ErrorCandidateContext
asClassifierCall-KotlinType
getClassifierFromMeAndSuperclasses3ResolutionScope
getContributedVariablesAndIntercept6ResolutionScope
getContributedFunctionsAndConstructorsKotlinType
getInnerConstructors+ClassDescriptor
canHaveCallableConstructors3ResolutionScope
getContributedFunctionsAndIntercept>ResolutionScope
getContributedObjectVariablesIncludeDeprecated-ResolutionScope
getContributedObjectVariables/TypeAliasDescriptor
canHaveCallableConstructors ResolvedCall
createFlatSignature1SimpleConstraintSystem
isSignatureNotLessSpecific:SimpleConstraintSystem
isValueParameterTypeNotLessSpecific&Companion
createFromCallableDescriptor"Companion
createFromReflectionType*ValueParameterDescriptor
argumentValueType,Companion
createForPossiblyShadowedExtension FqName
isBuiltInCoroutineContext(KotlinType
isRestrictsSuspensionReceiver,PropertyDescriptor
isBuiltInCoroutineContext4HierarchicalScope
isScopeForDefaultParameterValuesOf,FunctionDescriptor
isBuiltInCoroutineContext FunctionDescriptor
isOperatorMod+Receiver
classDescriptorForImplicitReceiver#CallChecker
isComputingDeferredType.ConstraintSystemBuilder
isConstraintCompatible1ConstraintSystemBuilder
addConstraintIfCompatible8ConstraintSystemBuilder
addSubtypeConstraintIfCompatible5ConstraintSystemBuilder
isSubtypeConstraintCompatible9ConstraintSystemBuilder
addEqualityConstraintIfCompatibleBoundKind
reverseKotlinType
getNestedArguments%ConstraintSystem
filterConstraintsOut"KotlinType
getNestedTypeParameters'ConstraintSystem
getNestedTypeVariables%ConstraintSystem
descriptorToVariable)ConstraintStorage
buildCurrentSubstitutorGConstraintStorage
buildNotFixedVariablesToNonSubtypableTypesSubstitutorOTypeSystemInferenceExtensionContext
hasRecursiveTypeParametersWithGivenSelfTypeMTypeSystemInferenceExtensionContext
extractTypeForGivenRecursiveTypeParameter<TypeSystemInferenceExtensionContext
isRecursiveTypeParameter3ConstraintStorage
buildAbstractResultingSubstitutor8NewConstraintSystemImpl
registerTypeVariableIfNotPresentCall
toHandle,ConstraintSystemBuilderImpl
incorporateBound,ConstraintSystemBuilderImpl
generateNewBound3ConstraintSystemBuilderImpl
addConstraintFromBoundsConstraintPosition
derivedFrom:ConstraintPosition
getValidityConstraintForConstituentType+ConstraintStorage
buildResultingSubstitutor:PostponedArgumentsAnalyzerContext
addSubsystemFromArgumentCallableDescriptor
substitute0CallableDescriptor
substituteAndApproximateTypesTypeSubstitutor
substitute&CallableDescriptor
returnTypeOrNothing%NewConstraintError
transformToWarning!Constraint
isExpectedTypePosition:OverloadResolutionResultsImpl
isResultWithBuilderInference5OverloadResolutionResultsImpl
getBuilderInferenceDataKotlinType
containsTypeTemplateConstraint
replaceType#TypeConstructor
typeForTypeVariableITypeSystemInferenceExtensionContext
extractProjectionsForAllCapturedTypes8TypeSystemInferenceExtensionContext
containsTypeVariable;TypeSystemInferenceExtensionContext
isProperTypeForFixation6TypeSystemInferenceExtensionContext
getNestedArgumentsTypeSubstitutor
composeWith$ResolutionCandidate
isErrorCandidate"KotlinCallArgument
getExpectedType(KotlinCallArgument
isArrayOrArrayLiteral;KotlinCallArgument
isArrayAssignedAsNamedArgumentInFunction+ReceiverValueWithSmartCastInfo
unstableType(ValueParameterDescriptor
hasDefaultValue/ValueParameterDescriptor
checkExpectedParameterJValueParameterDescriptor
isActualParameterWithCorrespondingExpectedDefault@ValueParameterDescriptor
isActualParameterWithAnyExpectedDefaultParameterDescriptor
isVararg!ValueParameterDescriptor
isVararg)ReceiverValueWithSmartCastInfo
stableType=KotlinCallArgument
isArrayAssignedAsNamedArgumentInAnnotation)ResolutionCandidate
resolveKotlinArgument:ResolutionCandidate
checkUnsafeImplicitInvokeAfterSafeCall'ResolutionCandidate
prepareExpectedType3ResolutionCandidate
shouldRunConversionForConstantsAResolutionCandidate
getReceiverArgumentWithConstraintIfCompatible/ConstraintSystemOperation
addReceiverConstraint3CallableReferenceResolutionCandidate
addConstraints.ConstraintSystemOperation
addLhsTypeConstraintAny
requireIs,ResolvedLambdaAtom
transformToResolvedLambdaNewConstraintSystem
builtIns ConstraintSystemBuilder
builtIns?DeclarationDescriptorWithVisibility
isInvisibleFromOtherModules#PropertyDescriptor
hasDefaultGetterVariableDescriptor
variableKind,PropertyDescriptor
isDeclaredInAnotherModulePropertyDescriptor
propertyKind'KtExpression
getKotlinTypeForComparison3KtExpression
getKotlinTypeWithPossibleSmartCastToFPKotlinType
immanentNullabilityDeclarationChecker
check$Call
hasUnresolvedArgumentsRecursiveImmutableMultimap
put.MemberDescriptor
isInlineOnlyPrivateInBytecode0CallableMemberDescriptor
hasInlineOnlyAnnotation(MemberDescriptor
isEffectivelyInlineOnly'MemberDescriptor
isPrivateInlineSuspend$MemberDescriptor
isInlineWithReifiedMemberDescriptor
isInlineOnly-CallableMemberDescriptor
hasReifiedParametersCReceiverValueWithSmartCastInfo
prepareReceiverRegardingCaptureTypes5DeclarationDescriptor
canBeResolvedWithoutDeprecation.HierarchicalScope
findFirstFromImportingScopes'HierarchicalScope
processForMeAndParentHierarchicalScope
parents:HierarchicalScope
findFirstClassifierWithDeprecationStatusHierarchicalScope
findFunction"HierarchicalScope
collectFunctions#LexicalScope
getDeclarationsByLabel(HierarchicalScope
collectFromMeAndParent(LexicalScope
createScopeForDestructuring!HierarchicalScope
parentsWithSelf HierarchicalScope
findClassifier'MemberScope
memberScopeAsImportingScopeLexicalScope
addImportingScopes"HierarchicalScope
collectVariablesHierarchicalScope
findVariable#LexicalScope
replaceImportingScopesHierarchicalScope
takeSnapshotLexicalScope
findLocalVariableLexicalScope
addImportingScope*LexicalScope
getImplicitReceiversHierarchyHierarchicalScope
findPackage,HierarchicalScope
collectDescriptorsFiltered+HierarchicalScope
collectAllFromMeAndParent*HierarchicalScope
findFirstFromMeAndParentImportingScope
withParent/HierarchicalScope
collectAllFromImportingScopesQualifier
expressionKtPureElement
toSourceElementSourceElement
getPsi&PsiElement
isUsageAsAnnotationOrImport#DeclarationDescriptor
isResultClassKotlinType
isResultType*LanguageVersionSettings
explicitApiEnabled+AnnotationDescriptor
isKotlinTestAnnotationDiagnostic
nonApplicable&ConstantValue
isStandaloneOnlyConstant,CompileTimeConstant
isStandaloneOnlyConstant<DescriptorBasedDeprecationInfo
deprecatedByOverriddenMessageJDescriptorBasedDeprecationInfo
deprecatedByAnnotationReplaceWithExpression$AnnotationDescriptor
getSinceVersionKtFile
isCommonSourceIterable
applyFilter$BindingContext
getDataFlowInfoBefore KtExpression
getReferenceTargets$KtReturnExpression
getTargetFunction.KtReturnExpression
getTargetFunctionDescriptor&KtTypeElement
getAbbreviatedTypeOrType*KtElement
getParentOfTypeCodeFragmentAwareBindingTrace
recordScope#BindingContext
getDataFlowInfoAfter(KtTypeReference
getAbbreviatedTypeOrTypeKtExpression
isUsedAsStatement$ResolutionContext
recordDataFlowInfoKtExpression
isUsedAsExpression#KtExpression
isUsedAsResultOfLambda*MemberDescriptor
findAnyActualsForExpected/MemberDescriptor
findCompatibleExpectsForActual1MemberDescriptor
findCompatibleActualsForExpected!DeclarationDescriptor
findExpects!DeclarationDescriptor
findActuals0DeclarationDescriptorWithSource
couldHaveASource:DescriptorRendererOptions
defaultDecompilerRendererOptions!ClassDescriptor
relativeClassNameClassDescriptor
descPsiMember
relativeClassNameClsStubBuilderContext
childName
ref!MessageLite
annotatedCallableKind
FqName
ref!ModuleDescriptor
hasJdkCapabilityModuleDescriptor
moduleInfoModuleInfo
flattenModuleInfo
getCapabilityModuleInfo
unwrapPlatform;StorageComponentContainer
configureCommonSpecificComponents<StorageComponentContainer
configureStandardResolveComponents9StorageComponentContainer
configureIncrementalCompilation@StorageComponentContainer
configurePlatformIndependentComponents)StorageComponentContainer
configureModule9StorageComponentContainer
configureJavaSpecificComponents3ComponentProvider
initJvmBuiltInsForTopDownAnalysis:StorageComponentContainer
initializeJavaSpecificComponentsJvmBuiltIns
initializeList
toExpandedRecordsListModule
serializeToByteArray'InputStream
readBuiltinsPackageFragment$ExtendableMessage
getExtensionOrNullProperty
returnTypeTypeParameter
upperBoundsTypeAlias
expandedTypeProperty
hasReceiverType
abbreviatedTypeClass
supertypesFunction
returnTypeTypeAlias
underlyingType ValueParameter
varargElementTypeProperty
receiverTypeFunction
hasReceiverType
outerTypeExpression
isInstanceTypeFunction
receiverTypeClass
inlineClassUnderlyingTypeType
flexibleUpperBoundValueParameter
typeArgument
type%TargetPlatform
presentableDescription!TargetPlatform
subplatformsOfType&TargetPlatform
oldFashionedDescriptionTargetPlatform
hasTargetPlatform
isJsSimplePlatform
toTargetPlatformTargetPlatform
isMultiPlatform SimplePlatform
serializeToStringTargetPlatform
isCommon!TargetPlatform
deprecatedIsNativeTargetPlatform
isJvm7NativePlatformUnspecifiedTarget
legacySerializeToStringTargetPlatform
isNativeName
renderFqName
renderFqNameUnsafe
renderName
shouldBeEscaped*StorageComponentContainer
registerInstance!StorageComponentContainer
resolve+StorageComponentContainer
registerSingleton)StorageComponentContainer
resolveMultipleMethod
bindToMethodMember
bindArgumentsClass
bindToConstructor#StorageComponentContainer
useImplIfComponentProvider
getComponentProvider
getValue*StorageComponentContainer
useClashResolver%StorageComponentContainer
useInstance!StorageComponentContainer
useImplComponentProvider
tryGetService.StorageComponentContainer
useInstanceIfNotNullComponentProvider
getServiceClass
getInfoESValue
toDataFlowValue!MutableContextInfo
toDataFlowInfoESEffect
isReturnsESType
isBooleanKotlinType
toESTypeESValue
isWildcardESExpression
isFalseESExpression
isTrueESExpression
andESExpression
or'DeclarationDescriptor
isFromContractDsl4DeclarationDescriptor
isCallsInPlaceEffectDescriptor,ResolvedCall
firstArgumentAsExpressionOrNull0DeclarationDescriptor
isReturnsNotNullDescriptor(DeclarationDescriptor
isEqualsDescriptor*DeclarationDescriptor
isInvocationKindEnum/DeclarationDescriptor
isReturnsEffectDescriptor)DeclarationDescriptor
equalsDslDescriptor1DeclarationDescriptor
isReturnsWildcardDescriptor.DeclarationDescriptor
isContractCallDescriptor(DeclarationDescriptor
isEffectDescriptor-DeclarationDescriptor
isImpliesCallDescriptorEventOccurrencesRange
isInPlace)EventOccurrencesRange
isDefinitelyVisited$EventOccurrencesRange
canBeRevisited+FunctionDescriptor
hasJavaOriginInHierarchy%DescriptorVisibility
isVisibleOutside)ResolvedCall
isResolvedWithSamConversions"CallableDescriptor
isSuspendLambda/ValueParameterDescriptor
hasSuspendFunctionType9ValueParameterDescriptor
hasFunctionOrSuspendFunctionTypeClassKind
isClassClassKind
isInterfaceClassKind
isEnumClass5TypeSystemCommonBackendContext
valueClassLoweringKind3TypeCheckerProviderContext
createTypeCheckerContext"PropertyAccessorDescriptor
hasBody(DeclarationDescriptor
referencedPropertyModuleDescriptor
isNativeStdlib'LighterASTNode
nonFillerLastChildOrSelfLighterASTNode
isFiller(LighterASTNode
nonFillerFirstChildOrSelf'KtPsiDiagnostic
checkPsiTypeConsistencyDiagnosticReporter
reportOn/KtDiagnosticFactoryForDeprecation
chooseFactory!BindingTrace
reportDiagnosticOnceEResolutionContext
reportTypeMismatchDueToScalaLikeNamedFunctionSyntaxDiagnosticSink
reportFromPlugin9BindingTrace
reportDiagnosticOnceWrtDiagnosticFactoryList7ResolutionContext
reportTypeMismatchDueToTypeProjection+DescriptorRenderer
withAnnotationsWhitelist DiagnosticReporter
deduplicating9ClassifierDescriptorWithTypeParameters
renderKindWithNameClassDescriptor
renderKindCompanion
fromDiagnosticCompanion
parameters)RenderingContext
adaptiveClassifierPolicyKtFile
fileClassInfo3DeclarationDescriptor
isTopLevelInJvmMultifileClass&FqName
internalNameWithoutInnerClassesKtFile
javaFileFacadeFqName+KtDeclaration
isInsideJvmMultifileClassFile/JvmFileClassesProvider
getFileClassInternalNameKtSourceElement
hasVar1FlyweightCapableTreeStructure
referenceExpression1FlyweightCapableTreeStructure
lastChildExpressionLighterASTNode
isExpression0FlyweightCapableTreeStructure
findExpressionDeep0FlyweightCapableTreeStructure
operationReference1FlyweightCapableTreeStructure
findFirstDescendant1FlyweightCapableTreeStructure
traverseDescendants'FlyweightCapableTreeStructure
ifKeyword$FlyweightCapableTreeStructure
getter.FlyweightCapableTreeStructure
companionKeyword)FlyweightCapableTreeStructure
initKeyword*FlyweightCapableTreeStructure
fieldKeyword.FlyweightCapableTreeStructure
getChildrenArray,FlyweightCapableTreeStructure
supertypesList(FlyweightCapableTreeStructure
safeAccess(FlyweightCapableTreeStructure
firstChild3FlyweightCapableTreeStructure
findDescendantByTypes&FlyweightCapableTreeStructure
userType3FlyweightCapableTreeStructure
receiverTypeReference.FlyweightCapableTreeStructure
overrideModifier0FlyweightCapableTreeStructure
constructorKeyword)FlyweightCapableTreeStructure
elseKeyword0FlyweightCapableTreeStructure
valueParameterList%KtSourceElement
hasPrimaryConstructor*FlyweightCapableTreeStructure
getAncestors'FlyweightCapableTreeStructure
lastChild1FlyweightCapableTreeStructure
findLastChildByTypeKtSourceElement
hasValOrVarCFlyweightCapableTreeStructure
unwrapParenthesesLabelsAndAnnotations2FlyweightCapableTreeStructure
findDescendantByType)FlyweightCapableTreeStructure
annotations0FlyweightCapableTreeStructure
visibilityModifier0FlyweightCapableTreeStructure
primaryConstructor*FlyweightCapableTreeStructure
modifierList+FlyweightCapableTreeStructure
typeReference,FlyweightCapableTreeStructure
inlineModifier&FlyweightCapableTreeStructure
selector$FlyweightCapableTreeStructure
setter6FlyweightCapableTreeStructure
collectDescendantsOfType'FlyweightCapableTreeStructure
byKeyword+FlyweightCapableTreeStructure
returnKeyword+FlyweightCapableTreeStructure
objectKeyword*FlyweightCapableTreeStructure
defaultValue2FlyweightCapableTreeStructure
firstChildExpression,FlyweightCapableTreeStructure
nameIdentifier.FlyweightCapableTreeStructure
modalityModifier0FlyweightCapableTreeStructure
typeParametersList5FlyweightCapableTreeStructure
accessorNamePlaceholder.FlyweightCapableTreeStructure
rightParenthesis.FlyweightCapableTreeStructure
findParentOfType-FlyweightCapableTreeStructure
valOrVarKeyword)FlyweightCapableTreeStructure
dotOperator)FlyweightCapableTreeStructure
whenKeyword-FlyweightCapableTreeStructure
findChildByTypeDescriptorRenderer
asRenderer5CompilerConfiguration
configureSourceRootsFromSources(CompilerConfiguration
configureBaseRoots&K2JVMCompilerArguments
classpathAsList(K2JVMCompilerArguments
destinationAsFileCollection
filterClassesToFile
md5Path
isParentOf7ClasspathSnapshot
removeDuplicateAndInaccessibleClasses/ClasspathSnapshot
getNonDuplicateClassSnapshotsCollection
toProgramSymbolSet ProgramSymbolSet
toChangesEitherProgramSymbol
toLookupSymbol%AccessibleClassSnapshot
getSupertypesByteArray
hashToLongPackageFragment
fqNamePackageFragment
isEmptyMap
missingMetadataNameResolver
getNameNameResolver
getClassId!MessageCollector
reportUnexpected!MessageCollector
reportFromDaemonCompileServiceSession
toAsync CompileServiceSessionAsync
toRMI!CompilerServicesFacadeBase
report&CompilerServicesFacadeBaseAsync
reportProfiler
withMeasureBlockingCallResult
toRMIReplStateFacadeAsync
toRMICompileService
toClientCompilationResultsAsync
toRMICompilationResults
toClientDaemonReportingTargets
report%CompilerServicesFacadeBaseAsync
toRMIProfiler
withMeasureThreadMXBean
threadUserTimeThreadMXBean
threadCpuTimeReplStateFacade
toClientCallResult
toClientString
orDefaultString
trimQuotesIterable
distinctStringsDigestIterable
findWithTransform#DaemonOptions
runFilesPathOrDefault#DaemonJVMOptions
memorywiseFitsIntoIterable
filterExtractPropsString
memToBytes(DaemonJVMOptions
updateMemoryUpperBounds#CompilerServicesFacadeBase
toClientCompileServiceAsync
toRMIFile
md5Digest(CompilerConfiguration
configureScripting4KotlinCompilation
runtimeDependencyConfigurationNameString
removeJsCompilerSuffixKotlinJsCompilerType
lowerNameKotlinGradleFragment
path'KotlinGradleFragment
withRefinesClosure#KotlinGradleFragment
refinesClosure'KotlinGradleFragment
containingVariants IdeaKotlinModuleCoordinates
path6IdeaKotlinResolvedBinaryDependency
isDocumentationType0IdeaKotlinResolvedBinaryDependency
isSourcesType2IdeaKotlinResolvedBinaryDependency
isClasspathType"IdeaKotlinFragmentCoordinates
pathIdeaKotlinPlatform
isNativeCompanion
nativeIdeaKotlinPlatform
jsOrNullIdeaKotlinPlatform
jvmOrNullIdeaKotlinPlatform
isJsCompanion
wasmIdeaKotlinPlatform
isWasmIdeaKotlinPlatform
isJvmCompanion
jsCompanion
jvmIdeaKotlinPlatform
nativeOrNull!IdeaKotlinModule
moduleClassifierIdeaKotlinModule
nameIdeaKotlinFragment
name(K2JVMCompilerArguments
fillDefaultValues<KotlinTargetContainerWithJsPresetFunctions
getExistingTarget5KotlinTargetContainerWithJsPresetFunctions
jsInternal'K2JSCompilerArguments
fillDefaultValuesProject
createKotlinExtensionProject
pm20ExtensionProject
multiplatformExtensionProject
kotlinExtensionOrNullProject
kotlinExtensionProject
topLevelExtension$Project
multiplatformExtensionOrNullProject
topLevelExtensionOrNull!KotlinTarget
isProducedFromPreset3KotlinTargetsContainerWithPresets
configureOrCreate2KotlinCommonToolOptions
copyFreeCompilerArgsToArgs-K2MetadataCompilerArguments
fillDefaultValues"K2JSDceArguments
fillDefaultValues/ComponentIdentifier
ideaKotlinBinaryCoordinates!Variant
createVariantArtifactView%ArtifactResolution
createArtifactView3PlatformFragment
createPlatformFragmentArtifactView6IdeaKotlinProjectModelBuildingContext
IdeaKotlinModule7Project
locateOrRegisterBuildIdeaKotlinProjectModelTask=IdeaKotlinProjectModelBuildingContext
buildIdeaKotlinFragment<IdeaKotlinProjectModelBuildingContext
buildIdeaKotlinVariant8IdeaKotlinProjectModelBuildingContext
IdeaKotlinFragmentCompanion
default!IdeaKotlinDependencyResolver
plusProject
resolveKlibQKotlinPm20ProjectExtension
configureIdeaKotlinSpecialPlatformDependencyResolutionFragmentConstraint
notFragmentConstraint
or<IdeaKotlinProjectModelBuildingContext
IdeaKotlinProjectModelFragmentConstraint
and8IdeaKotlinProjectModelBuildingContext
IdeaKotlinPlatform'IdeaKotlinDependencyResolver
withEffect$IdeaKotlinDependencyTransformer
plus,IdeaKotlinDependencyResolver
withTransformerKotlinTopLevelExtension
project8KotlinPm20ProjectExtension
ideaKotlinProjectModelBuilder+KotlinGradleModule
createExternalJvmVariant+KotlinGradleVariantInternal
compilationDataKotlinGradleFragment
external!Task
isBuildCacheEnabledForKotlin Task
cacheOnlyIfEnabledForKotlin,TaskWithLocalState
cleanOutputsAndLocalStateTaskProvider
dependsOnProject
registerTaskProject
locateOrRegisterTaskProject
locateTask*ListProperty
toSingleCompilerPluginOptions Provider
toCompilerPluginOptionsAny
isTask
outputFilesProvider&ObjectFactory
setPropertyWithLazyValueProject
filesProvider(ObjectFactory
providerWithLazyConventionProvider
getValueProject
newFilePropertyProject
setProperty"ObjectFactory
setPropertyWithValue%ObjectFactory
propertyWithNewInstanceProject
optionalProvider$ObjectFactory
propertyWithConventionProject
newProperty#Property
chainedFinalizeValueOnReadTask
thisTaskProviderProject
klibModuleNameLogger
lifecycleWithDurationThrowable
stackTraceAsString)AbstractArchiveTask
archivePathCompatible,Any
castIsolatedKotlinPluginClassLoaderAware/Configuration
addGradlePluginMetadataAttributesProject
addExtendsFromRelationIterable
toPathsArray Iterable
pathsAsStringRelativeTo$String
fileExtensionCasePermutationsFile
relativeOrCanonical"File
canonicalPathWithoutExtensionFile
relativeToRootFile
listFilesOrEmptyString
asValidTaskNameString
clearAnsiColorString
decamelizeAny
toSetOrEmptyPath
topRealPathAny
loadPropertyFromResourcesProject
probeRemoteFileLength7Project
runProjectConfigurationHealthCheckWhenEvaluated*Project
runProjectConfigurationHealthCheck(Task
notCompatibleWithConfigurationCacheProject
getSystemPropertyZipFile
listDescendants!ExtraPropertiesExtension
getOrPut#Project
getOrPutRootProjectProperty@Configuration
setupAsLocalTargetSpecificConfigurationIfSupportedAny
addExtensionAny
addConventionAny
getConventionAny
executeClosureProject
usageByName4KotlinCompilation
deprecatedCompileConfigurationNameKotlinTarget
testTaskNameProject
categoryByName#Project
commonKotlinPluginClasspathConfiguration
usesPlatformOfCKotlinCompilationToRunnableFiles
deprecatedRuntimeConfigurationName:Configuration
setJavaTargetEnvironmentAttributeIfSupported)KotlinCompilation
pluginConfigurationName>Project
runMissingKotlinTargetsProjectConfigurationHealthCheckMProject
runDisabledCInteropCommonizationOnHmppProjectConfigurationHealthCheck>Project
runMissingAndroidTargetProjectConfigurationHealthCheck&Project
registerVariantImplementationsProject
whenEvaluatedProject
forEachVariant%KotlinCompilationOutput
addClassesDir BaseVariant
forEachJavaSourceDirSourceSet
clearJavaSrcDirs"BaseVariant
forEachKotlinSourceSetProject
runOnceAfterEvaluated AndroidSourceSet
kotlinSourceSet&AndroidSourceSet
kotlinSourceSetOrNullProject
kotlinToolingVersionProject
getKotlinPluginVersionProject
ideaImportDependsOn#Project
prepareKotlinIdeaImportTask&KotlinTargetComponent
findUsageContextKotlinTarget
disambiguateName BasicKotlinModule
fragmentByNameDependency
toModuleDependency/CompilationDetails
associateCompilationsClosure2KotlinCompilation
kotlinSourceSetsIncludingDefaultKotlinCompilation
isMainKotlinCompilation
composeName"KotlinCompilation
disambiguateName&KotlinCompilation
associateWithClosureKotlinCompilation
isTestFactory
create5Project
resolvableConfigurationFromCompilationByScope,AbstractKotlinTarget
createMavenPublications9MavenPublication
addKotlinToolingMetadataArtifactIfNeeded-Project
setupGeneralKotlinExtensionParameters-MetadataProvider
getSourceSetCompiledMetadata7ChooseVisibleSourceSets
getAllCompiledSourceSetMetadata'ResolvedComponentResult
toProjectOrNull&KotlinGradleVariant
outputsJarTaskName#KotlinGradleFragment
isNativeShared)KotlinGradleFragment
isNativeHostSpecific%KotlinProjectStructureMetadata
toJson,KotlinProjectStructureMetadata
toXmlDocument(KotlinProjectStructureMetadata
serializeNodeList
elementsProject
distsDirectoryKotlinProjectExtension
targetsProject
archivesNameProject
currentBuildIdKotlinModule
representsProject>VariantPublishingConfigurator
configureSingleVariantPublishing?VariantPublishingConfigurator
configureSingleVariantPublication?VariantPublishingConfigurator
configureNativeVariantPublicationKotlinPm20ProjectExtension
jvmKotlinGradleModule
jvmProject
hasKpmModel-Project
metadataCompilationRegistryByModuleIdProject
kpmModulesProject
kpmModelContainerProject
kpmModelContainerOrNull#KotlinGradleModule
moduleCapability$ComponentSelector
toModuleDependency*ResolvedComponentResult
toModuleIdentifier+ComponentIdentifier
matchesModuleIdentifier!ComponentIdentifier
matchesModule+ComponentIdentifier
matchesModuleDependency%ComponentSelector
toModuleIdentifiers2ModuleComponentIdentifier
toSingleModuleIdentifier0ResolvedComponentResult
toSingleModuleIdentifier*ResolvedComponentResult
toModuleDependency+ResolvedComponentResult
toModuleIdentifiersFragmentAttributes
plusAttributeContainer
apply!KotlinGradleVariant
ownModuleName"FragmentConfigurationRelation
plusFragmentArtifacts
plusConfiguration
configure6KotlinCompilationData
pluginClasspathConfigurationName/Project
compilerPluginProviderForNativeMetadata4Project
compilerPluginProviderForPlatformCompilation"Project
compilerPluginDataProvider)Project
compilerPluginProviderForMetadataEKotlinGradleFragmentConfigurationDefinition
withConfigurationProvider0KotlinGradleFragmentConfigurationDefinition
plus6KotlinGradleModule
resolvableMetadataConfigurationName-KotlinGradleModule
variantsContainingFragmentKotlinGradleModule
isMain#KotlinGradleModule
disambiguateNameFragmentCapabilities
plus=KotlinGradleFragmentConfigurationCapabilities
setCapabilities3MavenPublication
setupKotlinToolingMetadataIfNeeded1KotlinGradleVariant
defaultSourceArtifactTaskName&Companion
ofVariantRuntimeDependencies Project
newDependencyFilesHolder+Companion
ofMetadataCompilationDependencies&Companion
ofVariantCompileDependencies+KotlinCompilationData
isMainCompilationData*GradleDependencyGraph
allDependencyModules(GradleDependencyGraph
allDependencyNodes-KotlinModuleFragment
unambiguousNameInProject&Companion
disambiguateNameOmittingMain%KotlinModuleFragment
disambiguateNameCompanion
disambiguateName6PropertiesProvider
checkHmppFeatureFlagsForConsistencyFramework
namePrefix.Project
registerEmbedAndSignAppleFrameworkTask*Project
registerAssembleAppleFrameworkTaskProject
appleFrameworkDirIterable
dependsOnClosure$KotlinSourceSet
withDependsOnClosure,KotlinSourceSet
checkForCircularDependencies6KotlinMultiplatformExtension
findSourceSetsDependingOn KotlinSourceSet
dependsOnClosure KotlinSourceSet
disambiguateNameIterable
withDependsOnClosureProject
XCFramework%Project
parentAssembleXCFrameworkTask'Project
registerAssembleXCFrameworkTask-Project
registerAssembleFatForXCFrameworkTaskProject
eraseIfDefault1Project
compilationDependencyConfigurationByScope/Project
sourceSetDependencyConfigurationByScope-Project
sourceSetMetadataConfigurationByScopeDouble
asStringKotlinLogger
logTimeKotlinLogger
kotlinDebugFileHasher
calculateDirHashByteArray
toHexAppendable
appendConfigsFromDir)KotlinJsTargetDsl
calculateJsCompilerTypeString
jsQuoted#KotlinJsOptions
isProduceZippedKlib%KotlinJsOptions
isProduceUnzippedKlib.KotlinJsIrOutputGranularity
toCompilerArgumentJsBinary
executeTaskBaseNameNpmRange
caretizeSingleVersion$NodeJsRootExtension
asNpmEnvironmentNpmDependency
toDeclaration-NpmDependencyDeclaration
uniqueRepresentationFile
isCompatibleArchive!Project
addNpmDependencyExtensionKotlinJsCompilation
npmProjectSemVer
toVersionVersion
toSemVerString
foldDelimitersSet
intersectNpmRange
unionNpmRange
hasIntersectionNpmRange
intersectNpmRange
invertString
isFileVersionTaskCollection
implementingProject
yarnYarnResolution
toVersionStringQuotedLineResult
parse Companion
createExecutionContextFamily
platformLiteralCocoapodsDependency
schemeName"Project
registerExportDependencies Project
registerLibsDependencies.KotlinNativeArtifact
registerLinkFrameworkTaskFKotlinSharedNativeCompilation
getImplicitlyDependingNativeCompilations,KotlinCompilation
allParticipatingSourceSets Project
kotlinArtifactsExtension(Project
registerKotlinArtifactsExtension4Project
collectAllSharedCommonizerTargetsFromProject2Project
collectAllSharedCommonizerTargetsFromBuildProject
commonizeCInteropTaskProject
commonizeTask2Project
isIntransitiveMetadataConfigurationEnabled'Project
copyCommonizeCInteropForIdeTask&Project
isCInteropCommonizationEnabledProject
runCommonizerTask'Project
commonizeNativeDistributionTask-Project
cleanNativeDistributionCommonizerTask-Project
isPlatformIntegerCommonizationEnabled.Project
isOptimisticNumberCommonizationEnabled5Project
isNativeDistributionCommonizationCacheEnabled6Project
locateOrCreateCInteropApiElementsConfiguration5Project
locateOrCreateCInteropDependencyConfiguration)Project
includeCommonizedCInteropMetadata!Project
getSharedCommonizerTarget0Project
getPropagatedCInteropDependenciesOrEmpty+Project
setupCInteropPropagatedDependencies!Project
getAllCInteropOutputFiles;KotlinMultiplatformExtension
forAllSharedNativeCompilations:KotlinMultiplatformExtension
forAllDefaultKotlinSourceSets8AbstractCInteropCommonizerTask
commonizedOutputLibraries.AbstractCInteropCommonizerTask
outputDirectory8AbstractCInteropCommonizerTask
commonizedOutputDirectory3Project
addIntransitiveMetadataDependencyIfPossibleProject
commonizerLogLevel$Project
additionalCommonizerSettings1Project
createCInteropMetadataDependencyClasspathKProject
createCInteropMetadataDependencyClasspathFromAssociatedCompilations;ChooseVisibleSourceSets
visibleSourceSetsProvidingCInterops7Project
createCInteropMetadataDependencyClasspathForIdeHProject
createCInteropMetadataDependencyClasspathFromProjectDependenciesJProject
locateOrRegisterCInteropMetadataDependencyTransformationTaskForIde?CInteropMetadataDependencyTransformationTask
configureTaskOrderDProject
locateOrRegisterCInteropMetadataDependencyTransformationTaskJCInteropMetadataDependencyTransformationTask
onlyIfSourceSetIsSharedNativeCInteropProcess
toGist9Project
setupCInteropCommonizerDependenciesForCompilation1Project
setupCInteropCommonizerDependenciesForIde+Project
setupCInteropCommonizerDependenciesAProject
setupCInteropTransformCompositeMetadataDependenciesForIde!Factory
fromAssociateCompilationsFactory
fromProject
isAllowCommonizer1KotlinMultiplatformExtension
nativeRootSourceSetsProject
addDependencies-Project
setupKotlinNativePlatformDependencies'Project
getOriginalPlatformLibrariesFor,Project
isNativeDependencyPropagationEnabledBNativeDistributionCommonizerTask
getCommonizedPlatformLibrariesFor)Project
getNativeDistributionDependencies
Any
invokeProject
findAndroidTarget KotlinTargetTestRun
testTaskNameProject
cocoapodsBuildDirs%Project
getPodBuildSettingsPropertiesFamily
toPodGenTaskNameString
toSetupBuildTaskName-KotlinMultiplatformExtension
supportedTargets"String
toBuildDependenciesTaskName/PodBuildSettingsProperties
frameworkSearchPathsKotlinNativeTarget
toValidSDK)CocoapodsDependency
toPodDownloadTaskNameString
splitQuotedArgsProject
getPodBuildTaskProviderString
asValidFrameworkNameProject
reportsDirProject
testResultsDir$TestTaskReports
configureConventionsKotlinTest
configureConventionsProject
testReportsDir)Project
includeKotlinToolingMetadataInApkDependency
isPrioritized0Configuration
reorderPluginClasspathDependencies.CompilerArgumentAware
prepareCompilerArguments.Project
registerBuildKotlinToolingMetadataTask1KotlinGradleModule
buildKotlinToolingMetadataTaskProject
buildProjectSettings&KotlinGradleVariant
nativeExtrasOrNull"KotlinGradleVariant
jsExtrasOrNull&Project
buildKotlinToolingMetadataTask#KotlinGradleVariant
jvmExtrasOrNull*KotlinProjectExtension
buildProjectTargets+KotlinProjectExtension
buildProjectSettings&KotlinGradleModule
buildProjectTargets'KotlinGradleVariant
androidExtrasOrNull+KotlinGradleModule
getKotlinToolingMetadata/KotlinProjectExtension
getKotlinToolingMetadata6Project
buildKotlinToolingMetadataForMainKpmModuleTask6Project
buildKotlinToolingMetadataForAllKpmModulesTask2Project
createGenerateProjectStructureMetadataTask*Project
getMetadataCompilationForSourceSet'Project
isKotlinGranularMetadataEnabled-Project
isCompatibilityMetadataVariantEnabled!Project
filesWithUnpackedArchives5Project
shouldCompileIntermediateSourceSetsToMetadataSlfLogger
processLogMessageGradleLogger
processLogMessageLogger
processLogMessageProject
isInIdeaSyncFile
ensureParentDirsCreated ServiceRegistry
execWithProgress#ServiceRegistry
execWithErrorLogger,CompilerPluginOptions
withWrappedKaptOptionsProject
kotlinDependency$Configuration
nonProjectDependencies'Project
tryWithDependenciesIfUnresolvedEKotlinTarget
excludeStdlibAndKotlinTestCommonFromPlatformCompilations'Configuration
allNonProjectDependencies/KotlinTargetWithTests
findTestRunsByCompilationServiceRegistry
operationType
finalInternalName!TaskWithLocalState
allOutputFiles.BaseVariant
annotationProcessorOptionProviders"Configuration
getNamedDependencies5BaseVariant
dataBindingDependencyArtifactsIfSupported&BaseVariant
annotationProcessorOptionsClassLoader
rootOrSelfKotlinLogger
logFinish+Configuration
discoverScriptExtensionsFiles;DependencyHandler
registerDiscoverScriptExtensionsTransform?DependencyHandler
registerOnceDiscoverScriptExtensionsTransform;Project
registerCommonizerClasspathConfigurationIfNecessaryProject
konanHomeProject
jvmArgsProject
getKonanCacheKindProject
disableKonanDaemonProject
konanVersion#CommonizerDependency
identityString	Key
setTo&KonanDistribution
konanCommonLibrariesKonanDistribution
klibDirKonanDistribution
stdlib!KonanDistribution
platformLibsDirIdentityStringTokenizer
plusParser
zeroOrMoreParser
ignoreIterable
withAllLeavesCommonizerTarget
withAllLeavesIterable
allLeaves%SharedCommonizerTarget
identityStringCommonizerTarget
identityStringCommonizerTarget
levelIterable
konanTargetsCommonizerTarget
allLeavesCommonizerTarget
konanTargetsKotlinModuleVariant
platform*KotlinModuleFragment
fragmentAttributeSets#KotlinModuleFragment
refinesClosure'KotlinModuleFragment
withRefinesClosure'KotlinModule
variantsContainingFragment"KotlinModule
findRefiningFragments8KotlinModuleFragment
nativeMetadataCompilationPluginData2KotlinModuleFragment
metadataCompilationPluginData1KotlinModuleVariant
platformCompilationPluginData7IdeScriptCompilationConfigurationKeys
acceptedLocations9IdeScriptCompilationConfigurationKeys
dependenciesSources&ScriptCompilationConfigurationKeys
ide<ReplScriptCompilationConfigurationKeys
makeSnippetIdentifier'ScriptCompilationConfigurationKeys
repl8ReplScriptCompilationConfigurationKeys
resultFieldPrefix3ScriptEvaluationConfigurationKeys
implicitReceivers"ScriptEvaluationConfiguration
with4ScriptEvaluationConfiguration
refineBeforeEvaluation4ScriptEvaluationConfigurationKeys
providedProperties%Builder
enableScriptsInstancesSharingCScriptEvaluationConfigurationKeys
refineConfigurationBeforeEvaluate2ScriptEvaluationConfigurationKeys
previousSnippets1ScriptEvaluationConfigurationKeys
constructorArgs<ScriptEvaluationConfigurationKeys
scriptsInstancesSharingMap)Builder
refineConfigurationBeforeEvaluate9ScriptEvaluationConfigurationKeys
scriptsInstancesSharing:ScriptEvaluationConfigurationKeys
compilationConfiguration3ScriptEvaluationConfigurationKeys
hostConfiguration4ScriptCompilationConfigurationKeys
defaultIdentifier0ScriptCompilationConfigurationKeys
fileExtension4ScriptCompilationConfigurationKeys
hostConfiguration1ScriptCompilationConfigurationKeys
defaultImports#ScriptCompilationConfiguration
with,ScriptCompilationConfigurationKeys
baseClass.ScriptCompilationConfigurationKeys
resultFieldEScriptCompilationConfigurationKeys
refineConfigurationBeforeCompiling2ScriptCompilationConfiguration
refineOnAnnotations4ScriptCompilationConfiguration
refineBeforeCompiling2ScriptCompilationConfigurationKeys
compilerOptions2ScriptCompilationConfiguration
refineBeforeParsing0ScriptCompilationConfigurationKeys
importScripts=ScriptCompilationConfigurationKeys
scriptFileLocationVariable%PropertiesCollection
simpleRefineImplCScriptCompilationConfigurationKeys
refineConfigurationBeforeParsingCScriptCompilationConfigurationKeys
refineConfigurationOnAnnotations.ScriptCompilationConfigurationKeys
displayName2ScriptCompilationConfigurationKeys
filePathPattern5ScriptCompilationConfigurationKeys
scriptFileLocation2ScriptCompilationConfigurationKeys
sourceFragments4ScriptCompilationConfigurationKeys
implicitReceivers/ScriptCompilationConfigurationKeys
dependenciesBuilder
refineConfiguration5ScriptCompilationConfigurationKeys
providedProperties,ScriptingHostConfiguration
getScriptingClass8ScriptingHostConfigurationKeys
configurationDependencies0ScriptingHostConfigurationKeys
getScriptingClass+ScriptingHostConfiguration
withDefaultsFromBuilder
getEvaluationContext3ScriptingHostConfigurationKeys
getEvaluationContextScriptingHostConfiguration
withIterable
mapNotNullSuccess!ResultWithDiagnostics
valueOrNullString
asErrorDiagnosticsAny
asSuccessResultWithDiagnostics
onFailureThrowable
asDiagnosticsIterable
mapSuccessImplResultWithDiagnostics
onSuccessIterable
mapSuccessResultWithDiagnostics
valueOrIterable
flatMapSuccess	List
plus"ResultWithDiagnostics
valueOrThrow*ReplAnalyzerResultKeys
analysisDiagnostics)ReplAnalyzerResultKeys
renderedResultTypeIterable
filterByAnnotationType,ScriptCollectedDataKeys
collectedAnnotations/ScriptEvaluationContextDataKeys
commandLineArgs(ScriptCollectedDataKeys
foundAnnotationsLinkedSnippetImpl
addLinkedSnippet
toListLinkedSnippet
get(String
cleanContentPreservingLinesLayoutFile
toScriptSourceString
toScriptSourceExternalSourceCode
textSafeKClass
findAnnotationBuilder
propertiesFromTemplateKotlinType
getTemplateClassKClass
kotlinScriptAnnotation6ProjectExtensionDescriptor
registerExtensionIfRequiredPropertiesCollection
getOrError/CompilerConfiguration
processPluginsCommandLineClassLoader
loadServices!CompilerConfiguration
loadPlugins+CompilerMessageSeverity
toScriptingSeverityMessageCollector
reporterCScriptCompilationConfiguration
withUpdatesFromCompilerConfiguration-SharedScriptCompilationContext
applyConfigure/CompilerConfiguration
updateWithCompilerOptions5CompilerConfiguration
updateWithRefinedConfigurationsReplCodeLine
toSourceCodeSourceCode
addNoSourceCode
scriptFileNameThrowable
asResolveFailureGScriptCompilationConfigurationKeys
skipExtensionsResolutionForImplicitsVScriptCompilationConfigurationKeys
skipExtensionsResolutionForImplicitsExceptInnermost8ConstantExpressionEvaluator
evaluateToConstantArrayValueKtCallExpression
isArrayCallKtAnnotationEntry
typeNameString
orAnonymousKClass
classIdKType
classIdVirtualFile
loadAnnotationsSourceCode
getKtFile%ScriptDependencies
adjustByDefinitionSourceCode
getVirtualFileDocument
offsetToPositionPsiElement
locationSourceCode
toKtFileSource VirtualFile
getAnnotationEntries1ScriptCompilationConfiguration
adjustByDefinitionIterable
construct!ScriptDependenciesResolver
unwrap-ScriptingHostConfigurationKeys
getEnvironmentAScriptCompilationConfigurationKeys
annotationsForSamWithReceivers+ScriptCompilationConfigurationKeys
platform List
partitionLoadJarDefinitions List
partitionLoadDirDefinitionsList
partitionLoadDefinitionsIterable
partitionMapNotNullVirtualFile
isKotlinFileTypeVirtualFile
isNonScriptPsiFile
findScriptDefinition VirtualFile
findScriptDefinition*PsiFile
findScriptCompilationConfiguration1ScriptCompilationConfigurationResult
valueOrErrorBuilder
updateClasspath/JvmScriptCompilationConfigurationKeys
jvmTarget8JvmScriptCompilationConfigurationBuilder
updateClasspathEJvmScriptCompilationConfigurationBuilder
dependenciesFromClassContext&ScriptCompilationConfigurationKeys
jvm.JvmScriptCompilationConfigurationKeys
javaHome3ScriptCompilationConfiguration
withUpdatedClasspath-JvmScriptCompilationConfigurationKeys
jdkHomeBuilder
updateClasspathImplDJvmScriptCompilationConfigurationBuilder
dependenciesFromClassloaderGJvmScriptCompilationConfigurationBuilder
dependenciesFromCurrentContextCollection
filterNewClasspath0ScriptEvaluationConfiguration
getOrPrepareShared5JvmScriptEvaluationConfigurationKeys
loadDependencies?JvmScriptEvaluationConfigurationKeys
scriptsInstancesSharingMap6JvmScriptEvaluationConfigurationKeys
actualClassLoader4JvmScriptEvaluationConfigurationKeys
baseClassLoader;JvmScriptEvaluationConfigurationKeys
lastSnippetClassLoader%ScriptEvaluationConfigurationKeys
jvm2JvmScriptEvaluationConfigurationKeys
mainArguments)JvmScriptingHostConfigurationKeys
jdkHome*JvmScriptingHostConfigurationKeys
javaHome"ScriptingHostConfigurationKeys
jvm1JvmScriptingHostConfigurationKeys
baseClassLoaderURL
toFileOrNullURL
toContainingJarOrNullList
toFilesOrEmpty"List
mapScriptReportsToDiagnostics)ScriptCompilationConfiguration
refineWithScriptContents
toScriptSourceList
toClassPathOrEmpty-ScriptCompilationConfiguration
toDependencies2JvmScriptingHostConfigurationKeys
compilationCacheError
renderError"ResultWithDiagnostics
isIncompleteResultWithDiagnostics
isError/KJvmCompiledScript
getOrCreateActualClassloaderKJvmCompiledScript
toBytes$KJvmCompiledScript
copyWithoutModule.CompiledScript
makeClassLoaderFromDependenciesInt
toSourceCodePositionString
determineSepString
findNthPosition
calcAbsoluteString
toValidJvmIdentifierString
toUniversalSeparatorClassLoader
forAllMatchingFilesChar
escape!List
mapToLegacyExpectedLocationsList
mapLegacyExpectedLocationsIterable
mapToLegacyReportsIterable
mapToDiagnosticsCompanion
parseStringOrThrowSchemaVersion
isCompatible+ClassLoader
rawClassPathFromKeyResourcePathList
filterIfContainsAllFile
unpackJarCollection,ClassLoader
classPathFromGetUrlsMethodOrNullList
takeIfContainsAll,ClassLoader
classPathFromTypicalResourceUrlsFile
hasParentNamedList
takeIfContainsAnyFile
matchMaybeVersionedFileFile
isValidClasspathFileURL
toValidClasspathFileOrNullList
toJsonArrayJsonObject
toJvmExtrasOrThrow JsonObject
toNativeExtrasOrThrowJsonObject
getOrThrow!JsonObject
toAndroidExtrasOrThrowExtras
toJsonObject"JsonObject
toTargetMetadataOrThrowNativeExtras
toJsonObjectJsExtras
toJsonObjectCompanion
parseJsonOrThrowCompanion
parseJson"KotlinToolingMetadata
toJsonObject#JsonObject
toProjectSettingsOrThrow"ProjectTargetMetadata
toJsonObject(JsonObject
toTargetMetadataExtrasOrThrowJsonObject
toJsExtrasOrThrowJvmExtras
toJsonObject"KotlinToolingMetadata
toJsonStringAndroidExtras
toJsonObjectProjectSettings
toJsonObject)JsonObject
toKotlinToolingMetadataOrThrowIrType
isKFunctionIrType
isUnsigned#IrAnnotationContainer
hasAnnotation#IrAnnotationContainer
getAnnotationIrType
isFunctionIrType
isPrimitiveArrayIrType
isThrowableIrType
isTypeParameterIrType
isUnsignedArrayScope
liftUsedNamesJsNode
resolveTemporaryNamesJsNode
resolveNamesJsNode
computeScopesCharSequence
isUnderscore!FirClassSymbol
unsubstitutedScopeFirClass
unsubstitutedScopeFirCallableSymbol
isStatic#PsiElement
getNonStrictParentOfType PsiElement
getStrictParentOfTypeFile
isModuleMappingFileBuildMetricsReporter
measurePair
component1Pair
component2 IrTypeParameter
erasedUpperBoundIrType
erasedUpperBound"IrBuilderWithScope
kClassReferenceIrClass
classIdIrClass
getSingleAbstractMethod,IrSimpleFunction
findInterfaceImplementation*IrSimpleFunction
createSuspendFunctionStubIrFunction
continuationTypeIrExpression
coerceToUnit(IrAnnotationContainer
getJsFunAnnotationIrGeneratorWithScope
irBlock IrGeneratorWithScope
irBlockBody IrGeneratorWithScope
irCompositeIrBuilderWithScope
irIfThenIrBuilder
at"IrValueParameter
isInlineParameterFqName
childKotlinLibrary
metadataVersion#ParameterDescriptor
indexOrMinusOneCompanion
createBLambdaWithTypeVariableAsExpectedTypeAtom
transformToResolvedLambdaKtLightMethod
checkIsMangledLighterASTNode
getChildren+StringBuilder
renderIncompatibleClassScopes.StringBuilder
renderIncompatibilityInformationKModuleDescriptor
packageFragmentProviderForModuleContentWithoutDependencies#DeclarationDescriptor
extractFileIdString
parseKotlinAbiVersion&Properties
writeKonanLibraryVersioning%Properties
readKonanLibraryVersioningFile
unpackZippedKonanLibraryToList
toUnresolvedLibrariesCompilerVersion
compatibleSearchPathResolver
resolveKotlinLibraryLayoutImpl
extract"KotlinLibraryLayoutImpl
extractDirKotlinLibrary
containsErrorCodeBaseKotlinLibrary
uniqueNameKotlinLibrary
packageFqNameKotlinLibrary
isInterop)BaseKotlinLibrary
commonizerNativeTargetsKotlinLibrary
commonizerTarget(BaseKotlinLibrary
unresolvedDependenciesBaseKotlinLibrary
shortNameBaseKotlinLibrary
nativeTargets'KotlinLibrary
exportForwardDeclarationsIrArrayReader
toArrayByteArray
bufferFile
javaFileFile
isPre_1_4_Library&Collection
filterKlibsPassedToCompiler.FileCollection
filterOutPublishableInteropLibsFile
providedByCompilerMutableList
addFileArgs&MergeResources
computeResourceSetList0BaseVariant
getJavaTaskProviderBaseVariant
getResDirectoriesKonanTarget
isCurrentHost KonanTarget
enabledOnCurrentHost&Project
nativeUseEmbeddableCompilerJar,KotlinNativeCompilationData
disambiguateName$KotlinToolingVersion
toKotlinVersion$KotlinVersion
toKotlinToolingVersionKotlinToolingVersion
compareToKotlinToolingVersion
isRC KotlinToolingVersion
buildNumber KotlinToolingVersion
isMilestoneKotlinToolingVersion
isAlphaKotlinToolingVersion
isDevKotlinToolingVersion
isStable!KotlinToolingVersion
isPreRelease%KotlinToolingVersion
classifierNumberKotlinToolingVersion
isSnapshotKotlinToolingVersion
isBetaIterable
withClosureIterable
closureAny
withClosureAny
linearClosureAny
closureIterable
closureToAny
withLinearClosureProject
konanDistributionFile
listLibraryFilesProject
kotlinTestRegistry#AtomicRef
findSegmentAndMoveForwardAtomicRef
moveForwardAtomicInt
addConditionally)DependencyHandler
kotlinCompilerClasspath'ArtifactHandler
kotlinCompilerClasspath3DependencyConstraintHandler
kotlinCompilerClasspath6TaskContainer
generatePrecompiledScriptPluginAccessors-ArtifactHandler
kotlinCompilerPluginClasspath/DependencyHandler
kotlinCompilerPluginClasspath9DependencyConstraintHandler
kotlinCompilerPluginClasspath=NamedDomainObjectContainer
implementationDependenciesMetadata3ArtifactHandler
testCompileOnlyDependenciesMetadata?DependencyConstraintHandler
testCompileOnlyDependenciesMetadata5DependencyHandler
testCompileOnlyDependenciesMetadata!DependencyHandler
sourceArtifacts+DependencyConstraintHandler
sourceArtifactsArtifactHandler
sourceArtifacts*DependencyConstraintHandler
compileOnlyApiArtifactHandler
compileOnlyApi DependencyHandler
compileOnlyApi:NamedDomainObjectContainer
compileOnlyDependenciesMetadataTaskContainer
compileTestKotlin3ArtifactHandler
kotlinNativeCompilerPluginClasspath5DependencyHandler
kotlinNativeCompilerPluginClasspath?DependencyConstraintHandler
kotlinNativeCompilerPluginClasspath(TaskContainer
buildKotlinToolingMetadata-ArtifactHandler
testKotlinScriptDefExtensions/DependencyHandler
testKotlinScriptDefExtensions9DependencyConstraintHandler
testKotlinScriptDefExtensionsDependencyHandler
devNpm*DependencyConstraintHandler
embeddedKotlinArtifactHandler
embeddedKotlinANamedDomainObjectContainer
testImplementationDependenciesMetadata*NamedDomainObjectContainer
sourceArtifactsNamedDomainObjectContainer
testNamedDomainObjectContainer
main"TaskContainer
compilePluginsBlocks0TaskContainer
generateExternalPluginSpecBuilders"NamedDomainObjectContainer
testApi>NamedDomainObjectContainer
kotlinNativeCompilerPluginClasspathTaskContainer
pluginDescriptors%TaskContainer
pluginUnderTestMetadata)NamedDomainObjectContainer
embeddedKotlinTaskContainer
kotlinSourcesJar%DependencyHandler
testKotlinScriptDef#ArtifactHandler
testKotlinScriptDef/DependencyConstraintHandler
testKotlinScriptDefDependencyConstraintHandler
apiDependencyHandler
apiArtifactHandler
api>NamedDomainObjectContainer
testCompileOnlyDependenciesMetadata/ArtifactHandler
runtimeOnlyDependenciesMetadata;DependencyConstraintHandler
runtimeOnlyDependenciesMetadata1DependencyHandler
runtimeOnlyDependenciesMetadata<NamedDomainObjectContainer
kotlinCompilerPluginClasspathMain8NamedDomainObjectContainer
testKotlinScriptDefExtensionsSamWithReceiverExtension
extNamedDomainObjectContainer
extProject
kotlinDependencyHandler
npm#DependencyConstraintHandler
testApiArtifactHandler
testApiDependencyHandler
testApi3DependencyHandler
kotlinCompilerPluginClasspathMain=DependencyConstraintHandler
kotlinCompilerPluginClasspathMain1ArtifactHandler
kotlinCompilerPluginClasspathMain;NamedDomainObjectContainer
intransitiveDependenciesMetadata$KotlinJvmProjectExtension
sourceSets1ArtifactHandler
kotlinCompilerPluginClasspathTest=DependencyConstraintHandler
kotlinCompilerPluginClasspathTest3DependencyHandler
kotlinCompilerPluginClasspathTest8NamedDomainObjectContainer
kotlinKlibCommonizerClasspath?NamedDomainObjectContainer
testIntransitiveDependenciesMetadata)NamedDomainObjectContainer
compileOnlyApi+DependencyConstraintHandler
kotlinScriptDef!DependencyHandler
kotlinScriptDefArtifactHandler
kotlinScriptDef$GradlePluginDevelopmentExtension
extNamedDomainObjectContainer
api<NamedDomainObjectContainer
kotlinCompilerPluginClasspathTestBDependencyConstraintHandler
testImplementationDependenciesMetadata8DependencyHandler
testImplementationDependenciesMetadata6ArtifactHandler
testImplementationDependenciesMetadata3TaskContainer
extractPrecompiledScriptPluginPlugins4NamedDomainObjectContainer
kotlinScriptDefExtensions6NamedDomainObjectContainer
testApiDependenciesMetadata)DependencyHandler
apiDependenciesMetadata3DependencyConstraintHandler
apiDependenciesMetadata'ArtifactHandler
apiDependenciesMetadataDependencyHandler
optionalNpm>NamedDomainObjectContainer
testRuntimeOnlyDependenciesMetadata*NamedDomainObjectContainer
kotlinScriptDefDependencyHandler
peerNpm/DependencyHandler
kotlinKlibCommonizerClasspath9DependencyConstraintHandler
kotlinKlibCommonizerClasspath-ArtifactHandler
kotlinKlibCommonizerClasspath2ArtifactHandler
implementationDependenciesMetadata4DependencyHandler
implementationDependenciesMetadata>DependencyConstraintHandler
implementationDependenciesMetadata'TaskContainer
inspectClassesForKotlinICTaskContainer
validatePluginsKotlinJvmProjectExtension
extTaskContainer
mainClassesProject
samWithReceiver8NamedDomainObjectContainer
kotlinCompilerPluginClasspath2NamedDomainObjectContainer
apiDependenciesMetadata@DependencyConstraintHandler
testIntransitiveDependenciesMetadata6DependencyHandler
testIntransitiveDependenciesMetadata4ArtifactHandler
testIntransitiveDependenciesMetadata.NamedDomainObjectContainer
testKotlinScriptDef<DependencyConstraintHandler
intransitiveDependenciesMetadata0ArtifactHandler
intransitiveDependenciesMetadata2DependencyHandler
intransitiveDependenciesMetadata-DependencyHandler
testApiDependenciesMetadata7DependencyConstraintHandler
testApiDependenciesMetadata+ArtifactHandler
testApiDependenciesMetadata2NamedDomainObjectContainer
kotlinCompilerClasspath;DependencyConstraintHandler
compileOnlyDependenciesMetadata/ArtifactHandler
compileOnlyDependenciesMetadata1DependencyHandler
compileOnlyDependenciesMetadata?DependencyConstraintHandler
testRuntimeOnlyDependenciesMetadata5DependencyHandler
testRuntimeOnlyDependenciesMetadata3ArtifactHandler
testRuntimeOnlyDependenciesMetadata<TaskContainer
configurePrecompiledScriptDependenciesResolver:NamedDomainObjectContainer
runtimeOnlyDependenciesMetadata*TaskContainer
generateScriptPluginAdapters)ArtifactHandler
kotlinScriptDefExtensions5DependencyConstraintHandler
kotlinScriptDefExtensions+DependencyHandler
kotlinScriptDefExtensionsIrClass
getPropertyGetterIrClass
getSimpleFunctionIrConstructorCall
isAnnotationIrType
getPrimitiveTypeIrClassifierSymbol
isInterface&ConeKotlinType
isExtensionFunctionTypeConeKotlinType
classIdFirTypeRef
approximatedList
toTypeProjectionsFirClass
modalityKtElement
analyzeIrFunction
isStatic$ResolvedCall
getParameterForArgumentCall
createLookupLocation"KtElement
getCalleeExpressionIfAny!KtExpression
createLookupLocationCall
getResolvedCall"Call
getValueArgumentForExpressionKtElement
getCallKtExpression
getType"Severity
toCompilerMessageSeverityProject
kotlinDslPluginOptions#Logger
warnOnDifferentKotlinVersionSourceSet
kotlinString
parseCompilerVersionString
removeSuffixIfPresentLazy
getValueOrNullString
prefixIfNotString
prefixBaseNameIfNotString
suffixIfNot	Path
FilePath
recursiveCopyToString
FileFile
zipFileSystemFile
zipDirAsFile
toPathFile
withZipFileSystemPath
unzipToFileSystem
fileEnum
visibleNameKonanTarget
presetNameProperties
hasPropertyString
resolveValue"Properties
keepOnlyDefaultProfilesProperties
propertyStringString
suffixFile
loadPropertiesProperties
propertyList#Properties
resolvablePropertyStringProperties
saveToFileFile
saveProperties!Properties
resolvablePropertyListByteArray
toHexStringCompilerVersion
isAtLeastProject
listPropertyLogger
kotlinInfoLogger
kotlinWarnLogger
kotlinDebugMutableList
addArgMutableList
addArgsMutableList
addArgIfNotNullMutableList
addKeyProject
getCommonizerTarget                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  